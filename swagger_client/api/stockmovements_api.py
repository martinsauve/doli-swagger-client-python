# coding: utf-8

"""
    Restler API Explorer

    Live API Documentation  # noqa: E501

    OpenAPI spec version: 1
    Contact: arul@luracast.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class StockmovementsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_stockmovements(self, body, **kwargs):  # noqa: E501
        """Create stock movement object. 🔐  # noqa: E501

        You can use the following message to test this RES API: { \"product_id\": 1, \"warehouse_id\": 1, \"qty\": 1, \"lot\": \"\", \"movementcode\": \"INV123\", \"movementlabel\": \"Inventory 123\", \"price\": 0 } $price Can be set to update AWP (Average Weighted Price) when you make a stock increase $dlc Eat-by date. Will be used if lot does not exists yet and will be created. $dluo Sell-by date. Will be used if lot does not exists yet and will be created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_stockmovements(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateStockmovementsModel body: **product_id** (required)  
**warehouse_id** (required)  
**qty** (required)  
lot  
movementcode  
movementlabel  
price  
dlc  
dluo  
 (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_stockmovements_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_stockmovements_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_stockmovements_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create stock movement object. 🔐  # noqa: E501

        You can use the following message to test this RES API: { \"product_id\": 1, \"warehouse_id\": 1, \"qty\": 1, \"lot\": \"\", \"movementcode\": \"INV123\", \"movementlabel\": \"Inventory 123\", \"price\": 0 } $price Can be set to update AWP (Average Weighted Price) when you make a stock increase $dlc Eat-by date. Will be used if lot does not exists yet and will be created. $dluo Sell-by date. Will be used if lot does not exists yet and will be created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_stockmovements_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateStockmovementsModel body: **product_id** (required)  
**warehouse_id** (required)  
**qty** (required)  
lot  
movementcode  
movementlabel  
price  
dlc  
dluo  
 (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_stockmovements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_stockmovements`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'product_id' in params:
            form_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'warehouse_id' in params:
            form_params.append(('warehouse_id', params['warehouse_id']))  # noqa: E501
        if 'qty' in params:
            form_params.append(('qty', params['qty']))  # noqa: E501
        if 'lot' in params:
            form_params.append(('lot', params['lot']))  # noqa: E501
        if 'movementcode' in params:
            form_params.append(('movementcode', params['movementcode']))  # noqa: E501
        if 'movementlabel' in params:
            form_params.append(('movementlabel', params['movementlabel']))  # noqa: E501
        if 'price' in params:
            form_params.append(('price', params['price']))  # noqa: E501
        if 'dlc' in params:
            form_params.append(('dlc', params['dlc']))  # noqa: E501
        if 'dluo' in params:
            form_params.append(('dluo', params['dluo']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/stockmovements', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_stockmovements(self, product_id, warehouse_id, qty, lot, movementcode, movementlabel, price, dlc, dluo, **kwargs):  # noqa: E501
        """Create stock movement object. 🔐  # noqa: E501

        You can use the following message to test this RES API: { \"product_id\": 1, \"warehouse_id\": 1, \"qty\": 1, \"lot\": \"\", \"movementcode\": \"INV123\", \"movementlabel\": \"Inventory 123\", \"price\": 0 } $price Can be set to update AWP (Average Weighted Price) when you make a stock increase $dlc Eat-by date. Will be used if lot does not exists yet and will be created. $dluo Sell-by date. Will be used if lot does not exists yet and will be created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_stockmovements(product_id, warehouse_id, qty, lot, movementcode, movementlabel, price, dlc, dluo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int product_id: (required)
        :param int warehouse_id: (required)
        :param float qty: (required)
        :param str lot: (required)
        :param str movementcode: (required)
        :param str movementlabel: (required)
        :param str price: (required)
        :param date dlc: (required)
        :param date dluo: (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_stockmovements_with_http_info(product_id, warehouse_id, qty, lot, movementcode, movementlabel, price, dlc, dluo, **kwargs)  # noqa: E501
        else:
            (data) = self.create_stockmovements_with_http_info(product_id, warehouse_id, qty, lot, movementcode, movementlabel, price, dlc, dluo, **kwargs)  # noqa: E501
            return data

    def create_stockmovements_with_http_info(self, product_id, warehouse_id, qty, lot, movementcode, movementlabel, price, dlc, dluo, **kwargs):  # noqa: E501
        """Create stock movement object. 🔐  # noqa: E501

        You can use the following message to test this RES API: { \"product_id\": 1, \"warehouse_id\": 1, \"qty\": 1, \"lot\": \"\", \"movementcode\": \"INV123\", \"movementlabel\": \"Inventory 123\", \"price\": 0 } $price Can be set to update AWP (Average Weighted Price) when you make a stock increase $dlc Eat-by date. Will be used if lot does not exists yet and will be created. $dluo Sell-by date. Will be used if lot does not exists yet and will be created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_stockmovements_with_http_info(product_id, warehouse_id, qty, lot, movementcode, movementlabel, price, dlc, dluo, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int product_id: (required)
        :param int warehouse_id: (required)
        :param float qty: (required)
        :param str lot: (required)
        :param str movementcode: (required)
        :param str movementlabel: (required)
        :param str price: (required)
        :param date dlc: (required)
        :param date dluo: (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'warehouse_id', 'qty', 'lot', 'movementcode', 'movementlabel', 'price', 'dlc', 'dluo']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_stockmovements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `create_stockmovements`")  # noqa: E501
        # verify the required parameter 'warehouse_id' is set
        if ('warehouse_id' not in params or
                params['warehouse_id'] is None):
            raise ValueError("Missing the required parameter `warehouse_id` when calling `create_stockmovements`")  # noqa: E501
        # verify the required parameter 'qty' is set
        if ('qty' not in params or
                params['qty'] is None):
            raise ValueError("Missing the required parameter `qty` when calling `create_stockmovements`")  # noqa: E501
        # verify the required parameter 'lot' is set
        if ('lot' not in params or
                params['lot'] is None):
            raise ValueError("Missing the required parameter `lot` when calling `create_stockmovements`")  # noqa: E501
        # verify the required parameter 'movementcode' is set
        if ('movementcode' not in params or
                params['movementcode'] is None):
            raise ValueError("Missing the required parameter `movementcode` when calling `create_stockmovements`")  # noqa: E501
        # verify the required parameter 'movementlabel' is set
        if ('movementlabel' not in params or
                params['movementlabel'] is None):
            raise ValueError("Missing the required parameter `movementlabel` when calling `create_stockmovements`")  # noqa: E501
        # verify the required parameter 'price' is set
        if ('price' not in params or
                params['price'] is None):
            raise ValueError("Missing the required parameter `price` when calling `create_stockmovements`")  # noqa: E501
        # verify the required parameter 'dlc' is set
        if ('dlc' not in params or
                params['dlc'] is None):
            raise ValueError("Missing the required parameter `dlc` when calling `create_stockmovements`")  # noqa: E501
        # verify the required parameter 'dluo' is set
        if ('dluo' not in params or
                params['dluo'] is None):
            raise ValueError("Missing the required parameter `dluo` when calling `create_stockmovements`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'product_id' in params:
            form_params.append(('product_id', params['product_id']))  # noqa: E501
        if 'warehouse_id' in params:
            form_params.append(('warehouse_id', params['warehouse_id']))  # noqa: E501
        if 'qty' in params:
            form_params.append(('qty', params['qty']))  # noqa: E501
        if 'lot' in params:
            form_params.append(('lot', params['lot']))  # noqa: E501
        if 'movementcode' in params:
            form_params.append(('movementcode', params['movementcode']))  # noqa: E501
        if 'movementlabel' in params:
            form_params.append(('movementlabel', params['movementlabel']))  # noqa: E501
        if 'price' in params:
            form_params.append(('price', params['price']))  # noqa: E501
        if 'dlc' in params:
            form_params.append(('dlc', params['dlc']))  # noqa: E501
        if 'dluo' in params:
            form_params.append(('dluo', params['dluo']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/stockmovements', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_stockmovements(self, **kwargs):  # noqa: E501
        """Get a list of stock movement 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_stockmovements(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :param int limit: Limit for list
        :param int page: Page number
        :param str sqlfilters: Other criteria to filter answers separated by a comma. Syntax example \"(t.product_id:=:1) and (t.date_creation:<:'20160101')\"
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_stockmovements_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_stockmovements_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_stockmovements_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of stock movement 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_stockmovements_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :param int limit: Limit for list
        :param int page: Page number
        :param str sqlfilters: Other criteria to filter answers separated by a comma. Syntax example \"(t.product_id:=:1) and (t.date_creation:<:'20160101')\"
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sortfield', 'sortorder', 'limit', 'page', 'sqlfilters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_stockmovements" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sortfield' in params:
            query_params.append(('sortfield', params['sortfield']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'sqlfilters' in params:
            query_params.append(('sqlfilters', params['sqlfilters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/stockmovements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
