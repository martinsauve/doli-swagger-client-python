# coding: utf-8

"""
    Restler API Explorer

    Live API Documentation  # noqa: E501

    OpenAPI spec version: 1
    Contact: arul@luracast.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SupplierinvoicesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_supplierinvoices(self, **kwargs):  # noqa: E501
        """Create supplier invoice object 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_supplierinvoices(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateSupplierinvoicesModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_supplierinvoices_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_supplierinvoices_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_supplierinvoices_with_http_info(self, **kwargs):  # noqa: E501
        """Create supplier invoice object 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_supplierinvoices_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateSupplierinvoicesModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_supplierinvoices" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_supplierinvoices(self, **kwargs):  # noqa: E501
        """Create supplier invoice object 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_supplierinvoices(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_supplierinvoices_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_supplierinvoices_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_supplierinvoices_with_http_info(self, **kwargs):  # noqa: E501
        """Create supplier invoice object 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_supplierinvoices_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_supplierinvoices" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_supplierinvoices(self, **kwargs):  # noqa: E501
        """List invoices 🔐  # noqa: E501

        Get a list of supplier invoices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_supplierinvoices(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :param int limit: Limit for list
        :param int page: Page number
        :param str thirdparty_ids: Thirdparty ids to filter invoices of (example '1' or '1,2,3')
        :param str status: Filter by invoice status : draft | unpaid | paid | cancelled
        :param str sqlfilters: Other criteria to filter answers separated by a comma. Syntax example \"(t.ref:like:'SO-%') and (t.datec:<:'20160101')\"
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_supplierinvoices_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_supplierinvoices_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_supplierinvoices_with_http_info(self, **kwargs):  # noqa: E501
        """List invoices 🔐  # noqa: E501

        Get a list of supplier invoices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_supplierinvoices_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :param int limit: Limit for list
        :param int page: Page number
        :param str thirdparty_ids: Thirdparty ids to filter invoices of (example '1' or '1,2,3')
        :param str status: Filter by invoice status : draft | unpaid | paid | cancelled
        :param str sqlfilters: Other criteria to filter answers separated by a comma. Syntax example \"(t.ref:like:'SO-%') and (t.datec:<:'20160101')\"
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sortfield', 'sortorder', 'limit', 'page', 'thirdparty_ids', 'status', 'sqlfilters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_supplierinvoices" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sortfield' in params:
            query_params.append(('sortfield', params['sortfield']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'thirdparty_ids' in params:
            query_params.append(('thirdparty_ids', params['thirdparty_ids']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'sqlfilters' in params:
            query_params.append(('sqlfilters', params['sqlfilters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_supplierinvoices(self, id, **kwargs):  # noqa: E501
        """Delete supplier invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_supplierinvoices(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Supplier invoice ID (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_supplierinvoices_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_supplierinvoices_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def remove_supplierinvoices_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete supplier invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_supplierinvoices_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Supplier invoice ID (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_supplierinvoices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_supplierinvoices`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_supplierinvoices(self, id, **kwargs):  # noqa: E501
        """Get properties of a supplier invoice object 🔐  # noqa: E501

        Return an array with supplier invoice information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_supplierinvoices(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of supplier invoice (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_supplierinvoices_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_supplierinvoices_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def retrieve_supplierinvoices_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get properties of a supplier invoice object 🔐  # noqa: E501

        Return an array with supplier invoice information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_supplierinvoices_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of supplier invoice (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_supplierinvoices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `retrieve_supplierinvoices`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_add_payment(self, body, id, **kwargs):  # noqa: E501
        """Add payment line to a specific supplier invoice with the remain to pay as amount. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_add_payment(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupplierinvoicesAddPaymentModel body: **datepaye** (required)  
**payment_mode_id** (required)  
**closepaidinvoices** (required)  
**accountid** (required)  
num_payment  
comment  
chqemetteur  
chqbank  
 (required)
        :param int id: Id of invoice (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_add_payment_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_add_payment_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_add_payment_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Add payment line to a specific supplier invoice with the remain to pay as amount. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_add_payment_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupplierinvoicesAddPaymentModel body: **datepaye** (required)  
**payment_mode_id** (required)  
**closepaidinvoices** (required)  
**accountid** (required)  
num_payment  
comment  
chqemetteur  
chqbank  
 (required)
        :param int id: Id of invoice (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_add_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `supplierinvoices_add_payment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_add_payment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'datepaye' in params:
            form_params.append(('datepaye', params['datepaye']))  # noqa: E501
        if 'payment_mode_id' in params:
            form_params.append(('payment_mode_id', params['payment_mode_id']))  # noqa: E501
        if 'closepaidinvoices' in params:
            form_params.append(('closepaidinvoices', params['closepaidinvoices']))  # noqa: E501
        if 'accountid' in params:
            form_params.append(('accountid', params['accountid']))  # noqa: E501
        if 'num_payment' in params:
            form_params.append(('num_payment', params['num_payment']))  # noqa: E501
        if 'comment' in params:
            form_params.append(('comment', params['comment']))  # noqa: E501
        if 'chqemetteur' in params:
            form_params.append(('chqemetteur', params['chqemetteur']))  # noqa: E501
        if 'chqbank' in params:
            form_params.append(('chqbank', params['chqbank']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}/payments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_add_payment(self, datepaye, payment_mode_id, closepaidinvoices, accountid, num_payment, comment, chqemetteur, chqbank, id, **kwargs):  # noqa: E501
        """Add payment line to a specific supplier invoice with the remain to pay as amount. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_add_payment(datepaye, payment_mode_id, closepaidinvoices, accountid, num_payment, comment, chqemetteur, chqbank, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str datepaye: (required)
        :param int payment_mode_id: (required)
        :param str closepaidinvoices: (required)
        :param int accountid: (required)
        :param str num_payment: (required)
        :param str comment: (required)
        :param str chqemetteur: (required)
        :param str chqbank: (required)
        :param int id: Id of invoice (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_add_payment_with_http_info(datepaye, payment_mode_id, closepaidinvoices, accountid, num_payment, comment, chqemetteur, chqbank, id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_add_payment_with_http_info(datepaye, payment_mode_id, closepaidinvoices, accountid, num_payment, comment, chqemetteur, chqbank, id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_add_payment_with_http_info(self, datepaye, payment_mode_id, closepaidinvoices, accountid, num_payment, comment, chqemetteur, chqbank, id, **kwargs):  # noqa: E501
        """Add payment line to a specific supplier invoice with the remain to pay as amount. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_add_payment_with_http_info(datepaye, payment_mode_id, closepaidinvoices, accountid, num_payment, comment, chqemetteur, chqbank, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str datepaye: (required)
        :param int payment_mode_id: (required)
        :param str closepaidinvoices: (required)
        :param int accountid: (required)
        :param str num_payment: (required)
        :param str comment: (required)
        :param str chqemetteur: (required)
        :param str chqbank: (required)
        :param int id: Id of invoice (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datepaye', 'payment_mode_id', 'closepaidinvoices', 'accountid', 'num_payment', 'comment', 'chqemetteur', 'chqbank', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_add_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'datepaye' is set
        if ('datepaye' not in params or
                params['datepaye'] is None):
            raise ValueError("Missing the required parameter `datepaye` when calling `supplierinvoices_add_payment`")  # noqa: E501
        # verify the required parameter 'payment_mode_id' is set
        if ('payment_mode_id' not in params or
                params['payment_mode_id'] is None):
            raise ValueError("Missing the required parameter `payment_mode_id` when calling `supplierinvoices_add_payment`")  # noqa: E501
        # verify the required parameter 'closepaidinvoices' is set
        if ('closepaidinvoices' not in params or
                params['closepaidinvoices'] is None):
            raise ValueError("Missing the required parameter `closepaidinvoices` when calling `supplierinvoices_add_payment`")  # noqa: E501
        # verify the required parameter 'accountid' is set
        if ('accountid' not in params or
                params['accountid'] is None):
            raise ValueError("Missing the required parameter `accountid` when calling `supplierinvoices_add_payment`")  # noqa: E501
        # verify the required parameter 'num_payment' is set
        if ('num_payment' not in params or
                params['num_payment'] is None):
            raise ValueError("Missing the required parameter `num_payment` when calling `supplierinvoices_add_payment`")  # noqa: E501
        # verify the required parameter 'comment' is set
        if ('comment' not in params or
                params['comment'] is None):
            raise ValueError("Missing the required parameter `comment` when calling `supplierinvoices_add_payment`")  # noqa: E501
        # verify the required parameter 'chqemetteur' is set
        if ('chqemetteur' not in params or
                params['chqemetteur'] is None):
            raise ValueError("Missing the required parameter `chqemetteur` when calling `supplierinvoices_add_payment`")  # noqa: E501
        # verify the required parameter 'chqbank' is set
        if ('chqbank' not in params or
                params['chqbank'] is None):
            raise ValueError("Missing the required parameter `chqbank` when calling `supplierinvoices_add_payment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_add_payment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'datepaye' in params:
            form_params.append(('datepaye', params['datepaye']))  # noqa: E501
        if 'payment_mode_id' in params:
            form_params.append(('payment_mode_id', params['payment_mode_id']))  # noqa: E501
        if 'closepaidinvoices' in params:
            form_params.append(('closepaidinvoices', params['closepaidinvoices']))  # noqa: E501
        if 'accountid' in params:
            form_params.append(('accountid', params['accountid']))  # noqa: E501
        if 'num_payment' in params:
            form_params.append(('num_payment', params['num_payment']))  # noqa: E501
        if 'comment' in params:
            form_params.append(('comment', params['comment']))  # noqa: E501
        if 'chqemetteur' in params:
            form_params.append(('chqemetteur', params['chqemetteur']))  # noqa: E501
        if 'chqbank' in params:
            form_params.append(('chqbank', params['chqbank']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}/payments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_create_line(self, id, **kwargs):  # noqa: E501
        """Add a line to given supplier invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_create_line(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of supplier invoice to update (required)
        :param SupplierinvoicesCreateLineModel body: request_data  

        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_create_line_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_create_line_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_create_line_with_http_info(self, id, **kwargs):  # noqa: E501
        """Add a line to given supplier invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_create_line_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of supplier invoice to update (required)
        :param SupplierinvoicesCreateLineModel body: request_data  

        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_create_line" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_create_line`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}/lines', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_create_line(self, id, **kwargs):  # noqa: E501
        """Add a line to given supplier invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_create_line(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of supplier invoice to update (required)
        :param list[str] request_data:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_create_line_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_create_line_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_create_line_with_http_info(self, id, **kwargs):  # noqa: E501
        """Add a line to given supplier invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_create_line_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of supplier invoice to update (required)
        :param list[str] request_data:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_create_line" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_create_line`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}/lines', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_remove_line(self, id, lineid, **kwargs):  # noqa: E501
        """Deletes a line of a given supplier invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_remove_line(id, lineid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of supplier invoice (required)
        :param int lineid: Id of the line to delete (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_remove_line_with_http_info(id, lineid, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_remove_line_with_http_info(id, lineid, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_remove_line_with_http_info(self, id, lineid, **kwargs):  # noqa: E501
        """Deletes a line of a given supplier invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_remove_line_with_http_info(id, lineid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of supplier invoice (required)
        :param int lineid: Id of the line to delete (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'lineid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_remove_line" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_remove_line`")  # noqa: E501
        # verify the required parameter 'lineid' is set
        if ('lineid' not in params or
                params['lineid'] is None):
            raise ValueError("Missing the required parameter `lineid` when calling `supplierinvoices_remove_line`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'lineid' in params:
            path_params['lineid'] = params['lineid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}/lines/{lineid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_retrieve_lines(self, id, **kwargs):  # noqa: E501
        """Get lines of a supplier invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_retrieve_lines(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of supplier invoice (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_retrieve_lines_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_retrieve_lines_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_retrieve_lines_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get lines of a supplier invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_retrieve_lines_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of supplier invoice (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_retrieve_lines" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_retrieve_lines`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}/lines', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_retrieve_payments(self, id, **kwargs):  # noqa: E501
        """Get list of payments of a given supplier invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_retrieve_payments(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of SupplierInvoice (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_retrieve_payments_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_retrieve_payments_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_retrieve_payments_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get list of payments of a given supplier invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_retrieve_payments_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of SupplierInvoice (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_retrieve_payments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_retrieve_payments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}/payments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_update_line(self, id, lineid, **kwargs):  # noqa: E501
        """Update a line to a given supplier invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_update_line(id, lineid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of supplier invoice to update (required)
        :param int lineid: Id of line to update (required)
        :param SupplierinvoicesUpdateLineModel body: request_data  

        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_update_line_with_http_info(id, lineid, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_update_line_with_http_info(id, lineid, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_update_line_with_http_info(self, id, lineid, **kwargs):  # noqa: E501
        """Update a line to a given supplier invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_update_line_with_http_info(id, lineid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of supplier invoice to update (required)
        :param int lineid: Id of line to update (required)
        :param SupplierinvoicesUpdateLineModel body: request_data  

        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'lineid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_update_line" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_update_line`")  # noqa: E501
        # verify the required parameter 'lineid' is set
        if ('lineid' not in params or
                params['lineid'] is None):
            raise ValueError("Missing the required parameter `lineid` when calling `supplierinvoices_update_line`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'lineid' in params:
            path_params['lineid'] = params['lineid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}/lines/{lineid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_update_line(self, id, lineid, **kwargs):  # noqa: E501
        """Update a line to a given supplier invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_update_line(id, lineid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of supplier invoice to update (required)
        :param int lineid: Id of line to update (required)
        :param list[str] request_data:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_update_line_with_http_info(id, lineid, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_update_line_with_http_info(id, lineid, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_update_line_with_http_info(self, id, lineid, **kwargs):  # noqa: E501
        """Update a line to a given supplier invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_update_line_with_http_info(id, lineid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of supplier invoice to update (required)
        :param int lineid: Id of line to update (required)
        :param list[str] request_data:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'lineid', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_update_line" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_update_line`")  # noqa: E501
        # verify the required parameter 'lineid' is set
        if ('lineid' not in params or
                params['lineid'] is None):
            raise ValueError("Missing the required parameter `lineid` when calling `supplierinvoices_update_line`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'lineid' in params:
            path_params['lineid'] = params['lineid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}/lines/{lineid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_validate(self, id, **kwargs):  # noqa: E501
        """Validate an invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_validate(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Invoice ID (required)
        :param SupplierinvoicesValidateModel body: idwarehouse  
notrigger  

        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_validate_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_validate_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_validate_with_http_info(self, id, **kwargs):  # noqa: E501
        """Validate an invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_validate_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Invoice ID (required)
        :param SupplierinvoicesValidateModel body: idwarehouse  
notrigger  

        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_validate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_validate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'idwarehouse' in params:
            form_params.append(('idwarehouse', params['idwarehouse']))  # noqa: E501
        if 'notrigger' in params:
            form_params.append(('notrigger', params['notrigger']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_validate(self, id, **kwargs):  # noqa: E501
        """Validate an invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_validate(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Invoice ID (required)
        :param int idwarehouse:
        :param int notrigger:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_validate_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_validate_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_validate_with_http_info(self, id, **kwargs):  # noqa: E501
        """Validate an invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_validate_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Invoice ID (required)
        :param int idwarehouse:
        :param int notrigger:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'idwarehouse', 'notrigger']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_validate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_validate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'idwarehouse' in params:
            form_params.append(('idwarehouse', params['idwarehouse']))  # noqa: E501
        if 'notrigger' in params:
            form_params.append(('notrigger', params['notrigger']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_supplierinvoices(self, id, **kwargs):  # noqa: E501
        """Update supplier invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_supplierinvoices(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of supplier invoice to update (required)
        :param UpdateSupplierinvoicesModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_supplierinvoices_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_supplierinvoices_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_supplierinvoices_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update supplier invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_supplierinvoices_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of supplier invoice to update (required)
        :param UpdateSupplierinvoicesModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_supplierinvoices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_supplierinvoices`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_supplierinvoices(self, id, **kwargs):  # noqa: E501
        """Update supplier invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_supplierinvoices(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of supplier invoice to update (required)
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_supplierinvoices_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_supplierinvoices_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_supplierinvoices_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update supplier invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_supplierinvoices_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of supplier invoice to update (required)
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_supplierinvoices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_supplierinvoices`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
