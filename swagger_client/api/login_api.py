# coding: utf-8

"""
    Restler API Explorer

    Live API Documentation  # noqa: E501

    OpenAPI spec version: 1
    Contact: arul@luracast.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LoginApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def list_login(self, body, **kwargs):  # noqa: E501
        """Login ðŸ”“  # noqa: E501

        Request the API token for a couple username / password. Using method POST is recommanded for security reasons (method GET is often logged by default by web servers with parameters so with login and pass into server log file). Both methods are provided for developer conveniance. Best is to not use at all the login API method and enter directly the \"DOLAPIKEY\" into field at the top right of page. Note: The API token (DOLAPIKEY) can be found/set on the user page.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_login(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ListLoginModel body: **login** (required)  
**password** (required)  
entity  
reset  
 (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_login_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.list_login_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def list_login_with_http_info(self, body, **kwargs):  # noqa: E501
        """Login ðŸ”“  # noqa: E501

        Request the API token for a couple username / password. Using method POST is recommanded for security reasons (method GET is often logged by default by web servers with parameters so with login and pass into server log file). Both methods are provided for developer conveniance. Best is to not use at all the login API method and enter directly the \"DOLAPIKEY\" into field at the top right of page. Note: The API token (DOLAPIKEY) can be found/set on the user page.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_login_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ListLoginModel body: **login** (required)  
**password** (required)  
entity  
reset  
 (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_login" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `list_login`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'login' in params:
            form_params.append(('login', params['login']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501
        if 'entity' in params:
            form_params.append(('entity', params['entity']))  # noqa: E501
        if 'reset' in params:
            form_params.append(('reset', params['reset']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/login', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_login(self, login, password, entity, reset, **kwargs):  # noqa: E501
        """Login ðŸ”“  # noqa: E501

        Request the API token for a couple username / password. Using method POST is recommanded for security reasons (method GET is often logged by default by web servers with parameters so with login and pass into server log file). Both methods are provided for developer conveniance. Best is to not use at all the login API method and enter directly the \"DOLAPIKEY\" into field at the top right of page. Note: The API token (DOLAPIKEY) can be found/set on the user page.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_login(login, password, entity, reset, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str login: (required)
        :param str password: (required)
        :param str entity: (required)
        :param int reset: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_login_with_http_info(login, password, entity, reset, **kwargs)  # noqa: E501
        else:
            (data) = self.list_login_with_http_info(login, password, entity, reset, **kwargs)  # noqa: E501
            return data

    def list_login_with_http_info(self, login, password, entity, reset, **kwargs):  # noqa: E501
        """Login ðŸ”“  # noqa: E501

        Request the API token for a couple username / password. Using method POST is recommanded for security reasons (method GET is often logged by default by web servers with parameters so with login and pass into server log file). Both methods are provided for developer conveniance. Best is to not use at all the login API method and enter directly the \"DOLAPIKEY\" into field at the top right of page. Note: The API token (DOLAPIKEY) can be found/set on the user page.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_login_with_http_info(login, password, entity, reset, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str login: (required)
        :param str password: (required)
        :param str entity: (required)
        :param int reset: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['login', 'password', 'entity', 'reset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_login" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'login' is set
        if ('login' not in params or
                params['login'] is None):
            raise ValueError("Missing the required parameter `login` when calling `list_login`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `list_login`")  # noqa: E501
        # verify the required parameter 'entity' is set
        if ('entity' not in params or
                params['entity'] is None):
            raise ValueError("Missing the required parameter `entity` when calling `list_login`")  # noqa: E501
        # verify the required parameter 'reset' is set
        if ('reset' not in params or
                params['reset'] is None):
            raise ValueError("Missing the required parameter `reset` when calling `list_login`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'login' in params:
            form_params.append(('login', params['login']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501
        if 'entity' in params:
            form_params.append(('entity', params['entity']))  # noqa: E501
        if 'reset' in params:
            form_params.append(('reset', params['reset']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/login', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def login_login_unsecured(self, login, password, **kwargs):  # noqa: E501
        """Login ðŸ”“  # noqa: E501

        Request the API token for a couple username / password. Using method POST is recommanded for security reasons (method GET is often logged by default by web servers with parameters so with login and pass into server log file). Both methods are provided for developer conveniance. Best is to not use at all the login API method and enter directly the \"DOLAPIKEY\" into field at the top right of page. Note: The API token (DOLAPIKEY) can be found/set on the user page.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_login_unsecured(login, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str login: User login (required)
        :param str password: User password (required)
        :param str entity: Entity (when multicompany module is used). '' means 1=first company.
        :param int reset: Reset token (0=get current token, 1=ask a new token and canceled old token. This means access using current existing API token of user will fails: new token will be required for new access)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.login_login_unsecured_with_http_info(login, password, **kwargs)  # noqa: E501
        else:
            (data) = self.login_login_unsecured_with_http_info(login, password, **kwargs)  # noqa: E501
            return data

    def login_login_unsecured_with_http_info(self, login, password, **kwargs):  # noqa: E501
        """Login ðŸ”“  # noqa: E501

        Request the API token for a couple username / password. Using method POST is recommanded for security reasons (method GET is often logged by default by web servers with parameters so with login and pass into server log file). Both methods are provided for developer conveniance. Best is to not use at all the login API method and enter directly the \"DOLAPIKEY\" into field at the top right of page. Note: The API token (DOLAPIKEY) can be found/set on the user page.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_login_unsecured_with_http_info(login, password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str login: User login (required)
        :param str password: User password (required)
        :param str entity: Entity (when multicompany module is used). '' means 1=first company.
        :param int reset: Reset token (0=get current token, 1=ask a new token and canceled old token. This means access using current existing API token of user will fails: new token will be required for new access)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['login', 'password', 'entity', 'reset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method login_login_unsecured" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'login' is set
        if ('login' not in params or
                params['login'] is None):
            raise ValueError("Missing the required parameter `login` when calling `login_login_unsecured`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `login_login_unsecured`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'login' in params:
            query_params.append(('login', params['login']))  # noqa: E501
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501
        if 'entity' in params:
            query_params.append(('entity', params['entity']))  # noqa: E501
        if 'reset' in params:
            query_params.append(('reset', params['reset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/login', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
