# coding: utf-8

"""
    Restler API Explorer

    Live API Documentation  # noqa: E501

    OpenAPI spec version: 1
    Contact: arul@luracast.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ThirdpartiesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_thirdparties(self, **kwargs):  # noqa: E501
        """Create thirdparty object 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_thirdparties(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateThirdpartiesModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_thirdparties_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_thirdparties_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_thirdparties_with_http_info(self, **kwargs):  # noqa: E501
        """Create thirdparty object 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_thirdparties_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateThirdpartiesModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_thirdparties" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_thirdparties(self, **kwargs):  # noqa: E501
        """Create thirdparty object 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_thirdparties(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_thirdparties_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_thirdparties_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_thirdparties_with_http_info(self, **kwargs):  # noqa: E501
        """Create thirdparty object 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_thirdparties_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_thirdparties" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_thirdparties(self, **kwargs):  # noqa: E501
        """List thirdparties 🔐  # noqa: E501

        Get a list of thirdparties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_thirdparties(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :param int limit: Limit for list
        :param int page: Page number
        :param int mode: Set to 1 to show only customers Set to 2 to show only prospects Set to 3 to show only those are not customer neither prospect Set to 4 to show only suppliers
        :param int category: Use this param to filter list by category
        :param str sqlfilters: Other criteria to filter answers separated by a comma. Syntax example \"((t.nom:like:'TheCompany%') or (t.name_alias:like:'TheCompany%')) and (t.datec:<:'20160101')\"
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_thirdparties_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_thirdparties_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_thirdparties_with_http_info(self, **kwargs):  # noqa: E501
        """List thirdparties 🔐  # noqa: E501

        Get a list of thirdparties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_thirdparties_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :param int limit: Limit for list
        :param int page: Page number
        :param int mode: Set to 1 to show only customers Set to 2 to show only prospects Set to 3 to show only those are not customer neither prospect Set to 4 to show only suppliers
        :param int category: Use this param to filter list by category
        :param str sqlfilters: Other criteria to filter answers separated by a comma. Syntax example \"((t.nom:like:'TheCompany%') or (t.name_alias:like:'TheCompany%')) and (t.datec:<:'20160101')\"
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sortfield', 'sortorder', 'limit', 'page', 'mode', 'category', 'sqlfilters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_thirdparties" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sortfield' in params:
            query_params.append(('sortfield', params['sortfield']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'mode' in params:
            query_params.append(('mode', params['mode']))  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501
        if 'sqlfilters' in params:
            query_params.append(('sqlfilters', params['sqlfilters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_thirdparties(self, id, **kwargs):  # noqa: E501
        """Delete thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_thirdparties(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Thirparty ID (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_thirdparties_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_thirdparties_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def remove_thirdparties_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_thirdparties_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Thirparty ID (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_thirdparties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_thirdparties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_thirdparties(self, id, **kwargs):  # noqa: E501
        """Get properties of a thirdparty object 🔐  # noqa: E501

        Return an array with thirdparty informations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_thirdparties(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of third party to load (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_thirdparties_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_thirdparties_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def retrieve_thirdparties_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get properties of a thirdparty object 🔐  # noqa: E501

        Return an array with thirdparty informations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_thirdparties_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of third party to load (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_thirdparties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `retrieve_thirdparties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_add_category(self, id, category_id, **kwargs):  # noqa: E501
        """Add a customer category to a thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_add_category(id, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of thirdparty (required)
        :param int category_id: Id of category (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_add_category_with_http_info(id, category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_add_category_with_http_info(id, category_id, **kwargs)  # noqa: E501
            return data

    def thirdparties_add_category_with_http_info(self, id, category_id, **kwargs):  # noqa: E501
        """Add a customer category to a thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_add_category_with_http_info(id, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of thirdparty (required)
        :param int category_id: Id of category (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'category_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_add_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_add_category`")  # noqa: E501
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params or
                params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `thirdparties_add_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'category_id' in params:
            path_params['category_id'] = params['category_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/categories/{category_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_add_supplier_category(self, id, category_id, **kwargs):  # noqa: E501
        """Add a supplier category to a thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_add_supplier_category(id, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of thirdparty (required)
        :param int category_id: Id of category (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_add_supplier_category_with_http_info(id, category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_add_supplier_category_with_http_info(id, category_id, **kwargs)  # noqa: E501
            return data

    def thirdparties_add_supplier_category_with_http_info(self, id, category_id, **kwargs):  # noqa: E501
        """Add a supplier category to a thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_add_supplier_category_with_http_info(id, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of thirdparty (required)
        :param int category_id: Id of category (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'category_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_add_supplier_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_add_supplier_category`")  # noqa: E501
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params or
                params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `thirdparties_add_supplier_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'category_id' in params:
            path_params['category_id'] = params['category_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/supplier_categories/{category_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_create_company_bank_account(self, id, **kwargs):  # noqa: E501
        """Create CompanyBankAccount object for thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_create_company_bank_account(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param ThirdpartiesCreateCompanyBankAccountModel body: request_data  

        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_create_company_bank_account_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_create_company_bank_account_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def thirdparties_create_company_bank_account_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create CompanyBankAccount object for thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_create_company_bank_account_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param ThirdpartiesCreateCompanyBankAccountModel body: request_data  

        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_create_company_bank_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_create_company_bank_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/bankaccounts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_create_company_bank_account(self, id, **kwargs):  # noqa: E501
        """Create CompanyBankAccount object for thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_create_company_bank_account(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param list[str] request_data:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_create_company_bank_account_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_create_company_bank_account_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def thirdparties_create_company_bank_account_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create CompanyBankAccount object for thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_create_company_bank_account_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param list[str] request_data:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_create_company_bank_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_create_company_bank_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/bankaccounts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_create_societe_account(self, id, **kwargs):  # noqa: E501
        """Create and attach a new gateway to an existing thirdparty 🔐  # noqa: E501

        Possible fields for request_data (request body) are specified in <code>llx_societe_account</code> table.<br> See <a href=\"https://wiki.dolibarr.org/index.php/Table_llx_societe_account\">Table llx_societe_account</a> wiki page for more information<br><br> <u>Example body payload :</u> <pre>{\"key_account\": \"cus_DAVkLSs1LYyYI\", \"site\": \"stripe\"}</pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_create_societe_account(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param ThirdpartiesCreateSocieteAccountModel body: request_data  

        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_create_societe_account_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_create_societe_account_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def thirdparties_create_societe_account_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create and attach a new gateway to an existing thirdparty 🔐  # noqa: E501

        Possible fields for request_data (request body) are specified in <code>llx_societe_account</code> table.<br> See <a href=\"https://wiki.dolibarr.org/index.php/Table_llx_societe_account\">Table llx_societe_account</a> wiki page for more information<br><br> <u>Example body payload :</u> <pre>{\"key_account\": \"cus_DAVkLSs1LYyYI\", \"site\": \"stripe\"}</pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_create_societe_account_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param ThirdpartiesCreateSocieteAccountModel body: request_data  

        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_create_societe_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_create_societe_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/gateways', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_create_societe_account(self, id, **kwargs):  # noqa: E501
        """Create and attach a new gateway to an existing thirdparty 🔐  # noqa: E501

        Possible fields for request_data (request body) are specified in <code>llx_societe_account</code> table.<br> See <a href=\"https://wiki.dolibarr.org/index.php/Table_llx_societe_account\">Table llx_societe_account</a> wiki page for more information<br><br> <u>Example body payload :</u> <pre>{\"key_account\": \"cus_DAVkLSs1LYyYI\", \"site\": \"stripe\"}</pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_create_societe_account(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param list[str] request_data:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_create_societe_account_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_create_societe_account_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def thirdparties_create_societe_account_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create and attach a new gateway to an existing thirdparty 🔐  # noqa: E501

        Possible fields for request_data (request body) are specified in <code>llx_societe_account</code> table.<br> See <a href=\"https://wiki.dolibarr.org/index.php/Table_llx_societe_account\">Table llx_societe_account</a> wiki page for more information<br><br> <u>Example body payload :</u> <pre>{\"key_account\": \"cus_DAVkLSs1LYyYI\", \"site\": \"stripe\"}</pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_create_societe_account_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param list[str] request_data:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_create_societe_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_create_societe_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/gateways', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_generate_bank_account_document(self, id, companybankid, model, **kwargs):  # noqa: E501
        """Generate a Document from a bank account record (like SEPA mandate) 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_generate_bank_account_document(id, companybankid, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Thirdparty id (required)
        :param int companybankid: Companybank id (required)
        :param str model: Model of document to generate (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_generate_bank_account_document_with_http_info(id, companybankid, model, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_generate_bank_account_document_with_http_info(id, companybankid, model, **kwargs)  # noqa: E501
            return data

    def thirdparties_generate_bank_account_document_with_http_info(self, id, companybankid, model, **kwargs):  # noqa: E501
        """Generate a Document from a bank account record (like SEPA mandate) 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_generate_bank_account_document_with_http_info(id, companybankid, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Thirdparty id (required)
        :param int companybankid: Companybank id (required)
        :param str model: Model of document to generate (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'companybankid', 'model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_generate_bank_account_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_generate_bank_account_document`")  # noqa: E501
        # verify the required parameter 'companybankid' is set
        if ('companybankid' not in params or
                params['companybankid'] is None):
            raise ValueError("Missing the required parameter `companybankid` when calling `thirdparties_generate_bank_account_document`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `thirdparties_generate_bank_account_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'companybankid' in params:
            path_params['companybankid'] = params['companybankid']  # noqa: E501
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/generateBankAccountDocument/{companybankid}/{model}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_merge(self, id, idtodelete, **kwargs):  # noqa: E501
        """Merge a thirdparty into another one. 🔐  # noqa: E501

         Merge content (properties, notes) and objects (like invoices, events, orders, proposals, ...) of a thirdparty into a target thirdparty, then delete the merged thirdparty. If a property has a defined value both in thirdparty to delete and thirdparty to keep, the value into the thirdparty to delete will be ignored, the value of target thirdparty will remain, except for notes (content is concatenated).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_merge(id, idtodelete, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty to keep (the target thirdparty) (required)
        :param int idtodelete: ID of thirdparty to remove (the thirdparty to delete), once data has been merged into the target thirdparty. (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_merge_with_http_info(id, idtodelete, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_merge_with_http_info(id, idtodelete, **kwargs)  # noqa: E501
            return data

    def thirdparties_merge_with_http_info(self, id, idtodelete, **kwargs):  # noqa: E501
        """Merge a thirdparty into another one. 🔐  # noqa: E501

         Merge content (properties, notes) and objects (like invoices, events, orders, proposals, ...) of a thirdparty into a target thirdparty, then delete the merged thirdparty. If a property has a defined value both in thirdparty to delete and thirdparty to keep, the value into the thirdparty to delete will be ignored, the value of target thirdparty will remain, except for notes (content is concatenated).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_merge_with_http_info(id, idtodelete, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty to keep (the target thirdparty) (required)
        :param int idtodelete: ID of thirdparty to remove (the thirdparty to delete), once data has been merged into the target thirdparty. (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'idtodelete']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_merge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_merge`")  # noqa: E501
        # verify the required parameter 'idtodelete' is set
        if ('idtodelete' not in params or
                params['idtodelete'] is None):
            raise ValueError("Missing the required parameter `idtodelete` when calling `thirdparties_merge`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'idtodelete' in params:
            path_params['idtodelete'] = params['idtodelete']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/merge/{idtodelete}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_modify_societe_account(self, id, site, **kwargs):  # noqa: E501
        """Update specified values of a specific gateway attached to a thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_modify_societe_account(id, site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of thirdparty (required)
        :param str site: Site key (required)
        :param ThirdpartiesModifySocieteAccountModel body: request_data  

        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_modify_societe_account_with_http_info(id, site, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_modify_societe_account_with_http_info(id, site, **kwargs)  # noqa: E501
            return data

    def thirdparties_modify_societe_account_with_http_info(self, id, site, **kwargs):  # noqa: E501
        """Update specified values of a specific gateway attached to a thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_modify_societe_account_with_http_info(id, site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of thirdparty (required)
        :param str site: Site key (required)
        :param ThirdpartiesModifySocieteAccountModel body: request_data  

        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'site', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_modify_societe_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_modify_societe_account`")  # noqa: E501
        # verify the required parameter 'site' is set
        if ('site' not in params or
                params['site'] is None):
            raise ValueError("Missing the required parameter `site` when calling `thirdparties_modify_societe_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'site' in params:
            path_params['site'] = params['site']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/gateways/{site}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_modify_societe_account(self, id, site, **kwargs):  # noqa: E501
        """Update specified values of a specific gateway attached to a thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_modify_societe_account(id, site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of thirdparty (required)
        :param str site: Site key (required)
        :param list[str] request_data:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_modify_societe_account_with_http_info(id, site, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_modify_societe_account_with_http_info(id, site, **kwargs)  # noqa: E501
            return data

    def thirdparties_modify_societe_account_with_http_info(self, id, site, **kwargs):  # noqa: E501
        """Update specified values of a specific gateway attached to a thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_modify_societe_account_with_http_info(id, site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of thirdparty (required)
        :param str site: Site key (required)
        :param list[str] request_data:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'site', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_modify_societe_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_modify_societe_account`")  # noqa: E501
        # verify the required parameter 'site' is set
        if ('site' not in params or
                params['site'] is None):
            raise ValueError("Missing the required parameter `site` when calling `thirdparties_modify_societe_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'site' in params:
            path_params['site'] = params['site']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/gateways/{site}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_remove_category(self, id, category_id, **kwargs):  # noqa: E501
        """Remove the link between a customer category and the thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_remove_category(id, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of thirdparty (required)
        :param int category_id: Id of category (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_remove_category_with_http_info(id, category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_remove_category_with_http_info(id, category_id, **kwargs)  # noqa: E501
            return data

    def thirdparties_remove_category_with_http_info(self, id, category_id, **kwargs):  # noqa: E501
        """Remove the link between a customer category and the thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_remove_category_with_http_info(id, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of thirdparty (required)
        :param int category_id: Id of category (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'category_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_remove_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_remove_category`")  # noqa: E501
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params or
                params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `thirdparties_remove_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'category_id' in params:
            path_params['category_id'] = params['category_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/categories/{category_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_remove_company_bank_account(self, id, bankaccount_id, **kwargs):  # noqa: E501
        """Delete a bank account attached to a thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_remove_company_bank_account(id, bankaccount_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param int bankaccount_id: ID of CompanyBankAccount (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_remove_company_bank_account_with_http_info(id, bankaccount_id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_remove_company_bank_account_with_http_info(id, bankaccount_id, **kwargs)  # noqa: E501
            return data

    def thirdparties_remove_company_bank_account_with_http_info(self, id, bankaccount_id, **kwargs):  # noqa: E501
        """Delete a bank account attached to a thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_remove_company_bank_account_with_http_info(id, bankaccount_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param int bankaccount_id: ID of CompanyBankAccount (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'bankaccount_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_remove_company_bank_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_remove_company_bank_account`")  # noqa: E501
        # verify the required parameter 'bankaccount_id' is set
        if ('bankaccount_id' not in params or
                params['bankaccount_id'] is None):
            raise ValueError("Missing the required parameter `bankaccount_id` when calling `thirdparties_remove_company_bank_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'bankaccount_id' in params:
            path_params['bankaccount_id'] = params['bankaccount_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/bankaccounts/{bankaccount_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_remove_societe_account(self, id, site, **kwargs):  # noqa: E501
        """Delete a specific site gateway attached to a thirdparty (by gateway id) 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_remove_societe_account(id, site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param int site: Site key (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_remove_societe_account_with_http_info(id, site, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_remove_societe_account_with_http_info(id, site, **kwargs)  # noqa: E501
            return data

    def thirdparties_remove_societe_account_with_http_info(self, id, site, **kwargs):  # noqa: E501
        """Delete a specific site gateway attached to a thirdparty (by gateway id) 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_remove_societe_account_with_http_info(id, site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param int site: Site key (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'site']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_remove_societe_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_remove_societe_account`")  # noqa: E501
        # verify the required parameter 'site' is set
        if ('site' not in params or
                params['site'] is None):
            raise ValueError("Missing the required parameter `site` when calling `thirdparties_remove_societe_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'site' in params:
            path_params['site'] = params['site']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/gateways/{site}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_remove_societe_accounts(self, id, **kwargs):  # noqa: E501
        """Delete all gateways attached to a thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_remove_societe_accounts(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_remove_societe_accounts_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_remove_societe_accounts_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def thirdparties_remove_societe_accounts_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete all gateways attached to a thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_remove_societe_accounts_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_remove_societe_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_remove_societe_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/gateways', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_remove_supplier_category(self, id, category_id, **kwargs):  # noqa: E501
        """Remove the link between a category and the thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_remove_supplier_category(id, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of thirdparty (required)
        :param int category_id: Id of category (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_remove_supplier_category_with_http_info(id, category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_remove_supplier_category_with_http_info(id, category_id, **kwargs)  # noqa: E501
            return data

    def thirdparties_remove_supplier_category_with_http_info(self, id, category_id, **kwargs):  # noqa: E501
        """Remove the link between a category and the thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_remove_supplier_category_with_http_info(id, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of thirdparty (required)
        :param int category_id: Id of category (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'category_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_remove_supplier_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_remove_supplier_category`")  # noqa: E501
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params or
                params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `thirdparties_remove_supplier_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'category_id' in params:
            path_params['category_id'] = params['category_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/supplier_categories/{category_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_retrieve_by_barcode(self, barcode, **kwargs):  # noqa: E501
        """Get properties of a thirdparty object by barcode. 🔐  # noqa: E501

         Return an array with thirdparty informations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_by_barcode(barcode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str barcode: Barcode of third party to load (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_retrieve_by_barcode_with_http_info(barcode, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_retrieve_by_barcode_with_http_info(barcode, **kwargs)  # noqa: E501
            return data

    def thirdparties_retrieve_by_barcode_with_http_info(self, barcode, **kwargs):  # noqa: E501
        """Get properties of a thirdparty object by barcode. 🔐  # noqa: E501

         Return an array with thirdparty informations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_by_barcode_with_http_info(barcode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str barcode: Barcode of third party to load (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['barcode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_retrieve_by_barcode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'barcode' is set
        if ('barcode' not in params or
                params['barcode'] is None):
            raise ValueError("Missing the required parameter `barcode` when calling `thirdparties_retrieve_by_barcode`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'barcode' in params:
            path_params['barcode'] = params['barcode']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/barcode/{barcode}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_retrieve_by_email(self, email, **kwargs):  # noqa: E501
        """Get properties of a thirdparty object by email. 🔐  # noqa: E501

         Return an array with thirdparty informations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_by_email(email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Email of third party to load (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_retrieve_by_email_with_http_info(email, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_retrieve_by_email_with_http_info(email, **kwargs)  # noqa: E501
            return data

    def thirdparties_retrieve_by_email_with_http_info(self, email, **kwargs):  # noqa: E501
        """Get properties of a thirdparty object by email. 🔐  # noqa: E501

         Return an array with thirdparty informations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_by_email_with_http_info(email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str email: Email of third party to load (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_retrieve_by_email" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `thirdparties_retrieve_by_email`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'email' in params:
            path_params['email'] = params['email']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/email/{email}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_retrieve_categories(self, id, **kwargs):  # noqa: E501
        """Get customer categories for a thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_categories(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :param int limit: Limit for list
        :param int page: Page number
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_retrieve_categories_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_retrieve_categories_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def thirdparties_retrieve_categories_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get customer categories for a thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_categories_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :param int limit: Limit for list
        :param int page: Page number
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sortfield', 'sortorder', 'limit', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_retrieve_categories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_retrieve_categories`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'sortfield' in params:
            query_params.append(('sortfield', params['sortfield']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_retrieve_company_bank_account(self, id, **kwargs):  # noqa: E501
        """Get CompanyBankAccount objects for thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_company_bank_account(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_retrieve_company_bank_account_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_retrieve_company_bank_account_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def thirdparties_retrieve_company_bank_account_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get CompanyBankAccount objects for thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_company_bank_account_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_retrieve_company_bank_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_retrieve_company_bank_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/bankaccounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_retrieve_fixed_amount_discounts(self, id, **kwargs):  # noqa: E501
        """Get fixed amount discount of a thirdparty (all sources: deposit, credit note, commercial offers...) 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_fixed_amount_discounts(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of the thirdparty (required)
        :param str filter: Filter exceptional discount. \"none\" will return every discount, \"available\" returns unapplied discounts, \"used\" returns applied discounts
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_retrieve_fixed_amount_discounts_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_retrieve_fixed_amount_discounts_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def thirdparties_retrieve_fixed_amount_discounts_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get fixed amount discount of a thirdparty (all sources: deposit, credit note, commercial offers...) 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_fixed_amount_discounts_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of the thirdparty (required)
        :param str filter: Filter exceptional discount. \"none\" will return every discount, \"available\" returns unapplied discounts, \"used\" returns applied discounts
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'filter', 'sortfield', 'sortorder']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_retrieve_fixed_amount_discounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_retrieve_fixed_amount_discounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'sortfield' in params:
            query_params.append(('sortfield', params['sortfield']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/fixedamountdiscounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_retrieve_invoices_qualified_for_credit_note(self, id, **kwargs):  # noqa: E501
        """Return list of invoices qualified to be corrected by a credit note. 🔐  # noqa: E501

        Invoices matching the following rules are returned (validated + payment on process) or classified (paid completely or paid partialy) + not already replaced + not already a credit note  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_invoices_qualified_for_credit_note(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of thirdparty (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_retrieve_invoices_qualified_for_credit_note_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_retrieve_invoices_qualified_for_credit_note_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def thirdparties_retrieve_invoices_qualified_for_credit_note_with_http_info(self, id, **kwargs):  # noqa: E501
        """Return list of invoices qualified to be corrected by a credit note. 🔐  # noqa: E501

        Invoices matching the following rules are returned (validated + payment on process) or classified (paid completely or paid partialy) + not already replaced + not already a credit note  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_invoices_qualified_for_credit_note_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of thirdparty (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_retrieve_invoices_qualified_for_credit_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_retrieve_invoices_qualified_for_credit_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/getinvoicesqualifiedforcreditnote', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_retrieve_invoices_qualified_for_replacement(self, id, **kwargs):  # noqa: E501
        """Return list of invoices qualified to be replaced by another invoice. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_invoices_qualified_for_replacement(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of thirdparty (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_retrieve_invoices_qualified_for_replacement_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_retrieve_invoices_qualified_for_replacement_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def thirdparties_retrieve_invoices_qualified_for_replacement_with_http_info(self, id, **kwargs):  # noqa: E501
        """Return list of invoices qualified to be replaced by another invoice. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_invoices_qualified_for_replacement_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of thirdparty (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_retrieve_invoices_qualified_for_replacement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_retrieve_invoices_qualified_for_replacement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/getinvoicesqualifiedforreplacement', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_retrieve_out_standing_invoices(self, id, **kwargs):  # noqa: E501
        """Get outstanding invoices of thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_out_standing_invoices(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of the thirdparty (required)
        :param str mode: 'customer' or 'supplier'
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_retrieve_out_standing_invoices_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_retrieve_out_standing_invoices_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def thirdparties_retrieve_out_standing_invoices_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get outstanding invoices of thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_out_standing_invoices_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of the thirdparty (required)
        :param str mode: 'customer' or 'supplier'
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'mode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_retrieve_out_standing_invoices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_retrieve_out_standing_invoices`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'mode' in params:
            query_params.append(('mode', params['mode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/outstandinginvoices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_retrieve_out_standing_order(self, id, **kwargs):  # noqa: E501
        """Get outstanding orders of thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_out_standing_order(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of the thirdparty (required)
        :param str mode: 'customer' or 'supplier'
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_retrieve_out_standing_order_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_retrieve_out_standing_order_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def thirdparties_retrieve_out_standing_order_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get outstanding orders of thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_out_standing_order_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of the thirdparty (required)
        :param str mode: 'customer' or 'supplier'
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'mode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_retrieve_out_standing_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_retrieve_out_standing_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'mode' in params:
            query_params.append(('mode', params['mode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/outstandingorders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_retrieve_out_standing_proposals(self, id, **kwargs):  # noqa: E501
        """Get outstanding proposals of thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_out_standing_proposals(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of the thirdparty (required)
        :param str mode: 'customer' or 'supplier'
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_retrieve_out_standing_proposals_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_retrieve_out_standing_proposals_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def thirdparties_retrieve_out_standing_proposals_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get outstanding proposals of thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_out_standing_proposals_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of the thirdparty (required)
        :param str mode: 'customer' or 'supplier'
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'mode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_retrieve_out_standing_proposals" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_retrieve_out_standing_proposals`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'mode' in params:
            query_params.append(('mode', params['mode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/outstandingproposals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_retrieve_sales_representatives(self, id, **kwargs):  # noqa: E501
        """Get representatives of thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_sales_representatives(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of the thirdparty (required)
        :param str mode: 0=Array with properties, 1=Array of id.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_retrieve_sales_representatives_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_retrieve_sales_representatives_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def thirdparties_retrieve_sales_representatives_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get representatives of thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_sales_representatives_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of the thirdparty (required)
        :param str mode: 0=Array with properties, 1=Array of id.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'mode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_retrieve_sales_representatives" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_retrieve_sales_representatives`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'mode' in params:
            query_params.append(('mode', params['mode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/representatives', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_retrieve_societe_accounts(self, id, **kwargs):  # noqa: E501
        """Get a specific gateway attached to a thirdparty (by specifying the site key) 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_societe_accounts(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param str site: Site key
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_retrieve_societe_accounts_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_retrieve_societe_accounts_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def thirdparties_retrieve_societe_accounts_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a specific gateway attached to a thirdparty (by specifying the site key) 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_societe_accounts_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param str site: Site key
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'site']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_retrieve_societe_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_retrieve_societe_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'site' in params:
            query_params.append(('site', params['site']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/gateways', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_retrieve_supplier_categories(self, id, **kwargs):  # noqa: E501
        """Get supplier categories for a thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_supplier_categories(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :param int limit: Limit for list
        :param int page: Page number
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_retrieve_supplier_categories_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_retrieve_supplier_categories_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def thirdparties_retrieve_supplier_categories_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get supplier categories for a thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_retrieve_supplier_categories_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :param int limit: Limit for list
        :param int page: Page number
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sortfield', 'sortorder', 'limit', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_retrieve_supplier_categories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_retrieve_supplier_categories`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'sortfield' in params:
            query_params.append(('sortfield', params['sortfield']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/supplier_categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_set_thirdparty_price_level(self, body, id, **kwargs):  # noqa: E501
        """Set new price level for the given thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_set_thirdparty_price_level(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ThirdpartiesSetThirdpartyPriceLevelModel body: **priceLevel** (required)  
 (required)
        :param int id: ID of thirdparty (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_set_thirdparty_price_level_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_set_thirdparty_price_level_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def thirdparties_set_thirdparty_price_level_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Set new price level for the given thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_set_thirdparty_price_level_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ThirdpartiesSetThirdpartyPriceLevelModel body: **priceLevel** (required)  
 (required)
        :param int id: ID of thirdparty (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_set_thirdparty_price_level" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `thirdparties_set_thirdparty_price_level`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_set_thirdparty_price_level`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'price_level' in params:
            form_params.append(('priceLevel', params['price_level']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/setpricelevel', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_set_thirdparty_price_level(self, price_level, id, **kwargs):  # noqa: E501
        """Set new price level for the given thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_set_thirdparty_price_level(price_level, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int price_level: (required)
        :param int id: ID of thirdparty (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_set_thirdparty_price_level_with_http_info(price_level, id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_set_thirdparty_price_level_with_http_info(price_level, id, **kwargs)  # noqa: E501
            return data

    def thirdparties_set_thirdparty_price_level_with_http_info(self, price_level, id, **kwargs):  # noqa: E501
        """Set new price level for the given thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_set_thirdparty_price_level_with_http_info(price_level, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int price_level: (required)
        :param int id: ID of thirdparty (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['price_level', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_set_thirdparty_price_level" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'price_level' is set
        if ('price_level' not in params or
                params['price_level'] is None):
            raise ValueError("Missing the required parameter `price_level` when calling `thirdparties_set_thirdparty_price_level`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_set_thirdparty_price_level`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'price_level' in params:
            form_params.append(('priceLevel', params['price_level']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/setpricelevel', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_update_company_bank_account(self, id, bankaccount_id, **kwargs):  # noqa: E501
        """Update CompanyBankAccount object for thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_update_company_bank_account(id, bankaccount_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param int bankaccount_id: ID of CompanyBankAccount (required)
        :param ThirdpartiesUpdateCompanyBankAccountModel body: request_data  

        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_update_company_bank_account_with_http_info(id, bankaccount_id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_update_company_bank_account_with_http_info(id, bankaccount_id, **kwargs)  # noqa: E501
            return data

    def thirdparties_update_company_bank_account_with_http_info(self, id, bankaccount_id, **kwargs):  # noqa: E501
        """Update CompanyBankAccount object for thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_update_company_bank_account_with_http_info(id, bankaccount_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param int bankaccount_id: ID of CompanyBankAccount (required)
        :param ThirdpartiesUpdateCompanyBankAccountModel body: request_data  

        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'bankaccount_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_update_company_bank_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_update_company_bank_account`")  # noqa: E501
        # verify the required parameter 'bankaccount_id' is set
        if ('bankaccount_id' not in params or
                params['bankaccount_id'] is None):
            raise ValueError("Missing the required parameter `bankaccount_id` when calling `thirdparties_update_company_bank_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'bankaccount_id' in params:
            path_params['bankaccount_id'] = params['bankaccount_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/bankaccounts/{bankaccount_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_update_company_bank_account(self, id, bankaccount_id, **kwargs):  # noqa: E501
        """Update CompanyBankAccount object for thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_update_company_bank_account(id, bankaccount_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param int bankaccount_id: ID of CompanyBankAccount (required)
        :param list[str] request_data:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_update_company_bank_account_with_http_info(id, bankaccount_id, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_update_company_bank_account_with_http_info(id, bankaccount_id, **kwargs)  # noqa: E501
            return data

    def thirdparties_update_company_bank_account_with_http_info(self, id, bankaccount_id, **kwargs):  # noqa: E501
        """Update CompanyBankAccount object for thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_update_company_bank_account_with_http_info(id, bankaccount_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param int bankaccount_id: ID of CompanyBankAccount (required)
        :param list[str] request_data:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'bankaccount_id', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_update_company_bank_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_update_company_bank_account`")  # noqa: E501
        # verify the required parameter 'bankaccount_id' is set
        if ('bankaccount_id' not in params or
                params['bankaccount_id'] is None):
            raise ValueError("Missing the required parameter `bankaccount_id` when calling `thirdparties_update_company_bank_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'bankaccount_id' in params:
            path_params['bankaccount_id'] = params['bankaccount_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/bankaccounts/{bankaccount_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_update_societe_account(self, id, site, **kwargs):  # noqa: E501
        """Create and attach a new (or replace an existing) specific site gateway to a thirdparty 🔐  # noqa: E501

        You <strong>MUST</strong> pass all values to keep (otherwise, they will be deleted) !<br> If you just need to update specific fields prefer <code>PATCH /thirdparties/{id}/gateways/{site}</code> endpoint.<br><br> When a <strong>SocieteAccount</strong> entity does not exist for the <code>id</code> and <code>site</code> supplied, a new one will be created. In that case <code>fk_soc</code> and <code>site</code> members form request body payload will be ignored and <code>id</code> and <code>site</code> query strings parameters will be used instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_update_societe_account(id, site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param str site: Site key (required)
        :param ThirdpartiesUpdateSocieteAccountModel body: request_data  

        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_update_societe_account_with_http_info(id, site, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_update_societe_account_with_http_info(id, site, **kwargs)  # noqa: E501
            return data

    def thirdparties_update_societe_account_with_http_info(self, id, site, **kwargs):  # noqa: E501
        """Create and attach a new (or replace an existing) specific site gateway to a thirdparty 🔐  # noqa: E501

        You <strong>MUST</strong> pass all values to keep (otherwise, they will be deleted) !<br> If you just need to update specific fields prefer <code>PATCH /thirdparties/{id}/gateways/{site}</code> endpoint.<br><br> When a <strong>SocieteAccount</strong> entity does not exist for the <code>id</code> and <code>site</code> supplied, a new one will be created. In that case <code>fk_soc</code> and <code>site</code> members form request body payload will be ignored and <code>id</code> and <code>site</code> query strings parameters will be used instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_update_societe_account_with_http_info(id, site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param str site: Site key (required)
        :param ThirdpartiesUpdateSocieteAccountModel body: request_data  

        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'site', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_update_societe_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_update_societe_account`")  # noqa: E501
        # verify the required parameter 'site' is set
        if ('site' not in params or
                params['site'] is None):
            raise ValueError("Missing the required parameter `site` when calling `thirdparties_update_societe_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'site' in params:
            path_params['site'] = params['site']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/gateways/{site}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def thirdparties_update_societe_account(self, id, site, **kwargs):  # noqa: E501
        """Create and attach a new (or replace an existing) specific site gateway to a thirdparty 🔐  # noqa: E501

        You <strong>MUST</strong> pass all values to keep (otherwise, they will be deleted) !<br> If you just need to update specific fields prefer <code>PATCH /thirdparties/{id}/gateways/{site}</code> endpoint.<br><br> When a <strong>SocieteAccount</strong> entity does not exist for the <code>id</code> and <code>site</code> supplied, a new one will be created. In that case <code>fk_soc</code> and <code>site</code> members form request body payload will be ignored and <code>id</code> and <code>site</code> query strings parameters will be used instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_update_societe_account(id, site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param str site: Site key (required)
        :param list[str] request_data:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.thirdparties_update_societe_account_with_http_info(id, site, **kwargs)  # noqa: E501
        else:
            (data) = self.thirdparties_update_societe_account_with_http_info(id, site, **kwargs)  # noqa: E501
            return data

    def thirdparties_update_societe_account_with_http_info(self, id, site, **kwargs):  # noqa: E501
        """Create and attach a new (or replace an existing) specific site gateway to a thirdparty 🔐  # noqa: E501

        You <strong>MUST</strong> pass all values to keep (otherwise, they will be deleted) !<br> If you just need to update specific fields prefer <code>PATCH /thirdparties/{id}/gateways/{site}</code> endpoint.<br><br> When a <strong>SocieteAccount</strong> entity does not exist for the <code>id</code> and <code>site</code> supplied, a new one will be created. In that case <code>fk_soc</code> and <code>site</code> members form request body payload will be ignored and <code>id</code> and <code>site</code> query strings parameters will be used instead.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.thirdparties_update_societe_account_with_http_info(id, site, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of thirdparty (required)
        :param str site: Site key (required)
        :param list[str] request_data:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'site', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method thirdparties_update_societe_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `thirdparties_update_societe_account`")  # noqa: E501
        # verify the required parameter 'site' is set
        if ('site' not in params or
                params['site'] is None):
            raise ValueError("Missing the required parameter `site` when calling `thirdparties_update_societe_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'site' in params:
            path_params['site'] = params['site']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}/gateways/{site}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_thirdparties(self, id, **kwargs):  # noqa: E501
        """Update thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_thirdparties(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of thirdparty to update (required)
        :param UpdateThirdpartiesModel body: request_data  

        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_thirdparties_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_thirdparties_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_thirdparties_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_thirdparties_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of thirdparty to update (required)
        :param UpdateThirdpartiesModel body: request_data  

        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_thirdparties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_thirdparties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_thirdparties(self, id, **kwargs):  # noqa: E501
        """Update thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_thirdparties(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of thirdparty to update (required)
        :param list[str] request_data:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_thirdparties_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_thirdparties_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_thirdparties_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update thirdparty 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_thirdparties_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of thirdparty to update (required)
        :param list[str] request_data:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_thirdparties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_thirdparties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/thirdparties/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
