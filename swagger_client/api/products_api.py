# coding: utf-8

"""
    Restler API Explorer

    Live API Documentation  # noqa: E501

    OpenAPI spec version: 1
    Contact: arul@luracast.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ProductsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_products(self, **kwargs):  # noqa: E501
        """Create product object 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_products(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateProductsModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_products_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_products_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_products_with_http_info(self, **kwargs):  # noqa: E501
        """Create product object 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_products_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateProductsModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_products" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_products(self, **kwargs):  # noqa: E501
        """Create product object 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_products(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_products_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_products_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_products_with_http_info(self, **kwargs):  # noqa: E501
        """Create product object 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_products_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_products" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_products(self, **kwargs):  # noqa: E501
        """List products 🔐  # noqa: E501

        Get a list of products  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_products(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :param int limit: Limit for list
        :param int page: Page number
        :param int mode: Use this param to filter list (0 for all, 1 for only product, 2 for only service)
        :param int category: Use this param to filter list by category
        :param str sqlfilters: Other criteria to filter answers separated by a comma. Syntax example \"(t.tobuy:=:0) and (t.tosell:=:1)\"
        :param bool ids_only: Return only IDs of product instead of all properties (faster, above all if list is long)
        :param int variant_filter: Use this param to filter list (0 = all, 1=products without variants, 2=parent of variants, 3=variants only)
        :param bool pagination_data: If this parameter is set to true the response will include pagination data. Default value is false. Page starts from 0
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_products_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_products_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_products_with_http_info(self, **kwargs):  # noqa: E501
        """List products 🔐  # noqa: E501

        Get a list of products  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_products_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :param int limit: Limit for list
        :param int page: Page number
        :param int mode: Use this param to filter list (0 for all, 1 for only product, 2 for only service)
        :param int category: Use this param to filter list by category
        :param str sqlfilters: Other criteria to filter answers separated by a comma. Syntax example \"(t.tobuy:=:0) and (t.tosell:=:1)\"
        :param bool ids_only: Return only IDs of product instead of all properties (faster, above all if list is long)
        :param int variant_filter: Use this param to filter list (0 = all, 1=products without variants, 2=parent of variants, 3=variants only)
        :param bool pagination_data: If this parameter is set to true the response will include pagination data. Default value is false. Page starts from 0
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sortfield', 'sortorder', 'limit', 'page', 'mode', 'category', 'sqlfilters', 'ids_only', 'variant_filter', 'pagination_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_products" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sortfield' in params:
            query_params.append(('sortfield', params['sortfield']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'mode' in params:
            query_params.append(('mode', params['mode']))  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501
        if 'sqlfilters' in params:
            query_params.append(('sqlfilters', params['sqlfilters']))  # noqa: E501
        if 'ids_only' in params:
            query_params.append(('ids_only', params['ids_only']))  # noqa: E501
        if 'variant_filter' in params:
            query_params.append(('variant_filter', params['variant_filter']))  # noqa: E501
        if 'pagination_data' in params:
            query_params.append(('pagination_data', params['pagination_data']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_add_attribute_value(self, body, id, **kwargs):  # noqa: E501
        """Add attribute value. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_add_attribute_value(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductsAddAttributeValueModel body: **ref** (required)  
**value** (required)  
 (required)
        :param int id: ID of Attribute (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_add_attribute_value_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_add_attribute_value_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def products_add_attribute_value_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Add attribute value. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_add_attribute_value_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductsAddAttributeValueModel body: **ref** (required)  
**value** (required)  
 (required)
        :param int id: ID of Attribute (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_add_attribute_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `products_add_attribute_value`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_add_attribute_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'ref' in params:
            form_params.append(('ref', params['ref']))  # noqa: E501
        if 'value' in params:
            form_params.append(('value', params['value']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/attributes/{id}/values', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_add_attribute_value(self, ref, value, id, **kwargs):  # noqa: E501
        """Add attribute value. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_add_attribute_value(ref, value, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ref: (required)
        :param str value: (required)
        :param int id: ID of Attribute (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_add_attribute_value_with_http_info(ref, value, id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_add_attribute_value_with_http_info(ref, value, id, **kwargs)  # noqa: E501
            return data

    def products_add_attribute_value_with_http_info(self, ref, value, id, **kwargs):  # noqa: E501
        """Add attribute value. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_add_attribute_value_with_http_info(ref, value, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ref: (required)
        :param str value: (required)
        :param int id: ID of Attribute (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ref', 'value', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_add_attribute_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ref' is set
        if ('ref' not in params or
                params['ref'] is None):
            raise ValueError("Missing the required parameter `ref` when calling `products_add_attribute_value`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `products_add_attribute_value`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_add_attribute_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'ref' in params:
            form_params.append(('ref', params['ref']))  # noqa: E501
        if 'value' in params:
            form_params.append(('value', params['value']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/attributes/{id}/values', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_add_attributes(self, body, **kwargs):  # noqa: E501
        """Add attributes. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_add_attributes(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductsAddAttributesModel body: **ref** (required)  
**label** (required)  
ref_ext  
 (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_add_attributes_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.products_add_attributes_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def products_add_attributes_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add attributes. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_add_attributes_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductsAddAttributesModel body: **ref** (required)  
**label** (required)  
ref_ext  
 (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_add_attributes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `products_add_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'ref' in params:
            form_params.append(('ref', params['ref']))  # noqa: E501
        if 'label' in params:
            form_params.append(('label', params['label']))  # noqa: E501
        if 'ref_ext' in params:
            form_params.append(('ref_ext', params['ref_ext']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/attributes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_add_attributes(self, ref, label, ref_ext, **kwargs):  # noqa: E501
        """Add attributes. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_add_attributes(ref, label, ref_ext, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ref: (required)
        :param str label: (required)
        :param str ref_ext: (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_add_attributes_with_http_info(ref, label, ref_ext, **kwargs)  # noqa: E501
        else:
            (data) = self.products_add_attributes_with_http_info(ref, label, ref_ext, **kwargs)  # noqa: E501
            return data

    def products_add_attributes_with_http_info(self, ref, label, ref_ext, **kwargs):  # noqa: E501
        """Add attributes. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_add_attributes_with_http_info(ref, label, ref_ext, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ref: (required)
        :param str label: (required)
        :param str ref_ext: (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ref', 'label', 'ref_ext']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_add_attributes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ref' is set
        if ('ref' not in params or
                params['ref'] is None):
            raise ValueError("Missing the required parameter `ref` when calling `products_add_attributes`")  # noqa: E501
        # verify the required parameter 'label' is set
        if ('label' not in params or
                params['label'] is None):
            raise ValueError("Missing the required parameter `label` when calling `products_add_attributes`")  # noqa: E501
        # verify the required parameter 'ref_ext' is set
        if ('ref_ext' not in params or
                params['ref_ext'] is None):
            raise ValueError("Missing the required parameter `ref_ext` when calling `products_add_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'ref' in params:
            form_params.append(('ref', params['ref']))  # noqa: E501
        if 'label' in params:
            form_params.append(('label', params['label']))  # noqa: E501
        if 'ref_ext' in params:
            form_params.append(('ref_ext', params['ref_ext']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/attributes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_add_purchase_price(self, body, id, **kwargs):  # noqa: E501
        """Add/Update purchase prices for a product. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_add_purchase_price(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductsAddPurchasePriceModel body: **qty** (required)  
**buyprice** (required)  
**price_base_type** (required)  
**fourn_id** (required)  
**availability** (required)  
**ref_fourn** (required)  
**tva_tx** (required)  
charges  
remise_percent  
remise  
newnpr  
delivery_time_days  
supplier_reputation  
localtaxes_array  
newdefaultvatcode  
multicurrency_buyprice  
multicurrency_price_base_type  
multicurrency_tx  
multicurrency_code  
desc_fourn  
barcode  
fk_barcode_type  
 (required)
        :param int id: ID of Product (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_add_purchase_price_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_add_purchase_price_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def products_add_purchase_price_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Add/Update purchase prices for a product. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_add_purchase_price_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductsAddPurchasePriceModel body: **qty** (required)  
**buyprice** (required)  
**price_base_type** (required)  
**fourn_id** (required)  
**availability** (required)  
**ref_fourn** (required)  
**tva_tx** (required)  
charges  
remise_percent  
remise  
newnpr  
delivery_time_days  
supplier_reputation  
localtaxes_array  
newdefaultvatcode  
multicurrency_buyprice  
multicurrency_price_base_type  
multicurrency_tx  
multicurrency_code  
desc_fourn  
barcode  
fk_barcode_type  
 (required)
        :param int id: ID of Product (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_add_purchase_price" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `products_add_purchase_price`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_add_purchase_price`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'qty' in params:
            form_params.append(('qty', params['qty']))  # noqa: E501
        if 'buyprice' in params:
            form_params.append(('buyprice', params['buyprice']))  # noqa: E501
        if 'price_base_type' in params:
            form_params.append(('price_base_type', params['price_base_type']))  # noqa: E501
        if 'fourn_id' in params:
            form_params.append(('fourn_id', params['fourn_id']))  # noqa: E501
        if 'availability' in params:
            form_params.append(('availability', params['availability']))  # noqa: E501
        if 'ref_fourn' in params:
            form_params.append(('ref_fourn', params['ref_fourn']))  # noqa: E501
        if 'tva_tx' in params:
            form_params.append(('tva_tx', params['tva_tx']))  # noqa: E501
        if 'charges' in params:
            form_params.append(('charges', params['charges']))  # noqa: E501
        if 'remise_percent' in params:
            form_params.append(('remise_percent', params['remise_percent']))  # noqa: E501
        if 'remise' in params:
            form_params.append(('remise', params['remise']))  # noqa: E501
        if 'newnpr' in params:
            form_params.append(('newnpr', params['newnpr']))  # noqa: E501
        if 'delivery_time_days' in params:
            form_params.append(('delivery_time_days', params['delivery_time_days']))  # noqa: E501
        if 'supplier_reputation' in params:
            form_params.append(('supplier_reputation', params['supplier_reputation']))  # noqa: E501
        if 'localtaxes_array' in params:
            form_params.append(('localtaxes_array', params['localtaxes_array']))  # noqa: E501
            collection_formats['localtaxes_array'] = 'multi'  # noqa: E501
        if 'newdefaultvatcode' in params:
            form_params.append(('newdefaultvatcode', params['newdefaultvatcode']))  # noqa: E501
        if 'multicurrency_buyprice' in params:
            form_params.append(('multicurrency_buyprice', params['multicurrency_buyprice']))  # noqa: E501
        if 'multicurrency_price_base_type' in params:
            form_params.append(('multicurrency_price_base_type', params['multicurrency_price_base_type']))  # noqa: E501
        if 'multicurrency_tx' in params:
            form_params.append(('multicurrency_tx', params['multicurrency_tx']))  # noqa: E501
        if 'multicurrency_code' in params:
            form_params.append(('multicurrency_code', params['multicurrency_code']))  # noqa: E501
        if 'desc_fourn' in params:
            form_params.append(('desc_fourn', params['desc_fourn']))  # noqa: E501
        if 'barcode' in params:
            form_params.append(('barcode', params['barcode']))  # noqa: E501
        if 'fk_barcode_type' in params:
            form_params.append(('fk_barcode_type', params['fk_barcode_type']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/purchase_prices', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_add_purchase_price(self, qty, buyprice, price_base_type, fourn_id, availability, ref_fourn, tva_tx, charges, remise_percent, remise, newnpr, delivery_time_days, supplier_reputation, localtaxes_array, newdefaultvatcode, multicurrency_buyprice, multicurrency_price_base_type, multicurrency_tx, multicurrency_code, desc_fourn, barcode, fk_barcode_type, id, **kwargs):  # noqa: E501
        """Add/Update purchase prices for a product. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_add_purchase_price(qty, buyprice, price_base_type, fourn_id, availability, ref_fourn, tva_tx, charges, remise_percent, remise, newnpr, delivery_time_days, supplier_reputation, localtaxes_array, newdefaultvatcode, multicurrency_buyprice, multicurrency_price_base_type, multicurrency_tx, multicurrency_code, desc_fourn, barcode, fk_barcode_type, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float qty: (required)
        :param float buyprice: (required)
        :param str price_base_type: (required)
        :param int fourn_id: (required)
        :param int availability: (required)
        :param str ref_fourn: (required)
        :param float tva_tx: (required)
        :param str charges: (required)
        :param float remise_percent: (required)
        :param float remise: (required)
        :param int newnpr: (required)
        :param int delivery_time_days: (required)
        :param str supplier_reputation: (required)
        :param list[str] localtaxes_array: (required)
        :param str newdefaultvatcode: (required)
        :param float multicurrency_buyprice: (required)
        :param str multicurrency_price_base_type: (required)
        :param float multicurrency_tx: (required)
        :param str multicurrency_code: (required)
        :param str desc_fourn: (required)
        :param str barcode: (required)
        :param int fk_barcode_type: (required)
        :param int id: ID of Product (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_add_purchase_price_with_http_info(qty, buyprice, price_base_type, fourn_id, availability, ref_fourn, tva_tx, charges, remise_percent, remise, newnpr, delivery_time_days, supplier_reputation, localtaxes_array, newdefaultvatcode, multicurrency_buyprice, multicurrency_price_base_type, multicurrency_tx, multicurrency_code, desc_fourn, barcode, fk_barcode_type, id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_add_purchase_price_with_http_info(qty, buyprice, price_base_type, fourn_id, availability, ref_fourn, tva_tx, charges, remise_percent, remise, newnpr, delivery_time_days, supplier_reputation, localtaxes_array, newdefaultvatcode, multicurrency_buyprice, multicurrency_price_base_type, multicurrency_tx, multicurrency_code, desc_fourn, barcode, fk_barcode_type, id, **kwargs)  # noqa: E501
            return data

    def products_add_purchase_price_with_http_info(self, qty, buyprice, price_base_type, fourn_id, availability, ref_fourn, tva_tx, charges, remise_percent, remise, newnpr, delivery_time_days, supplier_reputation, localtaxes_array, newdefaultvatcode, multicurrency_buyprice, multicurrency_price_base_type, multicurrency_tx, multicurrency_code, desc_fourn, barcode, fk_barcode_type, id, **kwargs):  # noqa: E501
        """Add/Update purchase prices for a product. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_add_purchase_price_with_http_info(qty, buyprice, price_base_type, fourn_id, availability, ref_fourn, tva_tx, charges, remise_percent, remise, newnpr, delivery_time_days, supplier_reputation, localtaxes_array, newdefaultvatcode, multicurrency_buyprice, multicurrency_price_base_type, multicurrency_tx, multicurrency_code, desc_fourn, barcode, fk_barcode_type, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float qty: (required)
        :param float buyprice: (required)
        :param str price_base_type: (required)
        :param int fourn_id: (required)
        :param int availability: (required)
        :param str ref_fourn: (required)
        :param float tva_tx: (required)
        :param str charges: (required)
        :param float remise_percent: (required)
        :param float remise: (required)
        :param int newnpr: (required)
        :param int delivery_time_days: (required)
        :param str supplier_reputation: (required)
        :param list[str] localtaxes_array: (required)
        :param str newdefaultvatcode: (required)
        :param float multicurrency_buyprice: (required)
        :param str multicurrency_price_base_type: (required)
        :param float multicurrency_tx: (required)
        :param str multicurrency_code: (required)
        :param str desc_fourn: (required)
        :param str barcode: (required)
        :param int fk_barcode_type: (required)
        :param int id: ID of Product (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['qty', 'buyprice', 'price_base_type', 'fourn_id', 'availability', 'ref_fourn', 'tva_tx', 'charges', 'remise_percent', 'remise', 'newnpr', 'delivery_time_days', 'supplier_reputation', 'localtaxes_array', 'newdefaultvatcode', 'multicurrency_buyprice', 'multicurrency_price_base_type', 'multicurrency_tx', 'multicurrency_code', 'desc_fourn', 'barcode', 'fk_barcode_type', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_add_purchase_price" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'qty' is set
        if ('qty' not in params or
                params['qty'] is None):
            raise ValueError("Missing the required parameter `qty` when calling `products_add_purchase_price`")  # noqa: E501
        # verify the required parameter 'buyprice' is set
        if ('buyprice' not in params or
                params['buyprice'] is None):
            raise ValueError("Missing the required parameter `buyprice` when calling `products_add_purchase_price`")  # noqa: E501
        # verify the required parameter 'price_base_type' is set
        if ('price_base_type' not in params or
                params['price_base_type'] is None):
            raise ValueError("Missing the required parameter `price_base_type` when calling `products_add_purchase_price`")  # noqa: E501
        # verify the required parameter 'fourn_id' is set
        if ('fourn_id' not in params or
                params['fourn_id'] is None):
            raise ValueError("Missing the required parameter `fourn_id` when calling `products_add_purchase_price`")  # noqa: E501
        # verify the required parameter 'availability' is set
        if ('availability' not in params or
                params['availability'] is None):
            raise ValueError("Missing the required parameter `availability` when calling `products_add_purchase_price`")  # noqa: E501
        # verify the required parameter 'ref_fourn' is set
        if ('ref_fourn' not in params or
                params['ref_fourn'] is None):
            raise ValueError("Missing the required parameter `ref_fourn` when calling `products_add_purchase_price`")  # noqa: E501
        # verify the required parameter 'tva_tx' is set
        if ('tva_tx' not in params or
                params['tva_tx'] is None):
            raise ValueError("Missing the required parameter `tva_tx` when calling `products_add_purchase_price`")  # noqa: E501
        # verify the required parameter 'charges' is set
        if ('charges' not in params or
                params['charges'] is None):
            raise ValueError("Missing the required parameter `charges` when calling `products_add_purchase_price`")  # noqa: E501
        # verify the required parameter 'remise_percent' is set
        if ('remise_percent' not in params or
                params['remise_percent'] is None):
            raise ValueError("Missing the required parameter `remise_percent` when calling `products_add_purchase_price`")  # noqa: E501
        # verify the required parameter 'remise' is set
        if ('remise' not in params or
                params['remise'] is None):
            raise ValueError("Missing the required parameter `remise` when calling `products_add_purchase_price`")  # noqa: E501
        # verify the required parameter 'newnpr' is set
        if ('newnpr' not in params or
                params['newnpr'] is None):
            raise ValueError("Missing the required parameter `newnpr` when calling `products_add_purchase_price`")  # noqa: E501
        # verify the required parameter 'delivery_time_days' is set
        if ('delivery_time_days' not in params or
                params['delivery_time_days'] is None):
            raise ValueError("Missing the required parameter `delivery_time_days` when calling `products_add_purchase_price`")  # noqa: E501
        # verify the required parameter 'supplier_reputation' is set
        if ('supplier_reputation' not in params or
                params['supplier_reputation'] is None):
            raise ValueError("Missing the required parameter `supplier_reputation` when calling `products_add_purchase_price`")  # noqa: E501
        # verify the required parameter 'localtaxes_array' is set
        if ('localtaxes_array' not in params or
                params['localtaxes_array'] is None):
            raise ValueError("Missing the required parameter `localtaxes_array` when calling `products_add_purchase_price`")  # noqa: E501
        # verify the required parameter 'newdefaultvatcode' is set
        if ('newdefaultvatcode' not in params or
                params['newdefaultvatcode'] is None):
            raise ValueError("Missing the required parameter `newdefaultvatcode` when calling `products_add_purchase_price`")  # noqa: E501
        # verify the required parameter 'multicurrency_buyprice' is set
        if ('multicurrency_buyprice' not in params or
                params['multicurrency_buyprice'] is None):
            raise ValueError("Missing the required parameter `multicurrency_buyprice` when calling `products_add_purchase_price`")  # noqa: E501
        # verify the required parameter 'multicurrency_price_base_type' is set
        if ('multicurrency_price_base_type' not in params or
                params['multicurrency_price_base_type'] is None):
            raise ValueError("Missing the required parameter `multicurrency_price_base_type` when calling `products_add_purchase_price`")  # noqa: E501
        # verify the required parameter 'multicurrency_tx' is set
        if ('multicurrency_tx' not in params or
                params['multicurrency_tx'] is None):
            raise ValueError("Missing the required parameter `multicurrency_tx` when calling `products_add_purchase_price`")  # noqa: E501
        # verify the required parameter 'multicurrency_code' is set
        if ('multicurrency_code' not in params or
                params['multicurrency_code'] is None):
            raise ValueError("Missing the required parameter `multicurrency_code` when calling `products_add_purchase_price`")  # noqa: E501
        # verify the required parameter 'desc_fourn' is set
        if ('desc_fourn' not in params or
                params['desc_fourn'] is None):
            raise ValueError("Missing the required parameter `desc_fourn` when calling `products_add_purchase_price`")  # noqa: E501
        # verify the required parameter 'barcode' is set
        if ('barcode' not in params or
                params['barcode'] is None):
            raise ValueError("Missing the required parameter `barcode` when calling `products_add_purchase_price`")  # noqa: E501
        # verify the required parameter 'fk_barcode_type' is set
        if ('fk_barcode_type' not in params or
                params['fk_barcode_type'] is None):
            raise ValueError("Missing the required parameter `fk_barcode_type` when calling `products_add_purchase_price`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_add_purchase_price`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'qty' in params:
            form_params.append(('qty', params['qty']))  # noqa: E501
        if 'buyprice' in params:
            form_params.append(('buyprice', params['buyprice']))  # noqa: E501
        if 'price_base_type' in params:
            form_params.append(('price_base_type', params['price_base_type']))  # noqa: E501
        if 'fourn_id' in params:
            form_params.append(('fourn_id', params['fourn_id']))  # noqa: E501
        if 'availability' in params:
            form_params.append(('availability', params['availability']))  # noqa: E501
        if 'ref_fourn' in params:
            form_params.append(('ref_fourn', params['ref_fourn']))  # noqa: E501
        if 'tva_tx' in params:
            form_params.append(('tva_tx', params['tva_tx']))  # noqa: E501
        if 'charges' in params:
            form_params.append(('charges', params['charges']))  # noqa: E501
        if 'remise_percent' in params:
            form_params.append(('remise_percent', params['remise_percent']))  # noqa: E501
        if 'remise' in params:
            form_params.append(('remise', params['remise']))  # noqa: E501
        if 'newnpr' in params:
            form_params.append(('newnpr', params['newnpr']))  # noqa: E501
        if 'delivery_time_days' in params:
            form_params.append(('delivery_time_days', params['delivery_time_days']))  # noqa: E501
        if 'supplier_reputation' in params:
            form_params.append(('supplier_reputation', params['supplier_reputation']))  # noqa: E501
        if 'localtaxes_array' in params:
            form_params.append(('localtaxes_array', params['localtaxes_array']))  # noqa: E501
            collection_formats['localtaxes_array'] = 'multi'  # noqa: E501
        if 'newdefaultvatcode' in params:
            form_params.append(('newdefaultvatcode', params['newdefaultvatcode']))  # noqa: E501
        if 'multicurrency_buyprice' in params:
            form_params.append(('multicurrency_buyprice', params['multicurrency_buyprice']))  # noqa: E501
        if 'multicurrency_price_base_type' in params:
            form_params.append(('multicurrency_price_base_type', params['multicurrency_price_base_type']))  # noqa: E501
        if 'multicurrency_tx' in params:
            form_params.append(('multicurrency_tx', params['multicurrency_tx']))  # noqa: E501
        if 'multicurrency_code' in params:
            form_params.append(('multicurrency_code', params['multicurrency_code']))  # noqa: E501
        if 'desc_fourn' in params:
            form_params.append(('desc_fourn', params['desc_fourn']))  # noqa: E501
        if 'barcode' in params:
            form_params.append(('barcode', params['barcode']))  # noqa: E501
        if 'fk_barcode_type' in params:
            form_params.append(('fk_barcode_type', params['fk_barcode_type']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/purchase_prices', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_add_subproducts(self, body, id, **kwargs):  # noqa: E501
        """Add subproduct. 🔐  # noqa: E501

         Link a product/service to a parent product/service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_add_subproducts(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductsAddSubproductsModel body: **subproduct_id** (required)  
**qty** (required)  
incdec  
 (required)
        :param int id: Id of parent product/service (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_add_subproducts_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_add_subproducts_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def products_add_subproducts_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Add subproduct. 🔐  # noqa: E501

         Link a product/service to a parent product/service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_add_subproducts_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductsAddSubproductsModel body: **subproduct_id** (required)  
**qty** (required)  
incdec  
 (required)
        :param int id: Id of parent product/service (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_add_subproducts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `products_add_subproducts`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_add_subproducts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'subproduct_id' in params:
            form_params.append(('subproduct_id', params['subproduct_id']))  # noqa: E501
        if 'qty' in params:
            form_params.append(('qty', params['qty']))  # noqa: E501
        if 'incdec' in params:
            form_params.append(('incdec', params['incdec']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/subproducts/add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_add_subproducts(self, subproduct_id, qty, incdec, id, **kwargs):  # noqa: E501
        """Add subproduct. 🔐  # noqa: E501

         Link a product/service to a parent product/service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_add_subproducts(subproduct_id, qty, incdec, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int subproduct_id: (required)
        :param int qty: (required)
        :param int incdec: (required)
        :param int id: Id of parent product/service (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_add_subproducts_with_http_info(subproduct_id, qty, incdec, id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_add_subproducts_with_http_info(subproduct_id, qty, incdec, id, **kwargs)  # noqa: E501
            return data

    def products_add_subproducts_with_http_info(self, subproduct_id, qty, incdec, id, **kwargs):  # noqa: E501
        """Add subproduct. 🔐  # noqa: E501

         Link a product/service to a parent product/service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_add_subproducts_with_http_info(subproduct_id, qty, incdec, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int subproduct_id: (required)
        :param int qty: (required)
        :param int incdec: (required)
        :param int id: Id of parent product/service (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subproduct_id', 'qty', 'incdec', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_add_subproducts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subproduct_id' is set
        if ('subproduct_id' not in params or
                params['subproduct_id'] is None):
            raise ValueError("Missing the required parameter `subproduct_id` when calling `products_add_subproducts`")  # noqa: E501
        # verify the required parameter 'qty' is set
        if ('qty' not in params or
                params['qty'] is None):
            raise ValueError("Missing the required parameter `qty` when calling `products_add_subproducts`")  # noqa: E501
        # verify the required parameter 'incdec' is set
        if ('incdec' not in params or
                params['incdec'] is None):
            raise ValueError("Missing the required parameter `incdec` when calling `products_add_subproducts`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_add_subproducts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'subproduct_id' in params:
            form_params.append(('subproduct_id', params['subproduct_id']))  # noqa: E501
        if 'qty' in params:
            form_params.append(('qty', params['qty']))  # noqa: E501
        if 'incdec' in params:
            form_params.append(('incdec', params['incdec']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/subproducts/add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_add_variant(self, body, id, **kwargs):  # noqa: E501
        """Add variant. 🔐  # noqa: E501

         \"features\" is a list of attributes pairs id_attribute=>id_value. Example: array(id_color=>id_Blue, id_size=>id_small, id_option=>id_val_a, ...)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_add_variant(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductsAddVariantModel body: **weight_impact** (required)  
**price_impact** (required)  
**price_impact_is_percent** (required)  
**features** (required)  
reference  
ref_ext  
 (required)
        :param int id: ID of Product (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_add_variant_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_add_variant_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def products_add_variant_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Add variant. 🔐  # noqa: E501

         \"features\" is a list of attributes pairs id_attribute=>id_value. Example: array(id_color=>id_Blue, id_size=>id_small, id_option=>id_val_a, ...)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_add_variant_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductsAddVariantModel body: **weight_impact** (required)  
**price_impact** (required)  
**price_impact_is_percent** (required)  
**features** (required)  
reference  
ref_ext  
 (required)
        :param int id: ID of Product (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_add_variant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `products_add_variant`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_add_variant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'weight_impact' in params:
            form_params.append(('weight_impact', params['weight_impact']))  # noqa: E501
        if 'price_impact' in params:
            form_params.append(('price_impact', params['price_impact']))  # noqa: E501
        if 'price_impact_is_percent' in params:
            form_params.append(('price_impact_is_percent', params['price_impact_is_percent']))  # noqa: E501
        if 'features' in params:
            form_params.append(('features', params['features']))  # noqa: E501
            collection_formats['features'] = 'multi'  # noqa: E501
        if 'reference' in params:
            form_params.append(('reference', params['reference']))  # noqa: E501
        if 'ref_ext' in params:
            form_params.append(('ref_ext', params['ref_ext']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/variants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_add_variant(self, weight_impact, price_impact, price_impact_is_percent, features, reference, ref_ext, id, **kwargs):  # noqa: E501
        """Add variant. 🔐  # noqa: E501

         \"features\" is a list of attributes pairs id_attribute=>id_value. Example: array(id_color=>id_Blue, id_size=>id_small, id_option=>id_val_a, ...)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_add_variant(weight_impact, price_impact, price_impact_is_percent, features, reference, ref_ext, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float weight_impact: (required)
        :param float price_impact: (required)
        :param bool price_impact_is_percent: (required)
        :param list[str] features: (required)
        :param str reference: (required)
        :param str ref_ext: (required)
        :param int id: ID of Product (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_add_variant_with_http_info(weight_impact, price_impact, price_impact_is_percent, features, reference, ref_ext, id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_add_variant_with_http_info(weight_impact, price_impact, price_impact_is_percent, features, reference, ref_ext, id, **kwargs)  # noqa: E501
            return data

    def products_add_variant_with_http_info(self, weight_impact, price_impact, price_impact_is_percent, features, reference, ref_ext, id, **kwargs):  # noqa: E501
        """Add variant. 🔐  # noqa: E501

         \"features\" is a list of attributes pairs id_attribute=>id_value. Example: array(id_color=>id_Blue, id_size=>id_small, id_option=>id_val_a, ...)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_add_variant_with_http_info(weight_impact, price_impact, price_impact_is_percent, features, reference, ref_ext, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float weight_impact: (required)
        :param float price_impact: (required)
        :param bool price_impact_is_percent: (required)
        :param list[str] features: (required)
        :param str reference: (required)
        :param str ref_ext: (required)
        :param int id: ID of Product (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['weight_impact', 'price_impact', 'price_impact_is_percent', 'features', 'reference', 'ref_ext', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_add_variant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'weight_impact' is set
        if ('weight_impact' not in params or
                params['weight_impact'] is None):
            raise ValueError("Missing the required parameter `weight_impact` when calling `products_add_variant`")  # noqa: E501
        # verify the required parameter 'price_impact' is set
        if ('price_impact' not in params or
                params['price_impact'] is None):
            raise ValueError("Missing the required parameter `price_impact` when calling `products_add_variant`")  # noqa: E501
        # verify the required parameter 'price_impact_is_percent' is set
        if ('price_impact_is_percent' not in params or
                params['price_impact_is_percent'] is None):
            raise ValueError("Missing the required parameter `price_impact_is_percent` when calling `products_add_variant`")  # noqa: E501
        # verify the required parameter 'features' is set
        if ('features' not in params or
                params['features'] is None):
            raise ValueError("Missing the required parameter `features` when calling `products_add_variant`")  # noqa: E501
        # verify the required parameter 'reference' is set
        if ('reference' not in params or
                params['reference'] is None):
            raise ValueError("Missing the required parameter `reference` when calling `products_add_variant`")  # noqa: E501
        # verify the required parameter 'ref_ext' is set
        if ('ref_ext' not in params or
                params['ref_ext'] is None):
            raise ValueError("Missing the required parameter `ref_ext` when calling `products_add_variant`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_add_variant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'weight_impact' in params:
            form_params.append(('weight_impact', params['weight_impact']))  # noqa: E501
        if 'price_impact' in params:
            form_params.append(('price_impact', params['price_impact']))  # noqa: E501
        if 'price_impact_is_percent' in params:
            form_params.append(('price_impact_is_percent', params['price_impact_is_percent']))  # noqa: E501
        if 'features' in params:
            form_params.append(('features', params['features']))  # noqa: E501
            collection_formats['features'] = 'multi'  # noqa: E501
        if 'reference' in params:
            form_params.append(('reference', params['reference']))  # noqa: E501
        if 'ref_ext' in params:
            form_params.append(('ref_ext', params['ref_ext']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/variants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_add_variant_by_product_ref(self, body, ref, **kwargs):  # noqa: E501
        """Add variant by product ref. 🔐  # noqa: E501

         \"features\" is a list of attributes pairs id_attribute=>id_value. Example: array(id_color=>id_Blue, id_size=>id_small, id_option=>id_val_a, ...)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_add_variant_by_product_ref(body, ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductsAddVariantByProductRefModel body: **weight_impact** (required)  
**price_impact** (required)  
**price_impact_is_percent** (required)  
**features** (required)  
 (required)
        :param str ref: Ref of Product (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_add_variant_by_product_ref_with_http_info(body, ref, **kwargs)  # noqa: E501
        else:
            (data) = self.products_add_variant_by_product_ref_with_http_info(body, ref, **kwargs)  # noqa: E501
            return data

    def products_add_variant_by_product_ref_with_http_info(self, body, ref, **kwargs):  # noqa: E501
        """Add variant by product ref. 🔐  # noqa: E501

         \"features\" is a list of attributes pairs id_attribute=>id_value. Example: array(id_color=>id_Blue, id_size=>id_small, id_option=>id_val_a, ...)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_add_variant_by_product_ref_with_http_info(body, ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductsAddVariantByProductRefModel body: **weight_impact** (required)  
**price_impact** (required)  
**price_impact_is_percent** (required)  
**features** (required)  
 (required)
        :param str ref: Ref of Product (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'ref']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_add_variant_by_product_ref" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `products_add_variant_by_product_ref`")  # noqa: E501
        # verify the required parameter 'ref' is set
        if ('ref' not in params or
                params['ref'] is None):
            raise ValueError("Missing the required parameter `ref` when calling `products_add_variant_by_product_ref`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ref' in params:
            path_params['ref'] = params['ref']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'weight_impact' in params:
            form_params.append(('weight_impact', params['weight_impact']))  # noqa: E501
        if 'price_impact' in params:
            form_params.append(('price_impact', params['price_impact']))  # noqa: E501
        if 'price_impact_is_percent' in params:
            form_params.append(('price_impact_is_percent', params['price_impact_is_percent']))  # noqa: E501
        if 'features' in params:
            form_params.append(('features', params['features']))  # noqa: E501
            collection_formats['features'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/ref/{ref}/variants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_add_variant_by_product_ref(self, weight_impact, price_impact, price_impact_is_percent, features, ref, **kwargs):  # noqa: E501
        """Add variant by product ref. 🔐  # noqa: E501

         \"features\" is a list of attributes pairs id_attribute=>id_value. Example: array(id_color=>id_Blue, id_size=>id_small, id_option=>id_val_a, ...)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_add_variant_by_product_ref(weight_impact, price_impact, price_impact_is_percent, features, ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float weight_impact: (required)
        :param float price_impact: (required)
        :param bool price_impact_is_percent: (required)
        :param list[str] features: (required)
        :param str ref: Ref of Product (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_add_variant_by_product_ref_with_http_info(weight_impact, price_impact, price_impact_is_percent, features, ref, **kwargs)  # noqa: E501
        else:
            (data) = self.products_add_variant_by_product_ref_with_http_info(weight_impact, price_impact, price_impact_is_percent, features, ref, **kwargs)  # noqa: E501
            return data

    def products_add_variant_by_product_ref_with_http_info(self, weight_impact, price_impact, price_impact_is_percent, features, ref, **kwargs):  # noqa: E501
        """Add variant by product ref. 🔐  # noqa: E501

         \"features\" is a list of attributes pairs id_attribute=>id_value. Example: array(id_color=>id_Blue, id_size=>id_small, id_option=>id_val_a, ...)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_add_variant_by_product_ref_with_http_info(weight_impact, price_impact, price_impact_is_percent, features, ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float weight_impact: (required)
        :param float price_impact: (required)
        :param bool price_impact_is_percent: (required)
        :param list[str] features: (required)
        :param str ref: Ref of Product (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['weight_impact', 'price_impact', 'price_impact_is_percent', 'features', 'ref']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_add_variant_by_product_ref" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'weight_impact' is set
        if ('weight_impact' not in params or
                params['weight_impact'] is None):
            raise ValueError("Missing the required parameter `weight_impact` when calling `products_add_variant_by_product_ref`")  # noqa: E501
        # verify the required parameter 'price_impact' is set
        if ('price_impact' not in params or
                params['price_impact'] is None):
            raise ValueError("Missing the required parameter `price_impact` when calling `products_add_variant_by_product_ref`")  # noqa: E501
        # verify the required parameter 'price_impact_is_percent' is set
        if ('price_impact_is_percent' not in params or
                params['price_impact_is_percent'] is None):
            raise ValueError("Missing the required parameter `price_impact_is_percent` when calling `products_add_variant_by_product_ref`")  # noqa: E501
        # verify the required parameter 'features' is set
        if ('features' not in params or
                params['features'] is None):
            raise ValueError("Missing the required parameter `features` when calling `products_add_variant_by_product_ref`")  # noqa: E501
        # verify the required parameter 'ref' is set
        if ('ref' not in params or
                params['ref'] is None):
            raise ValueError("Missing the required parameter `ref` when calling `products_add_variant_by_product_ref`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ref' in params:
            path_params['ref'] = params['ref']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'weight_impact' in params:
            form_params.append(('weight_impact', params['weight_impact']))  # noqa: E501
        if 'price_impact' in params:
            form_params.append(('price_impact', params['price_impact']))  # noqa: E501
        if 'price_impact_is_percent' in params:
            form_params.append(('price_impact_is_percent', params['price_impact_is_percent']))  # noqa: E501
        if 'features' in params:
            form_params.append(('features', params['features']))  # noqa: E501
            collection_formats['features'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/ref/{ref}/variants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_del_subproducts(self, id, subproduct_id, **kwargs):  # noqa: E501
        """Remove subproduct. 🔐  # noqa: E501

        Unlink a product/service from a parent product/service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_del_subproducts(id, subproduct_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of parent product/service (required)
        :param int subproduct_id: Id of child product/service (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_del_subproducts_with_http_info(id, subproduct_id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_del_subproducts_with_http_info(id, subproduct_id, **kwargs)  # noqa: E501
            return data

    def products_del_subproducts_with_http_info(self, id, subproduct_id, **kwargs):  # noqa: E501
        """Remove subproduct. 🔐  # noqa: E501

        Unlink a product/service from a parent product/service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_del_subproducts_with_http_info(id, subproduct_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of parent product/service (required)
        :param int subproduct_id: Id of child product/service (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'subproduct_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_del_subproducts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_del_subproducts`")  # noqa: E501
        # verify the required parameter 'subproduct_id' is set
        if ('subproduct_id' not in params or
                params['subproduct_id'] is None):
            raise ValueError("Missing the required parameter `subproduct_id` when calling `products_del_subproducts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'subproduct_id' in params:
            path_params['subproduct_id'] = params['subproduct_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/subproducts/remove/{subproduct_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_remove_attribute_value_by_id(self, id, **kwargs):  # noqa: E501
        """Delete attribute value by id. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_remove_attribute_value_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Attribute value (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_remove_attribute_value_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_remove_attribute_value_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_remove_attribute_value_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete attribute value by id. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_remove_attribute_value_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Attribute value (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_remove_attribute_value_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_remove_attribute_value_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/attributes/values/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_remove_attribute_value_by_ref(self, id, ref, **kwargs):  # noqa: E501
        """Delete attribute value by ref. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_remove_attribute_value_by_ref(id, ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Attribute (required)
        :param str ref: Ref of Attribute value (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_remove_attribute_value_by_ref_with_http_info(id, ref, **kwargs)  # noqa: E501
        else:
            (data) = self.products_remove_attribute_value_by_ref_with_http_info(id, ref, **kwargs)  # noqa: E501
            return data

    def products_remove_attribute_value_by_ref_with_http_info(self, id, ref, **kwargs):  # noqa: E501
        """Delete attribute value by ref. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_remove_attribute_value_by_ref_with_http_info(id, ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Attribute (required)
        :param str ref: Ref of Attribute value (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'ref']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_remove_attribute_value_by_ref" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_remove_attribute_value_by_ref`")  # noqa: E501
        # verify the required parameter 'ref' is set
        if ('ref' not in params or
                params['ref'] is None):
            raise ValueError("Missing the required parameter `ref` when calling `products_remove_attribute_value_by_ref`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'ref' in params:
            path_params['ref'] = params['ref']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/attributes/{id}/values/ref/{ref}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_remove_attributes(self, id, **kwargs):  # noqa: E501
        """Delete attributes by id. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_remove_attributes(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Attribute (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_remove_attributes_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_remove_attributes_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_remove_attributes_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete attributes by id. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_remove_attributes_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Attribute (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_remove_attributes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_remove_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/attributes/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_remove_purchase_price(self, id, priceid, **kwargs):  # noqa: E501
        """Delete purchase price for a product 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_remove_purchase_price(id, priceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Product ID (required)
        :param int priceid: purchase price ID (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_remove_purchase_price_with_http_info(id, priceid, **kwargs)  # noqa: E501
        else:
            (data) = self.products_remove_purchase_price_with_http_info(id, priceid, **kwargs)  # noqa: E501
            return data

    def products_remove_purchase_price_with_http_info(self, id, priceid, **kwargs):  # noqa: E501
        """Delete purchase price for a product 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_remove_purchase_price_with_http_info(id, priceid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Product ID (required)
        :param int priceid: purchase price ID (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'priceid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_remove_purchase_price" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_remove_purchase_price`")  # noqa: E501
        # verify the required parameter 'priceid' is set
        if ('priceid' not in params or
                params['priceid'] is None):
            raise ValueError("Missing the required parameter `priceid` when calling `products_remove_purchase_price`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'priceid' in params:
            path_params['priceid'] = params['priceid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/purchase_prices/{priceid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_remove_variant(self, id, **kwargs):  # noqa: E501
        """Delete product variants. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_remove_variant(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Variant (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_remove_variant_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_remove_variant_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_remove_variant_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete product variants. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_remove_variant_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Variant (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_remove_variant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_remove_variant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/variants/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_retrieve_attribute_by_id(self, id, **kwargs):  # noqa: E501
        """Get attribute by ID. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_attribute_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Attribute (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_retrieve_attribute_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_retrieve_attribute_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_retrieve_attribute_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get attribute by ID. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_attribute_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Attribute (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_retrieve_attribute_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_retrieve_attribute_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/attributes/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_retrieve_attribute_value_by_id(self, id, **kwargs):  # noqa: E501
        """Get attribute value by id. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_attribute_value_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Attribute value (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_retrieve_attribute_value_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_retrieve_attribute_value_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_retrieve_attribute_value_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get attribute value by id. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_attribute_value_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Attribute value (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_retrieve_attribute_value_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_retrieve_attribute_value_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/attributes/values/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_retrieve_attribute_value_by_ref(self, id, ref, **kwargs):  # noqa: E501
        """Get attribute value by ref. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_attribute_value_by_ref(id, ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Attribute value (required)
        :param str ref: Ref of Attribute value (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_retrieve_attribute_value_by_ref_with_http_info(id, ref, **kwargs)  # noqa: E501
        else:
            (data) = self.products_retrieve_attribute_value_by_ref_with_http_info(id, ref, **kwargs)  # noqa: E501
            return data

    def products_retrieve_attribute_value_by_ref_with_http_info(self, id, ref, **kwargs):  # noqa: E501
        """Get attribute value by ref. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_attribute_value_by_ref_with_http_info(id, ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Attribute value (required)
        :param str ref: Ref of Attribute value (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'ref']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_retrieve_attribute_value_by_ref" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_retrieve_attribute_value_by_ref`")  # noqa: E501
        # verify the required parameter 'ref' is set
        if ('ref' not in params or
                params['ref'] is None):
            raise ValueError("Missing the required parameter `ref` when calling `products_retrieve_attribute_value_by_ref`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'ref' in params:
            path_params['ref'] = params['ref']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/attributes/{id}/values/ref/{ref}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_retrieve_attribute_values(self, id, **kwargs):  # noqa: E501
        """Get all values for an attribute id. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_attribute_values(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of an Attribute (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_retrieve_attribute_values_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_retrieve_attribute_values_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_retrieve_attribute_values_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get all values for an attribute id. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_attribute_values_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of an Attribute (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_retrieve_attribute_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_retrieve_attribute_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/attributes/{id}/values', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_retrieve_attribute_values_by_ref(self, ref, **kwargs):  # noqa: E501
        """Get all values for an attribute ref. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_attribute_values_by_ref(ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ref: Ref of an Attribute (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_retrieve_attribute_values_by_ref_with_http_info(ref, **kwargs)  # noqa: E501
        else:
            (data) = self.products_retrieve_attribute_values_by_ref_with_http_info(ref, **kwargs)  # noqa: E501
            return data

    def products_retrieve_attribute_values_by_ref_with_http_info(self, ref, **kwargs):  # noqa: E501
        """Get all values for an attribute ref. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_attribute_values_by_ref_with_http_info(ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ref: Ref of an Attribute (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ref']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_retrieve_attribute_values_by_ref" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ref' is set
        if ('ref' not in params or
                params['ref'] is None):
            raise ValueError("Missing the required parameter `ref` when calling `products_retrieve_attribute_values_by_ref`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ref' in params:
            path_params['ref'] = params['ref']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/attributes/ref/{ref}/values', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_retrieve_attributes(self, **kwargs):  # noqa: E501
        """Get attributes. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_attributes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :param int limit: Limit for list
        :param int page: Page number
        :param str sqlfilters: Other criteria to filter answers separated by a comma. Syntax example \"(t.ref:like:color)\"
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_retrieve_attributes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.products_retrieve_attributes_with_http_info(**kwargs)  # noqa: E501
            return data

    def products_retrieve_attributes_with_http_info(self, **kwargs):  # noqa: E501
        """Get attributes. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_attributes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :param int limit: Limit for list
        :param int page: Page number
        :param str sqlfilters: Other criteria to filter answers separated by a comma. Syntax example \"(t.ref:like:color)\"
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sortfield', 'sortorder', 'limit', 'page', 'sqlfilters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_retrieve_attributes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sortfield' in params:
            query_params.append(('sortfield', params['sortfield']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'sqlfilters' in params:
            query_params.append(('sqlfilters', params['sqlfilters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/attributes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_retrieve_attributes_by_ref(self, ref, **kwargs):  # noqa: E501
        """Get attributes by ref. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_attributes_by_ref(ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ref: Reference of Attribute (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_retrieve_attributes_by_ref_with_http_info(ref, **kwargs)  # noqa: E501
        else:
            (data) = self.products_retrieve_attributes_by_ref_with_http_info(ref, **kwargs)  # noqa: E501
            return data

    def products_retrieve_attributes_by_ref_with_http_info(self, ref, **kwargs):  # noqa: E501
        """Get attributes by ref. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_attributes_by_ref_with_http_info(ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ref: Reference of Attribute (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ref']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_retrieve_attributes_by_ref" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ref' is set
        if ('ref' not in params or
                params['ref'] is None):
            raise ValueError("Missing the required parameter `ref` when calling `products_retrieve_attributes_by_ref`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ref' in params:
            path_params['ref'] = params['ref']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/attributes/ref/{ref}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_retrieve_attributes_by_ref_ext(self, ref_ext, **kwargs):  # noqa: E501
        """Get attributes by ref_ext. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_attributes_by_ref_ext(ref_ext, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ref_ext: External reference of Attribute (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_retrieve_attributes_by_ref_ext_with_http_info(ref_ext, **kwargs)  # noqa: E501
        else:
            (data) = self.products_retrieve_attributes_by_ref_ext_with_http_info(ref_ext, **kwargs)  # noqa: E501
            return data

    def products_retrieve_attributes_by_ref_ext_with_http_info(self, ref_ext, **kwargs):  # noqa: E501
        """Get attributes by ref_ext. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_attributes_by_ref_ext_with_http_info(ref_ext, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ref_ext: External reference of Attribute (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ref_ext']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_retrieve_attributes_by_ref_ext" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ref_ext' is set
        if ('ref_ext' not in params or
                params['ref_ext'] is None):
            raise ValueError("Missing the required parameter `ref_ext` when calling `products_retrieve_attributes_by_ref_ext`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ref_ext' in params:
            path_params['ref_ext'] = params['ref_ext']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/attributes/ref_ext/{ref_ext}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_retrieve_by_barcode(self, barcode, **kwargs):  # noqa: E501
        """Get properties of a product object by barcode 🔐  # noqa: E501

        Return an array with product information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_by_barcode(barcode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str barcode: Barcode of element (required)
        :param int includestockdata: Load also information about stock (slower)
        :param bool includesubproducts: Load information about subproducts
        :param bool includeparentid: Load also ID of parent product (if product is a variant of a parent product)
        :param bool includetrans: Load also the translations of product label and description
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_retrieve_by_barcode_with_http_info(barcode, **kwargs)  # noqa: E501
        else:
            (data) = self.products_retrieve_by_barcode_with_http_info(barcode, **kwargs)  # noqa: E501
            return data

    def products_retrieve_by_barcode_with_http_info(self, barcode, **kwargs):  # noqa: E501
        """Get properties of a product object by barcode 🔐  # noqa: E501

        Return an array with product information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_by_barcode_with_http_info(barcode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str barcode: Barcode of element (required)
        :param int includestockdata: Load also information about stock (slower)
        :param bool includesubproducts: Load information about subproducts
        :param bool includeparentid: Load also ID of parent product (if product is a variant of a parent product)
        :param bool includetrans: Load also the translations of product label and description
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['barcode', 'includestockdata', 'includesubproducts', 'includeparentid', 'includetrans']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_retrieve_by_barcode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'barcode' is set
        if ('barcode' not in params or
                params['barcode'] is None):
            raise ValueError("Missing the required parameter `barcode` when calling `products_retrieve_by_barcode`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'barcode' in params:
            path_params['barcode'] = params['barcode']  # noqa: E501

        query_params = []
        if 'includestockdata' in params:
            query_params.append(('includestockdata', params['includestockdata']))  # noqa: E501
        if 'includesubproducts' in params:
            query_params.append(('includesubproducts', params['includesubproducts']))  # noqa: E501
        if 'includeparentid' in params:
            query_params.append(('includeparentid', params['includeparentid']))  # noqa: E501
        if 'includetrans' in params:
            query_params.append(('includetrans', params['includetrans']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/barcode/{barcode}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_retrieve_by_ref(self, ref, **kwargs):  # noqa: E501
        """Get properties of a product object by ref 🔐  # noqa: E501

        Return an array with product information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_by_ref(ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ref: Ref of element (required)
        :param int includestockdata: Load also information about stock (slower)
        :param bool includesubproducts: Load information about subproducts
        :param bool includeparentid: Load also ID of parent product (if product is a variant of a parent product)
        :param bool includetrans: Load also the translations of product label and description
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_retrieve_by_ref_with_http_info(ref, **kwargs)  # noqa: E501
        else:
            (data) = self.products_retrieve_by_ref_with_http_info(ref, **kwargs)  # noqa: E501
            return data

    def products_retrieve_by_ref_with_http_info(self, ref, **kwargs):  # noqa: E501
        """Get properties of a product object by ref 🔐  # noqa: E501

        Return an array with product information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_by_ref_with_http_info(ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ref: Ref of element (required)
        :param int includestockdata: Load also information about stock (slower)
        :param bool includesubproducts: Load information about subproducts
        :param bool includeparentid: Load also ID of parent product (if product is a variant of a parent product)
        :param bool includetrans: Load also the translations of product label and description
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ref', 'includestockdata', 'includesubproducts', 'includeparentid', 'includetrans']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_retrieve_by_ref" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ref' is set
        if ('ref' not in params or
                params['ref'] is None):
            raise ValueError("Missing the required parameter `ref` when calling `products_retrieve_by_ref`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ref' in params:
            path_params['ref'] = params['ref']  # noqa: E501

        query_params = []
        if 'includestockdata' in params:
            query_params.append(('includestockdata', params['includestockdata']))  # noqa: E501
        if 'includesubproducts' in params:
            query_params.append(('includesubproducts', params['includesubproducts']))  # noqa: E501
        if 'includeparentid' in params:
            query_params.append(('includeparentid', params['includeparentid']))  # noqa: E501
        if 'includetrans' in params:
            query_params.append(('includetrans', params['includetrans']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/ref/{ref}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_retrieve_by_ref_ext(self, ref_ext, **kwargs):  # noqa: E501
        """Get properties of a product object by ref_ext 🔐  # noqa: E501

        Return an array with product information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_by_ref_ext(ref_ext, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ref_ext: Ref_ext of element (required)
        :param int includestockdata: Load also information about stock (slower)
        :param bool includesubproducts: Load information about subproducts
        :param bool includeparentid: Load also ID of parent product (if product is a variant of a parent product)
        :param bool includetrans: Load also the translations of product label and description
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_retrieve_by_ref_ext_with_http_info(ref_ext, **kwargs)  # noqa: E501
        else:
            (data) = self.products_retrieve_by_ref_ext_with_http_info(ref_ext, **kwargs)  # noqa: E501
            return data

    def products_retrieve_by_ref_ext_with_http_info(self, ref_ext, **kwargs):  # noqa: E501
        """Get properties of a product object by ref_ext 🔐  # noqa: E501

        Return an array with product information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_by_ref_ext_with_http_info(ref_ext, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ref_ext: Ref_ext of element (required)
        :param int includestockdata: Load also information about stock (slower)
        :param bool includesubproducts: Load information about subproducts
        :param bool includeparentid: Load also ID of parent product (if product is a variant of a parent product)
        :param bool includetrans: Load also the translations of product label and description
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ref_ext', 'includestockdata', 'includesubproducts', 'includeparentid', 'includetrans']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_retrieve_by_ref_ext" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ref_ext' is set
        if ('ref_ext' not in params or
                params['ref_ext'] is None):
            raise ValueError("Missing the required parameter `ref_ext` when calling `products_retrieve_by_ref_ext`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ref_ext' in params:
            path_params['ref_ext'] = params['ref_ext']  # noqa: E501

        query_params = []
        if 'includestockdata' in params:
            query_params.append(('includestockdata', params['includestockdata']))  # noqa: E501
        if 'includesubproducts' in params:
            query_params.append(('includesubproducts', params['includesubproducts']))  # noqa: E501
        if 'includeparentid' in params:
            query_params.append(('includeparentid', params['includeparentid']))  # noqa: E501
        if 'includetrans' in params:
            query_params.append(('includetrans', params['includetrans']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/ref_ext/{ref_ext}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_retrieve_categories(self, id, **kwargs):  # noqa: E501
        """Get categories for a product 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_categories(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of product (required)
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :param int limit: Limit for list
        :param int page: Page number
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_retrieve_categories_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_retrieve_categories_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_retrieve_categories_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get categories for a product 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_categories_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of product (required)
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :param int limit: Limit for list
        :param int page: Page number
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sortfield', 'sortorder', 'limit', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_retrieve_categories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_retrieve_categories`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'sortfield' in params:
            query_params.append(('sortfield', params['sortfield']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_retrieve_customer_prices_per_customer(self, id, **kwargs):  # noqa: E501
        """Get prices per customer for a product 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_customer_prices_per_customer(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of product (required)
        :param str thirdparty_id: Thirdparty id to filter orders of (example '1')
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_retrieve_customer_prices_per_customer_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_retrieve_customer_prices_per_customer_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_retrieve_customer_prices_per_customer_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get prices per customer for a product 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_customer_prices_per_customer_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of product (required)
        :param str thirdparty_id: Thirdparty id to filter orders of (example '1')
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'thirdparty_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_retrieve_customer_prices_per_customer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_retrieve_customer_prices_per_customer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'thirdparty_id' in params:
            query_params.append(('thirdparty_id', params['thirdparty_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/selling_multiprices/per_customer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_retrieve_customer_prices_per_quantity(self, id, **kwargs):  # noqa: E501
        """Get prices per quantity for a product 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_customer_prices_per_quantity(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of product (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_retrieve_customer_prices_per_quantity_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_retrieve_customer_prices_per_quantity_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_retrieve_customer_prices_per_quantity_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get prices per quantity for a product 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_customer_prices_per_quantity_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of product (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_retrieve_customer_prices_per_quantity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_retrieve_customer_prices_per_quantity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/selling_multiprices/per_quantity', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_retrieve_customer_prices_per_segment(self, id, **kwargs):  # noqa: E501
        """Get prices per segment for a product 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_customer_prices_per_segment(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of product (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_retrieve_customer_prices_per_segment_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_retrieve_customer_prices_per_segment_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_retrieve_customer_prices_per_segment_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get prices per segment for a product 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_customer_prices_per_segment_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of product (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_retrieve_customer_prices_per_segment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_retrieve_customer_prices_per_segment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/selling_multiprices/per_segment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_retrieve_purchase_prices(self, id, **kwargs):  # noqa: E501
        """Get purchase prices for a product 🔐  # noqa: E501

        Return an array with product information. TODO implement getting a product by ref or by $ref_ext  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_purchase_prices(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of product (required)
        :param str ref: Ref of element
        :param str ref_ext: Ref ext of element
        :param str barcode: Barcode of element
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_retrieve_purchase_prices_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_retrieve_purchase_prices_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_retrieve_purchase_prices_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get purchase prices for a product 🔐  # noqa: E501

        Return an array with product information. TODO implement getting a product by ref or by $ref_ext  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_purchase_prices_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of product (required)
        :param str ref: Ref of element
        :param str ref_ext: Ref ext of element
        :param str barcode: Barcode of element
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'ref', 'ref_ext', 'barcode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_retrieve_purchase_prices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_retrieve_purchase_prices`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'ref' in params:
            query_params.append(('ref', params['ref']))  # noqa: E501
        if 'ref_ext' in params:
            query_params.append(('ref_ext', params['ref_ext']))  # noqa: E501
        if 'barcode' in params:
            query_params.append(('barcode', params['barcode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/purchase_prices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_retrieve_stock(self, id, **kwargs):  # noqa: E501
        """Get stock data for the product id given. 🔐  # noqa: E501

        Optionaly with $selected_warehouse_id parameter user can get stock of specific warehouse  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_stock(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Product (required)
        :param int selected_warehouse_id: ID of warehouse
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_retrieve_stock_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_retrieve_stock_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_retrieve_stock_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get stock data for the product id given. 🔐  # noqa: E501

        Optionaly with $selected_warehouse_id parameter user can get stock of specific warehouse  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_stock_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Product (required)
        :param int selected_warehouse_id: ID of warehouse
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'selected_warehouse_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_retrieve_stock" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_retrieve_stock`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'selected_warehouse_id' in params:
            query_params.append(('selected_warehouse_id', params['selected_warehouse_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/stock', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_retrieve_subproducts(self, id, **kwargs):  # noqa: E501
        """Get the list of subproducts of the product. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_subproducts(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of parent product/service (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_retrieve_subproducts_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_retrieve_subproducts_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_retrieve_subproducts_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the list of subproducts of the product. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_subproducts_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of parent product/service (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_retrieve_subproducts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_retrieve_subproducts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/subproducts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_retrieve_supplier_products(self, **kwargs):  # noqa: E501
        """Get a list of all purchase prices of products 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_supplier_products(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :param int limit: Limit for list
        :param int page: Page number
        :param int mode: Use this param to filter list (0 for all, 1 for only product, 2 for only service)
        :param int category: Use this param to filter list by category of product
        :param int supplier: Use this param to filter list by supplier
        :param str sqlfilters: Other criteria to filter answers separated by a comma. Syntax example \"(t.tobuy:=:0) and (t.tosell:=:1)\"
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_retrieve_supplier_products_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.products_retrieve_supplier_products_with_http_info(**kwargs)  # noqa: E501
            return data

    def products_retrieve_supplier_products_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of all purchase prices of products 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_supplier_products_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :param int limit: Limit for list
        :param int page: Page number
        :param int mode: Use this param to filter list (0 for all, 1 for only product, 2 for only service)
        :param int category: Use this param to filter list by category of product
        :param int supplier: Use this param to filter list by supplier
        :param str sqlfilters: Other criteria to filter answers separated by a comma. Syntax example \"(t.tobuy:=:0) and (t.tosell:=:1)\"
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sortfield', 'sortorder', 'limit', 'page', 'mode', 'category', 'supplier', 'sqlfilters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_retrieve_supplier_products" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sortfield' in params:
            query_params.append(('sortfield', params['sortfield']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'mode' in params:
            query_params.append(('mode', params['mode']))  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501
        if 'supplier' in params:
            query_params.append(('supplier', params['supplier']))  # noqa: E501
        if 'sqlfilters' in params:
            query_params.append(('sqlfilters', params['sqlfilters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/purchase_prices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_retrieve_variants(self, id, **kwargs):  # noqa: E501
        """Get product variants. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_variants(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Product (required)
        :param int includestock: Default value 0. If parameter is set to 1 the response will contain stock data of each variant
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_retrieve_variants_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_retrieve_variants_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_retrieve_variants_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get product variants. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_variants_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Product (required)
        :param int includestock: Default value 0. If parameter is set to 1 the response will contain stock data of each variant
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'includestock']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_retrieve_variants" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_retrieve_variants`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'includestock' in params:
            query_params.append(('includestock', params['includestock']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/variants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_retrieve_variants_by_prod_ref(self, ref, **kwargs):  # noqa: E501
        """Get product variants by Product ref. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_variants_by_prod_ref(ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ref: Ref of Product (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_retrieve_variants_by_prod_ref_with_http_info(ref, **kwargs)  # noqa: E501
        else:
            (data) = self.products_retrieve_variants_by_prod_ref_with_http_info(ref, **kwargs)  # noqa: E501
            return data

    def products_retrieve_variants_by_prod_ref_with_http_info(self, ref, **kwargs):  # noqa: E501
        """Get product variants by Product ref. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_retrieve_variants_by_prod_ref_with_http_info(ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ref: Ref of Product (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ref']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_retrieve_variants_by_prod_ref" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ref' is set
        if ('ref' not in params or
                params['ref'] is None):
            raise ValueError("Missing the required parameter `ref` when calling `products_retrieve_variants_by_prod_ref`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ref' in params:
            path_params['ref'] = params['ref']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/ref/{ref}/variants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_update_attribute_value(self, body, id, **kwargs):  # noqa: E501
        """Update attribute value. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_update_attribute_value(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductsUpdateAttributeValueModel body: **request_data** (required)  
 (required)
        :param int id: ID of Attribute (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_update_attribute_value_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_update_attribute_value_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def products_update_attribute_value_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update attribute value. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_update_attribute_value_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProductsUpdateAttributeValueModel body: **request_data** (required)  
 (required)
        :param int id: ID of Attribute (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_update_attribute_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `products_update_attribute_value`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_update_attribute_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/attributes/values/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_update_attribute_value(self, request_data, id, **kwargs):  # noqa: E501
        """Update attribute value. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_update_attribute_value(request_data, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] request_data: (required)
        :param int id: ID of Attribute (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_update_attribute_value_with_http_info(request_data, id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_update_attribute_value_with_http_info(request_data, id, **kwargs)  # noqa: E501
            return data

    def products_update_attribute_value_with_http_info(self, request_data, id, **kwargs):  # noqa: E501
        """Update attribute value. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_update_attribute_value_with_http_info(request_data, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] request_data: (required)
        :param int id: ID of Attribute (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_data', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_update_attribute_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request_data' is set
        if ('request_data' not in params or
                params['request_data'] is None):
            raise ValueError("Missing the required parameter `request_data` when calling `products_update_attribute_value`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_update_attribute_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/attributes/values/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_update_attributes(self, id, **kwargs):  # noqa: E501
        """Update attributes by id. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_update_attributes(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Attribute (required)
        :param ProductsUpdateAttributesModel body: request_data  

        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_update_attributes_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_update_attributes_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_update_attributes_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update attributes by id. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_update_attributes_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Attribute (required)
        :param ProductsUpdateAttributesModel body: request_data  

        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_update_attributes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_update_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/attributes/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_update_attributes(self, id, **kwargs):  # noqa: E501
        """Update attributes by id. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_update_attributes(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Attribute (required)
        :param list[str] request_data:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_update_attributes_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_update_attributes_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_update_attributes_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update attributes by id. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_update_attributes_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Attribute (required)
        :param list[str] request_data:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_update_attributes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_update_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/attributes/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_update_variant(self, id, **kwargs):  # noqa: E501
        """Put product variants. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_update_variant(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Variant (required)
        :param ProductsUpdateVariantModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_update_variant_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_update_variant_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_update_variant_with_http_info(self, id, **kwargs):  # noqa: E501
        """Put product variants. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_update_variant_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Variant (required)
        :param ProductsUpdateVariantModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_update_variant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_update_variant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/variants/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_update_variant(self, id, **kwargs):  # noqa: E501
        """Put product variants. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_update_variant(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Variant (required)
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_update_variant_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_update_variant_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_update_variant_with_http_info(self, id, **kwargs):  # noqa: E501
        """Put product variants. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_update_variant_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of Variant (required)
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_update_variant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_update_variant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/variants/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_products(self, id, **kwargs):  # noqa: E501
        """Delete product 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_products(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Product ID (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_products_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_products_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def remove_products_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete product 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_products_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Product ID (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_products" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_products`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_products(self, id, **kwargs):  # noqa: E501
        """Get properties of a product object by id 🔐  # noqa: E501

        Return an array with product information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_products(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of product (required)
        :param int includestockdata: Load also information about stock (slower)
        :param bool includesubproducts: Load information about subproducts
        :param bool includeparentid: Load also ID of parent product (if product is a variant of a parent product)
        :param bool includetrans: Load also the translations of product label and description
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_products_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_products_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def retrieve_products_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get properties of a product object by id 🔐  # noqa: E501

        Return an array with product information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_products_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of product (required)
        :param int includestockdata: Load also information about stock (slower)
        :param bool includesubproducts: Load information about subproducts
        :param bool includeparentid: Load also ID of parent product (if product is a variant of a parent product)
        :param bool includetrans: Load also the translations of product label and description
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'includestockdata', 'includesubproducts', 'includeparentid', 'includetrans']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_products" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `retrieve_products`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'includestockdata' in params:
            query_params.append(('includestockdata', params['includestockdata']))  # noqa: E501
        if 'includesubproducts' in params:
            query_params.append(('includesubproducts', params['includesubproducts']))  # noqa: E501
        if 'includeparentid' in params:
            query_params.append(('includeparentid', params['includeparentid']))  # noqa: E501
        if 'includetrans' in params:
            query_params.append(('includetrans', params['includetrans']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_products(self, id, **kwargs):  # noqa: E501
        """Update product. 🔐  # noqa: E501

        Price will be updated by this API only if option is set on \"One price per product\". See other APIs for other price modes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_products(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of product to update (required)
        :param UpdateProductsModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_products_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_products_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_products_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update product. 🔐  # noqa: E501

        Price will be updated by this API only if option is set on \"One price per product\". See other APIs for other price modes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_products_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of product to update (required)
        :param UpdateProductsModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_products" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_products`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_products(self, id, **kwargs):  # noqa: E501
        """Update product. 🔐  # noqa: E501

        Price will be updated by this API only if option is set on \"One price per product\". See other APIs for other price modes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_products(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of product to update (required)
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_products_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_products_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_products_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update product. 🔐  # noqa: E501

        Price will be updated by this API only if option is set on \"One price per product\". See other APIs for other price modes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_products_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of product to update (required)
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_products" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_products`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
