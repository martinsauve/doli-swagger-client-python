# coding: utf-8

"""
    Restler API Explorer

    Live API Documentation  # noqa: E501

    OpenAPI spec version: 1
    Contact: arul@luracast.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DocumentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_documents(self, body, **kwargs):  # noqa: E501
        """Upload a file. üîê  # noqa: E501

         Test sample for invoice: { \"filename\": \"mynewfile.txt\", \"modulepart\": \"invoice\", \"ref\": \"FA1701-001\", \"subdir\": \"\", \"filecontent\": \"content text\", \"fileencoding\": \"\", \"overwriteifexists\": \"0\" }. Test sample for supplier invoice: { \"filename\": \"mynewfile.txt\", \"modulepart\": \"supplier_invoice\", \"ref\": \"FA1701-001\", \"subdir\": \"\", \"filecontent\": \"content text\", \"fileencoding\": \"\", \"overwriteifexists\": \"0\" }. Test sample for medias file: { \"filename\": \"mynewfile.txt\", \"modulepart\": \"medias\", \"ref\": \"\", \"subdir\": \"image/mywebsite\", \"filecontent\": \"Y29udGVudCB0ZXh0Cg==\", \"fileencoding\": \"base64\", \"overwriteifexists\": \"0\" }.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_documents(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateDocumentsModel body: **filename** (required)  
**modulepart** (required)  
ref  
subdir  
filecontent  
fileencoding  
overwriteifexists  
createdirifnotexists  
 (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_documents_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_documents_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_documents_with_http_info(self, body, **kwargs):  # noqa: E501
        """Upload a file. üîê  # noqa: E501

         Test sample for invoice: { \"filename\": \"mynewfile.txt\", \"modulepart\": \"invoice\", \"ref\": \"FA1701-001\", \"subdir\": \"\", \"filecontent\": \"content text\", \"fileencoding\": \"\", \"overwriteifexists\": \"0\" }. Test sample for supplier invoice: { \"filename\": \"mynewfile.txt\", \"modulepart\": \"supplier_invoice\", \"ref\": \"FA1701-001\", \"subdir\": \"\", \"filecontent\": \"content text\", \"fileencoding\": \"\", \"overwriteifexists\": \"0\" }. Test sample for medias file: { \"filename\": \"mynewfile.txt\", \"modulepart\": \"medias\", \"ref\": \"\", \"subdir\": \"image/mywebsite\", \"filecontent\": \"Y29udGVudCB0ZXh0Cg==\", \"fileencoding\": \"base64\", \"overwriteifexists\": \"0\" }.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_documents_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateDocumentsModel body: **filename** (required)  
**modulepart** (required)  
ref  
subdir  
filecontent  
fileencoding  
overwriteifexists  
createdirifnotexists  
 (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_documents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_documents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'filename' in params:
            form_params.append(('filename', params['filename']))  # noqa: E501
        if 'modulepart' in params:
            form_params.append(('modulepart', params['modulepart']))  # noqa: E501
        if 'ref' in params:
            form_params.append(('ref', params['ref']))  # noqa: E501
        if 'subdir' in params:
            form_params.append(('subdir', params['subdir']))  # noqa: E501
        if 'filecontent' in params:
            form_params.append(('filecontent', params['filecontent']))  # noqa: E501
        if 'fileencoding' in params:
            form_params.append(('fileencoding', params['fileencoding']))  # noqa: E501
        if 'overwriteifexists' in params:
            form_params.append(('overwriteifexists', params['overwriteifexists']))  # noqa: E501
        if 'createdirifnotexists' in params:
            form_params.append(('createdirifnotexists', params['createdirifnotexists']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/documents/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_documents(self, filename, modulepart, ref, subdir, filecontent, fileencoding, overwriteifexists, createdirifnotexists, **kwargs):  # noqa: E501
        """Upload a file. üîê  # noqa: E501

         Test sample for invoice: { \"filename\": \"mynewfile.txt\", \"modulepart\": \"invoice\", \"ref\": \"FA1701-001\", \"subdir\": \"\", \"filecontent\": \"content text\", \"fileencoding\": \"\", \"overwriteifexists\": \"0\" }. Test sample for supplier invoice: { \"filename\": \"mynewfile.txt\", \"modulepart\": \"supplier_invoice\", \"ref\": \"FA1701-001\", \"subdir\": \"\", \"filecontent\": \"content text\", \"fileencoding\": \"\", \"overwriteifexists\": \"0\" }. Test sample for medias file: { \"filename\": \"mynewfile.txt\", \"modulepart\": \"medias\", \"ref\": \"\", \"subdir\": \"image/mywebsite\", \"filecontent\": \"Y29udGVudCB0ZXh0Cg==\", \"fileencoding\": \"base64\", \"overwriteifexists\": \"0\" }.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_documents(filename, modulepart, ref, subdir, filecontent, fileencoding, overwriteifexists, createdirifnotexists, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filename: (required)
        :param str modulepart: (required)
        :param str ref: (required)
        :param str subdir: (required)
        :param str filecontent: (required)
        :param str fileencoding: (required)
        :param int overwriteifexists: (required)
        :param int createdirifnotexists: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_documents_with_http_info(filename, modulepart, ref, subdir, filecontent, fileencoding, overwriteifexists, createdirifnotexists, **kwargs)  # noqa: E501
        else:
            (data) = self.create_documents_with_http_info(filename, modulepart, ref, subdir, filecontent, fileencoding, overwriteifexists, createdirifnotexists, **kwargs)  # noqa: E501
            return data

    def create_documents_with_http_info(self, filename, modulepart, ref, subdir, filecontent, fileencoding, overwriteifexists, createdirifnotexists, **kwargs):  # noqa: E501
        """Upload a file. üîê  # noqa: E501

         Test sample for invoice: { \"filename\": \"mynewfile.txt\", \"modulepart\": \"invoice\", \"ref\": \"FA1701-001\", \"subdir\": \"\", \"filecontent\": \"content text\", \"fileencoding\": \"\", \"overwriteifexists\": \"0\" }. Test sample for supplier invoice: { \"filename\": \"mynewfile.txt\", \"modulepart\": \"supplier_invoice\", \"ref\": \"FA1701-001\", \"subdir\": \"\", \"filecontent\": \"content text\", \"fileencoding\": \"\", \"overwriteifexists\": \"0\" }. Test sample for medias file: { \"filename\": \"mynewfile.txt\", \"modulepart\": \"medias\", \"ref\": \"\", \"subdir\": \"image/mywebsite\", \"filecontent\": \"Y29udGVudCB0ZXh0Cg==\", \"fileencoding\": \"base64\", \"overwriteifexists\": \"0\" }.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_documents_with_http_info(filename, modulepart, ref, subdir, filecontent, fileencoding, overwriteifexists, createdirifnotexists, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filename: (required)
        :param str modulepart: (required)
        :param str ref: (required)
        :param str subdir: (required)
        :param str filecontent: (required)
        :param str fileencoding: (required)
        :param int overwriteifexists: (required)
        :param int createdirifnotexists: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filename', 'modulepart', 'ref', 'subdir', 'filecontent', 'fileencoding', 'overwriteifexists', 'createdirifnotexists']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_documents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filename' is set
        if ('filename' not in params or
                params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `create_documents`")  # noqa: E501
        # verify the required parameter 'modulepart' is set
        if ('modulepart' not in params or
                params['modulepart'] is None):
            raise ValueError("Missing the required parameter `modulepart` when calling `create_documents`")  # noqa: E501
        # verify the required parameter 'ref' is set
        if ('ref' not in params or
                params['ref'] is None):
            raise ValueError("Missing the required parameter `ref` when calling `create_documents`")  # noqa: E501
        # verify the required parameter 'subdir' is set
        if ('subdir' not in params or
                params['subdir'] is None):
            raise ValueError("Missing the required parameter `subdir` when calling `create_documents`")  # noqa: E501
        # verify the required parameter 'filecontent' is set
        if ('filecontent' not in params or
                params['filecontent'] is None):
            raise ValueError("Missing the required parameter `filecontent` when calling `create_documents`")  # noqa: E501
        # verify the required parameter 'fileencoding' is set
        if ('fileencoding' not in params or
                params['fileencoding'] is None):
            raise ValueError("Missing the required parameter `fileencoding` when calling `create_documents`")  # noqa: E501
        # verify the required parameter 'overwriteifexists' is set
        if ('overwriteifexists' not in params or
                params['overwriteifexists'] is None):
            raise ValueError("Missing the required parameter `overwriteifexists` when calling `create_documents`")  # noqa: E501
        # verify the required parameter 'createdirifnotexists' is set
        if ('createdirifnotexists' not in params or
                params['createdirifnotexists'] is None):
            raise ValueError("Missing the required parameter `createdirifnotexists` when calling `create_documents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'filename' in params:
            form_params.append(('filename', params['filename']))  # noqa: E501
        if 'modulepart' in params:
            form_params.append(('modulepart', params['modulepart']))  # noqa: E501
        if 'ref' in params:
            form_params.append(('ref', params['ref']))  # noqa: E501
        if 'subdir' in params:
            form_params.append(('subdir', params['subdir']))  # noqa: E501
        if 'filecontent' in params:
            form_params.append(('filecontent', params['filecontent']))  # noqa: E501
        if 'fileencoding' in params:
            form_params.append(('fileencoding', params['fileencoding']))  # noqa: E501
        if 'overwriteifexists' in params:
            form_params.append(('overwriteifexists', params['overwriteifexists']))  # noqa: E501
        if 'createdirifnotexists' in params:
            form_params.append(('createdirifnotexists', params['createdirifnotexists']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/documents/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def documents_builddoc(self, body, **kwargs):  # noqa: E501
        """Build a document. üîê  # noqa: E501

         Test sample 1: { \"modulepart\": \"invoice\", \"original_file\": \"FA1701-001/FA1701-001.pdf\", \"doctemplate\": \"crabe\", \"langcode\": \"fr_FR\" }.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.documents_builddoc(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DocumentsBuilddocModel body: **modulepart** (required)  
original_file  
doctemplate  
langcode  
 (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.documents_builddoc_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.documents_builddoc_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def documents_builddoc_with_http_info(self, body, **kwargs):  # noqa: E501
        """Build a document. üîê  # noqa: E501

         Test sample 1: { \"modulepart\": \"invoice\", \"original_file\": \"FA1701-001/FA1701-001.pdf\", \"doctemplate\": \"crabe\", \"langcode\": \"fr_FR\" }.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.documents_builddoc_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DocumentsBuilddocModel body: **modulepart** (required)  
original_file  
doctemplate  
langcode  
 (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method documents_builddoc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `documents_builddoc`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'modulepart' in params:
            form_params.append(('modulepart', params['modulepart']))  # noqa: E501
        if 'original_file' in params:
            form_params.append(('original_file', params['original_file']))  # noqa: E501
        if 'doctemplate' in params:
            form_params.append(('doctemplate', params['doctemplate']))  # noqa: E501
        if 'langcode' in params:
            form_params.append(('langcode', params['langcode']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/documents/builddoc', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def documents_builddoc(self, modulepart, original_file, doctemplate, langcode, **kwargs):  # noqa: E501
        """Build a document. üîê  # noqa: E501

         Test sample 1: { \"modulepart\": \"invoice\", \"original_file\": \"FA1701-001/FA1701-001.pdf\", \"doctemplate\": \"crabe\", \"langcode\": \"fr_FR\" }.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.documents_builddoc(modulepart, original_file, doctemplate, langcode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modulepart: (required)
        :param str original_file: (required)
        :param str doctemplate: (required)
        :param str langcode: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.documents_builddoc_with_http_info(modulepart, original_file, doctemplate, langcode, **kwargs)  # noqa: E501
        else:
            (data) = self.documents_builddoc_with_http_info(modulepart, original_file, doctemplate, langcode, **kwargs)  # noqa: E501
            return data

    def documents_builddoc_with_http_info(self, modulepart, original_file, doctemplate, langcode, **kwargs):  # noqa: E501
        """Build a document. üîê  # noqa: E501

         Test sample 1: { \"modulepart\": \"invoice\", \"original_file\": \"FA1701-001/FA1701-001.pdf\", \"doctemplate\": \"crabe\", \"langcode\": \"fr_FR\" }.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.documents_builddoc_with_http_info(modulepart, original_file, doctemplate, langcode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modulepart: (required)
        :param str original_file: (required)
        :param str doctemplate: (required)
        :param str langcode: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modulepart', 'original_file', 'doctemplate', 'langcode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method documents_builddoc" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'modulepart' is set
        if ('modulepart' not in params or
                params['modulepart'] is None):
            raise ValueError("Missing the required parameter `modulepart` when calling `documents_builddoc`")  # noqa: E501
        # verify the required parameter 'original_file' is set
        if ('original_file' not in params or
                params['original_file'] is None):
            raise ValueError("Missing the required parameter `original_file` when calling `documents_builddoc`")  # noqa: E501
        # verify the required parameter 'doctemplate' is set
        if ('doctemplate' not in params or
                params['doctemplate'] is None):
            raise ValueError("Missing the required parameter `doctemplate` when calling `documents_builddoc`")  # noqa: E501
        # verify the required parameter 'langcode' is set
        if ('langcode' not in params or
                params['langcode'] is None):
            raise ValueError("Missing the required parameter `langcode` when calling `documents_builddoc`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'modulepart' in params:
            form_params.append(('modulepart', params['modulepart']))  # noqa: E501
        if 'original_file' in params:
            form_params.append(('original_file', params['original_file']))  # noqa: E501
        if 'doctemplate' in params:
            form_params.append(('doctemplate', params['doctemplate']))  # noqa: E501
        if 'langcode' in params:
            form_params.append(('langcode', params['langcode']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/documents/builddoc', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def documents_retrieve_documents_list_by_element(self, modulepart, **kwargs):  # noqa: E501
        """Return the list of documents of a dedicated element (from its ID or Ref) üîê  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.documents_retrieve_documents_list_by_element(modulepart, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modulepart: Name of module or area concerned ('thirdparty', 'member', 'proposal', 'order', 'invoice', 'supplier_invoice', 'shipment', 'project', ...) (required)
        :param int id: ID of element
        :param str ref: Ref of element
        :param str sortfield: Sort criteria ('','fullname','relativename','name','date','size')
        :param str sortorder: Sort order ('asc' or 'desc')
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.documents_retrieve_documents_list_by_element_with_http_info(modulepart, **kwargs)  # noqa: E501
        else:
            (data) = self.documents_retrieve_documents_list_by_element_with_http_info(modulepart, **kwargs)  # noqa: E501
            return data

    def documents_retrieve_documents_list_by_element_with_http_info(self, modulepart, **kwargs):  # noqa: E501
        """Return the list of documents of a dedicated element (from its ID or Ref) üîê  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.documents_retrieve_documents_list_by_element_with_http_info(modulepart, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modulepart: Name of module or area concerned ('thirdparty', 'member', 'proposal', 'order', 'invoice', 'supplier_invoice', 'shipment', 'project', ...) (required)
        :param int id: ID of element
        :param str ref: Ref of element
        :param str sortfield: Sort criteria ('','fullname','relativename','name','date','size')
        :param str sortorder: Sort order ('asc' or 'desc')
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modulepart', 'id', 'ref', 'sortfield', 'sortorder']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method documents_retrieve_documents_list_by_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'modulepart' is set
        if ('modulepart' not in params or
                params['modulepart'] is None):
            raise ValueError("Missing the required parameter `modulepart` when calling `documents_retrieve_documents_list_by_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'modulepart' in params:
            query_params.append(('modulepart', params['modulepart']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'ref' in params:
            query_params.append(('ref', params['ref']))  # noqa: E501
        if 'sortfield' in params:
            query_params.append(('sortfield', params['sortfield']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_documents(self, modulepart, **kwargs):  # noqa: E501
        """Download a document. üîê  # noqa: E501

         Note that, this API is similar to using the wrapper link \"documents.php\" to download a file (used for internal HTML links of documents into application), but with no need to have a session cookie (the token is used instead).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_documents(modulepart, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modulepart: Name of module or area concerned by file download ('facture', ...) (required)
        :param str original_file: Relative path with filename, relative to modulepart (for example: IN201701-999/IN201701-999.pdf)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_documents_with_http_info(modulepart, **kwargs)  # noqa: E501
        else:
            (data) = self.list_documents_with_http_info(modulepart, **kwargs)  # noqa: E501
            return data

    def list_documents_with_http_info(self, modulepart, **kwargs):  # noqa: E501
        """Download a document. üîê  # noqa: E501

         Note that, this API is similar to using the wrapper link \"documents.php\" to download a file (used for internal HTML links of documents into application), but with no need to have a session cookie (the token is used instead).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_documents_with_http_info(modulepart, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modulepart: Name of module or area concerned by file download ('facture', ...) (required)
        :param str original_file: Relative path with filename, relative to modulepart (for example: IN201701-999/IN201701-999.pdf)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modulepart', 'original_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_documents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'modulepart' is set
        if ('modulepart' not in params or
                params['modulepart'] is None):
            raise ValueError("Missing the required parameter `modulepart` when calling `list_documents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'modulepart' in params:
            query_params.append(('modulepart', params['modulepart']))  # noqa: E501
        if 'original_file' in params:
            query_params.append(('original_file', params['original_file']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/documents/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_documents(self, modulepart, original_file, **kwargs):  # noqa: E501
        """Delete a document. üîê  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_documents(modulepart, original_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modulepart: Name of module or area concerned by file download ('product', ...) (required)
        :param str original_file: Relative path with filename, relative to modulepart (for example: PRODUCT-REF-999/IMAGE-999.jpg) (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_documents_with_http_info(modulepart, original_file, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_documents_with_http_info(modulepart, original_file, **kwargs)  # noqa: E501
            return data

    def remove_documents_with_http_info(self, modulepart, original_file, **kwargs):  # noqa: E501
        """Delete a document. üîê  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_documents_with_http_info(modulepart, original_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str modulepart: Name of module or area concerned by file download ('product', ...) (required)
        :param str original_file: Relative path with filename, relative to modulepart (for example: PRODUCT-REF-999/IMAGE-999.jpg) (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modulepart', 'original_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_documents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'modulepart' is set
        if ('modulepart' not in params or
                params['modulepart'] is None):
            raise ValueError("Missing the required parameter `modulepart` when calling `remove_documents`")  # noqa: E501
        # verify the required parameter 'original_file' is set
        if ('original_file' not in params or
                params['original_file'] is None):
            raise ValueError("Missing the required parameter `original_file` when calling `remove_documents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'modulepart' in params:
            query_params.append(('modulepart', params['modulepart']))  # noqa: E501
        if 'original_file' in params:
            query_params.append(('original_file', params['original_file']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/documents', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
