# coding: utf-8

"""
    Restler API Explorer

    Live API Documentation  # noqa: E501

    OpenAPI spec version: 1
    Contact: arul@luracast.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class InvoicesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_invoices(self, **kwargs):  # noqa: E501
        """Create invoice object 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_invoices(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateInvoicesModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_invoices_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_invoices_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_invoices_with_http_info(self, **kwargs):  # noqa: E501
        """Create invoice object 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_invoices_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateInvoicesModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_invoices" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_invoices(self, **kwargs):  # noqa: E501
        """Create invoice object 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_invoices(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_invoices_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_invoices_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_invoices_with_http_info(self, **kwargs):  # noqa: E501
        """Create invoice object 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_invoices_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_invoices" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_add_contact(self, body, id, **kwargs):  # noqa: E501
        """Adds a contact to an invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_add_contact(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InvoicesAddContactModel body: **fk_socpeople** (required)  
**type_contact** (required)  
**source** (required)  
notrigger  
 (required)
        :param int id: Order ID (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_add_contact_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_add_contact_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def invoices_add_contact_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Adds a contact to an invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_add_contact_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InvoicesAddContactModel body: **fk_socpeople** (required)  
**type_contact** (required)  
**source** (required)  
notrigger  
 (required)
        :param int id: Order ID (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_add_contact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `invoices_add_contact`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_add_contact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'fk_socpeople' in params:
            form_params.append(('fk_socpeople', params['fk_socpeople']))  # noqa: E501
        if 'type_contact' in params:
            form_params.append(('type_contact', params['type_contact']))  # noqa: E501
        if 'source' in params:
            form_params.append(('source', params['source']))  # noqa: E501
        if 'notrigger' in params:
            form_params.append(('notrigger', params['notrigger']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}/contacts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_add_contact(self, fk_socpeople, type_contact, source, notrigger, id, **kwargs):  # noqa: E501
        """Adds a contact to an invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_add_contact(fk_socpeople, type_contact, source, notrigger, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fk_socpeople: (required)
        :param str type_contact: (required)
        :param str source: (required)
        :param int notrigger: (required)
        :param int id: Order ID (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_add_contact_with_http_info(fk_socpeople, type_contact, source, notrigger, id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_add_contact_with_http_info(fk_socpeople, type_contact, source, notrigger, id, **kwargs)  # noqa: E501
            return data

    def invoices_add_contact_with_http_info(self, fk_socpeople, type_contact, source, notrigger, id, **kwargs):  # noqa: E501
        """Adds a contact to an invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_add_contact_with_http_info(fk_socpeople, type_contact, source, notrigger, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int fk_socpeople: (required)
        :param str type_contact: (required)
        :param str source: (required)
        :param int notrigger: (required)
        :param int id: Order ID (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fk_socpeople', 'type_contact', 'source', 'notrigger', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_add_contact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fk_socpeople' is set
        if ('fk_socpeople' not in params or
                params['fk_socpeople'] is None):
            raise ValueError("Missing the required parameter `fk_socpeople` when calling `invoices_add_contact`")  # noqa: E501
        # verify the required parameter 'type_contact' is set
        if ('type_contact' not in params or
                params['type_contact'] is None):
            raise ValueError("Missing the required parameter `type_contact` when calling `invoices_add_contact`")  # noqa: E501
        # verify the required parameter 'source' is set
        if ('source' not in params or
                params['source'] is None):
            raise ValueError("Missing the required parameter `source` when calling `invoices_add_contact`")  # noqa: E501
        # verify the required parameter 'notrigger' is set
        if ('notrigger' not in params or
                params['notrigger'] is None):
            raise ValueError("Missing the required parameter `notrigger` when calling `invoices_add_contact`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_add_contact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'fk_socpeople' in params:
            form_params.append(('fk_socpeople', params['fk_socpeople']))  # noqa: E501
        if 'type_contact' in params:
            form_params.append(('type_contact', params['type_contact']))  # noqa: E501
        if 'source' in params:
            form_params.append(('source', params['source']))  # noqa: E501
        if 'notrigger' in params:
            form_params.append(('notrigger', params['notrigger']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}/contacts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_add_payment(self, body, id, **kwargs):  # noqa: E501
        """Add payment line to a specific invoice with the remain to pay as amount. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_add_payment(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InvoicesAddPaymentModel body: **datepaye** (required)  
**paymentid** (required)  
**closepaidinvoices** (required)  
**accountid** (required)  
num_payment  
comment  
chqemetteur  
chqbank  
 (required)
        :param int id: Id of invoice (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_add_payment_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_add_payment_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def invoices_add_payment_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Add payment line to a specific invoice with the remain to pay as amount. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_add_payment_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InvoicesAddPaymentModel body: **datepaye** (required)  
**paymentid** (required)  
**closepaidinvoices** (required)  
**accountid** (required)  
num_payment  
comment  
chqemetteur  
chqbank  
 (required)
        :param int id: Id of invoice (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_add_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `invoices_add_payment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_add_payment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'datepaye' in params:
            form_params.append(('datepaye', params['datepaye']))  # noqa: E501
        if 'paymentid' in params:
            form_params.append(('paymentid', params['paymentid']))  # noqa: E501
        if 'closepaidinvoices' in params:
            form_params.append(('closepaidinvoices', params['closepaidinvoices']))  # noqa: E501
        if 'accountid' in params:
            form_params.append(('accountid', params['accountid']))  # noqa: E501
        if 'num_payment' in params:
            form_params.append(('num_payment', params['num_payment']))  # noqa: E501
        if 'comment' in params:
            form_params.append(('comment', params['comment']))  # noqa: E501
        if 'chqemetteur' in params:
            form_params.append(('chqemetteur', params['chqemetteur']))  # noqa: E501
        if 'chqbank' in params:
            form_params.append(('chqbank', params['chqbank']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}/payments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_add_payment(self, datepaye, paymentid, closepaidinvoices, accountid, num_payment, comment, chqemetteur, chqbank, id, **kwargs):  # noqa: E501
        """Add payment line to a specific invoice with the remain to pay as amount. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_add_payment(datepaye, paymentid, closepaidinvoices, accountid, num_payment, comment, chqemetteur, chqbank, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str datepaye: (required)
        :param int paymentid: (required)
        :param str closepaidinvoices: (required)
        :param int accountid: (required)
        :param str num_payment: (required)
        :param str comment: (required)
        :param str chqemetteur: (required)
        :param str chqbank: (required)
        :param int id: Id of invoice (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_add_payment_with_http_info(datepaye, paymentid, closepaidinvoices, accountid, num_payment, comment, chqemetteur, chqbank, id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_add_payment_with_http_info(datepaye, paymentid, closepaidinvoices, accountid, num_payment, comment, chqemetteur, chqbank, id, **kwargs)  # noqa: E501
            return data

    def invoices_add_payment_with_http_info(self, datepaye, paymentid, closepaidinvoices, accountid, num_payment, comment, chqemetteur, chqbank, id, **kwargs):  # noqa: E501
        """Add payment line to a specific invoice with the remain to pay as amount. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_add_payment_with_http_info(datepaye, paymentid, closepaidinvoices, accountid, num_payment, comment, chqemetteur, chqbank, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str datepaye: (required)
        :param int paymentid: (required)
        :param str closepaidinvoices: (required)
        :param int accountid: (required)
        :param str num_payment: (required)
        :param str comment: (required)
        :param str chqemetteur: (required)
        :param str chqbank: (required)
        :param int id: Id of invoice (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['datepaye', 'paymentid', 'closepaidinvoices', 'accountid', 'num_payment', 'comment', 'chqemetteur', 'chqbank', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_add_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'datepaye' is set
        if ('datepaye' not in params or
                params['datepaye'] is None):
            raise ValueError("Missing the required parameter `datepaye` when calling `invoices_add_payment`")  # noqa: E501
        # verify the required parameter 'paymentid' is set
        if ('paymentid' not in params or
                params['paymentid'] is None):
            raise ValueError("Missing the required parameter `paymentid` when calling `invoices_add_payment`")  # noqa: E501
        # verify the required parameter 'closepaidinvoices' is set
        if ('closepaidinvoices' not in params or
                params['closepaidinvoices'] is None):
            raise ValueError("Missing the required parameter `closepaidinvoices` when calling `invoices_add_payment`")  # noqa: E501
        # verify the required parameter 'accountid' is set
        if ('accountid' not in params or
                params['accountid'] is None):
            raise ValueError("Missing the required parameter `accountid` when calling `invoices_add_payment`")  # noqa: E501
        # verify the required parameter 'num_payment' is set
        if ('num_payment' not in params or
                params['num_payment'] is None):
            raise ValueError("Missing the required parameter `num_payment` when calling `invoices_add_payment`")  # noqa: E501
        # verify the required parameter 'comment' is set
        if ('comment' not in params or
                params['comment'] is None):
            raise ValueError("Missing the required parameter `comment` when calling `invoices_add_payment`")  # noqa: E501
        # verify the required parameter 'chqemetteur' is set
        if ('chqemetteur' not in params or
                params['chqemetteur'] is None):
            raise ValueError("Missing the required parameter `chqemetteur` when calling `invoices_add_payment`")  # noqa: E501
        # verify the required parameter 'chqbank' is set
        if ('chqbank' not in params or
                params['chqbank'] is None):
            raise ValueError("Missing the required parameter `chqbank` when calling `invoices_add_payment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_add_payment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'datepaye' in params:
            form_params.append(('datepaye', params['datepaye']))  # noqa: E501
        if 'paymentid' in params:
            form_params.append(('paymentid', params['paymentid']))  # noqa: E501
        if 'closepaidinvoices' in params:
            form_params.append(('closepaidinvoices', params['closepaidinvoices']))  # noqa: E501
        if 'accountid' in params:
            form_params.append(('accountid', params['accountid']))  # noqa: E501
        if 'num_payment' in params:
            form_params.append(('num_payment', params['num_payment']))  # noqa: E501
        if 'comment' in params:
            form_params.append(('comment', params['comment']))  # noqa: E501
        if 'chqemetteur' in params:
            form_params.append(('chqemetteur', params['chqemetteur']))  # noqa: E501
        if 'chqbank' in params:
            form_params.append(('chqbank', params['chqbank']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}/payments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_add_payment_distributed(self, body, **kwargs):  # noqa: E501
        """Add a payment to pay partially or completely one or several invoices. 🔐  # noqa: E501

        Warning: Take care that all invoices are owned by the same customer. Example of value for parameter arrayofamounts: {\"1\": {\"amount\": \"99.99\", \"multicurrency_amount\": \"\"}, \"2\": {\"amount\": \"\", \"multicurrency_amount\": \"10\"}}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_add_payment_distributed(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InvoicesAddPaymentDistributedModel body: **arrayofamounts** (required)  
**datepaye** (required)  
**paymentid** (required)  
**closepaidinvoices** (required)  
**accountid** (required)  
num_payment  
comment  
chqemetteur  
chqbank  
ref_ext  
accepthigherpayment  
 (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_add_payment_distributed_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_add_payment_distributed_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def invoices_add_payment_distributed_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a payment to pay partially or completely one or several invoices. 🔐  # noqa: E501

        Warning: Take care that all invoices are owned by the same customer. Example of value for parameter arrayofamounts: {\"1\": {\"amount\": \"99.99\", \"multicurrency_amount\": \"\"}, \"2\": {\"amount\": \"\", \"multicurrency_amount\": \"10\"}}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_add_payment_distributed_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param InvoicesAddPaymentDistributedModel body: **arrayofamounts** (required)  
**datepaye** (required)  
**paymentid** (required)  
**closepaidinvoices** (required)  
**accountid** (required)  
num_payment  
comment  
chqemetteur  
chqbank  
ref_ext  
accepthigherpayment  
 (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_add_payment_distributed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `invoices_add_payment_distributed`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'arrayofamounts' in params:
            form_params.append(('arrayofamounts', params['arrayofamounts']))  # noqa: E501
            collection_formats['arrayofamounts'] = 'multi'  # noqa: E501
        if 'datepaye' in params:
            form_params.append(('datepaye', params['datepaye']))  # noqa: E501
        if 'paymentid' in params:
            form_params.append(('paymentid', params['paymentid']))  # noqa: E501
        if 'closepaidinvoices' in params:
            form_params.append(('closepaidinvoices', params['closepaidinvoices']))  # noqa: E501
        if 'accountid' in params:
            form_params.append(('accountid', params['accountid']))  # noqa: E501
        if 'num_payment' in params:
            form_params.append(('num_payment', params['num_payment']))  # noqa: E501
        if 'comment' in params:
            form_params.append(('comment', params['comment']))  # noqa: E501
        if 'chqemetteur' in params:
            form_params.append(('chqemetteur', params['chqemetteur']))  # noqa: E501
        if 'chqbank' in params:
            form_params.append(('chqbank', params['chqbank']))  # noqa: E501
        if 'ref_ext' in params:
            form_params.append(('ref_ext', params['ref_ext']))  # noqa: E501
        if 'accepthigherpayment' in params:
            form_params.append(('accepthigherpayment', params['accepthigherpayment']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/paymentsdistributed', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_add_payment_distributed(self, arrayofamounts, datepaye, paymentid, closepaidinvoices, accountid, num_payment, comment, chqemetteur, chqbank, ref_ext, accepthigherpayment, **kwargs):  # noqa: E501
        """Add a payment to pay partially or completely one or several invoices. 🔐  # noqa: E501

        Warning: Take care that all invoices are owned by the same customer. Example of value for parameter arrayofamounts: {\"1\": {\"amount\": \"99.99\", \"multicurrency_amount\": \"\"}, \"2\": {\"amount\": \"\", \"multicurrency_amount\": \"10\"}}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_add_payment_distributed(arrayofamounts, datepaye, paymentid, closepaidinvoices, accountid, num_payment, comment, chqemetteur, chqbank, ref_ext, accepthigherpayment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] arrayofamounts: (required)
        :param str datepaye: (required)
        :param int paymentid: (required)
        :param str closepaidinvoices: (required)
        :param int accountid: (required)
        :param str num_payment: (required)
        :param str comment: (required)
        :param str chqemetteur: (required)
        :param str chqbank: (required)
        :param str ref_ext: (required)
        :param bool accepthigherpayment: (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_add_payment_distributed_with_http_info(arrayofamounts, datepaye, paymentid, closepaidinvoices, accountid, num_payment, comment, chqemetteur, chqbank, ref_ext, accepthigherpayment, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_add_payment_distributed_with_http_info(arrayofamounts, datepaye, paymentid, closepaidinvoices, accountid, num_payment, comment, chqemetteur, chqbank, ref_ext, accepthigherpayment, **kwargs)  # noqa: E501
            return data

    def invoices_add_payment_distributed_with_http_info(self, arrayofamounts, datepaye, paymentid, closepaidinvoices, accountid, num_payment, comment, chqemetteur, chqbank, ref_ext, accepthigherpayment, **kwargs):  # noqa: E501
        """Add a payment to pay partially or completely one or several invoices. 🔐  # noqa: E501

        Warning: Take care that all invoices are owned by the same customer. Example of value for parameter arrayofamounts: {\"1\": {\"amount\": \"99.99\", \"multicurrency_amount\": \"\"}, \"2\": {\"amount\": \"\", \"multicurrency_amount\": \"10\"}}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_add_payment_distributed_with_http_info(arrayofamounts, datepaye, paymentid, closepaidinvoices, accountid, num_payment, comment, chqemetteur, chqbank, ref_ext, accepthigherpayment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] arrayofamounts: (required)
        :param str datepaye: (required)
        :param int paymentid: (required)
        :param str closepaidinvoices: (required)
        :param int accountid: (required)
        :param str num_payment: (required)
        :param str comment: (required)
        :param str chqemetteur: (required)
        :param str chqbank: (required)
        :param str ref_ext: (required)
        :param bool accepthigherpayment: (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['arrayofamounts', 'datepaye', 'paymentid', 'closepaidinvoices', 'accountid', 'num_payment', 'comment', 'chqemetteur', 'chqbank', 'ref_ext', 'accepthigherpayment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_add_payment_distributed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'arrayofamounts' is set
        if ('arrayofamounts' not in params or
                params['arrayofamounts'] is None):
            raise ValueError("Missing the required parameter `arrayofamounts` when calling `invoices_add_payment_distributed`")  # noqa: E501
        # verify the required parameter 'datepaye' is set
        if ('datepaye' not in params or
                params['datepaye'] is None):
            raise ValueError("Missing the required parameter `datepaye` when calling `invoices_add_payment_distributed`")  # noqa: E501
        # verify the required parameter 'paymentid' is set
        if ('paymentid' not in params or
                params['paymentid'] is None):
            raise ValueError("Missing the required parameter `paymentid` when calling `invoices_add_payment_distributed`")  # noqa: E501
        # verify the required parameter 'closepaidinvoices' is set
        if ('closepaidinvoices' not in params or
                params['closepaidinvoices'] is None):
            raise ValueError("Missing the required parameter `closepaidinvoices` when calling `invoices_add_payment_distributed`")  # noqa: E501
        # verify the required parameter 'accountid' is set
        if ('accountid' not in params or
                params['accountid'] is None):
            raise ValueError("Missing the required parameter `accountid` when calling `invoices_add_payment_distributed`")  # noqa: E501
        # verify the required parameter 'num_payment' is set
        if ('num_payment' not in params or
                params['num_payment'] is None):
            raise ValueError("Missing the required parameter `num_payment` when calling `invoices_add_payment_distributed`")  # noqa: E501
        # verify the required parameter 'comment' is set
        if ('comment' not in params or
                params['comment'] is None):
            raise ValueError("Missing the required parameter `comment` when calling `invoices_add_payment_distributed`")  # noqa: E501
        # verify the required parameter 'chqemetteur' is set
        if ('chqemetteur' not in params or
                params['chqemetteur'] is None):
            raise ValueError("Missing the required parameter `chqemetteur` when calling `invoices_add_payment_distributed`")  # noqa: E501
        # verify the required parameter 'chqbank' is set
        if ('chqbank' not in params or
                params['chqbank'] is None):
            raise ValueError("Missing the required parameter `chqbank` when calling `invoices_add_payment_distributed`")  # noqa: E501
        # verify the required parameter 'ref_ext' is set
        if ('ref_ext' not in params or
                params['ref_ext'] is None):
            raise ValueError("Missing the required parameter `ref_ext` when calling `invoices_add_payment_distributed`")  # noqa: E501
        # verify the required parameter 'accepthigherpayment' is set
        if ('accepthigherpayment' not in params or
                params['accepthigherpayment'] is None):
            raise ValueError("Missing the required parameter `accepthigherpayment` when calling `invoices_add_payment_distributed`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'arrayofamounts' in params:
            form_params.append(('arrayofamounts', params['arrayofamounts']))  # noqa: E501
            collection_formats['arrayofamounts'] = 'multi'  # noqa: E501
        if 'datepaye' in params:
            form_params.append(('datepaye', params['datepaye']))  # noqa: E501
        if 'paymentid' in params:
            form_params.append(('paymentid', params['paymentid']))  # noqa: E501
        if 'closepaidinvoices' in params:
            form_params.append(('closepaidinvoices', params['closepaidinvoices']))  # noqa: E501
        if 'accountid' in params:
            form_params.append(('accountid', params['accountid']))  # noqa: E501
        if 'num_payment' in params:
            form_params.append(('num_payment', params['num_payment']))  # noqa: E501
        if 'comment' in params:
            form_params.append(('comment', params['comment']))  # noqa: E501
        if 'chqemetteur' in params:
            form_params.append(('chqemetteur', params['chqemetteur']))  # noqa: E501
        if 'chqbank' in params:
            form_params.append(('chqbank', params['chqbank']))  # noqa: E501
        if 'ref_ext' in params:
            form_params.append(('ref_ext', params['ref_ext']))  # noqa: E501
        if 'accepthigherpayment' in params:
            form_params.append(('accepthigherpayment', params['accepthigherpayment']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/paymentsdistributed', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_create_contact(self, id, contactid, type, **kwargs):  # noqa: E501
        """Add a contact type of given invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_create_contact(id, contactid, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice to update (required)
        :param int contactid: Id of contact to add (required)
        :param str type: Type of the contact (BILLING, SHIPPING, CUSTOMER) (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_create_contact_with_http_info(id, contactid, type, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_create_contact_with_http_info(id, contactid, type, **kwargs)  # noqa: E501
            return data

    def invoices_create_contact_with_http_info(self, id, contactid, type, **kwargs):  # noqa: E501
        """Add a contact type of given invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_create_contact_with_http_info(id, contactid, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice to update (required)
        :param int contactid: Id of contact to add (required)
        :param str type: Type of the contact (BILLING, SHIPPING, CUSTOMER) (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'contactid', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_create_contact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_create_contact`")  # noqa: E501
        # verify the required parameter 'contactid' is set
        if ('contactid' not in params or
                params['contactid'] is None):
            raise ValueError("Missing the required parameter `contactid` when calling `invoices_create_contact`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `invoices_create_contact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'contactid' in params:
            path_params['contactid'] = params['contactid']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}/contact/{contactid}/{type}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_create_invoice_from_order(self, orderid, **kwargs):  # noqa: E501
        """Create an invoice using an existing order. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_create_invoice_from_order(orderid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int orderid: Id of the order (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_create_invoice_from_order_with_http_info(orderid, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_create_invoice_from_order_with_http_info(orderid, **kwargs)  # noqa: E501
            return data

    def invoices_create_invoice_from_order_with_http_info(self, orderid, **kwargs):  # noqa: E501
        """Create an invoice using an existing order. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_create_invoice_from_order_with_http_info(orderid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int orderid: Id of the order (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orderid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_create_invoice_from_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orderid' is set
        if ('orderid' not in params or
                params['orderid'] is None):
            raise ValueError("Missing the required parameter `orderid` when calling `invoices_create_invoice_from_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'orderid' in params:
            path_params['orderid'] = params['orderid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/createfromorder/{orderid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_create_line(self, id, **kwargs):  # noqa: E501
        """Add a line to a given invoice 🔐  # noqa: E501

        Exemple of POST query : { \"desc\": \"Desc\", \"subprice\": \"1.00000000\", \"qty\": \"1\", \"tva_tx\": \"20.000\", \"localtax1_tx\": \"0.000\", \"localtax2_tx\": \"0.000\", \"fk_product\": \"1\", \"remise_percent\": \"0\", \"date_start\": \"\", \"date_end\": \"\", \"fk_code_ventilation\": 0, \"info_bits\": \"0\", \"fk_remise_except\": null, \"product_type\": \"1\", \"rang\": \"-1\", \"special_code\": \"0\", \"fk_parent_line\": null, \"fk_fournprice\": null, \"pa_ht\": \"0.00000000\", \"label\": \"\", \"array_options\": [], \"situation_percent\": \"100\", \"fk_prev_id\": null, \"fk_unit\": null }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_create_line(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice (required)
        :param InvoicesCreateLineModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_create_line_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_create_line_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_create_line_with_http_info(self, id, **kwargs):  # noqa: E501
        """Add a line to a given invoice 🔐  # noqa: E501

        Exemple of POST query : { \"desc\": \"Desc\", \"subprice\": \"1.00000000\", \"qty\": \"1\", \"tva_tx\": \"20.000\", \"localtax1_tx\": \"0.000\", \"localtax2_tx\": \"0.000\", \"fk_product\": \"1\", \"remise_percent\": \"0\", \"date_start\": \"\", \"date_end\": \"\", \"fk_code_ventilation\": 0, \"info_bits\": \"0\", \"fk_remise_except\": null, \"product_type\": \"1\", \"rang\": \"-1\", \"special_code\": \"0\", \"fk_parent_line\": null, \"fk_fournprice\": null, \"pa_ht\": \"0.00000000\", \"label\": \"\", \"array_options\": [], \"situation_percent\": \"100\", \"fk_prev_id\": null, \"fk_unit\": null }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_create_line_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice (required)
        :param InvoicesCreateLineModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_create_line" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_create_line`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}/lines', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_create_line(self, id, **kwargs):  # noqa: E501
        """Add a line to a given invoice 🔐  # noqa: E501

        Exemple of POST query : { \"desc\": \"Desc\", \"subprice\": \"1.00000000\", \"qty\": \"1\", \"tva_tx\": \"20.000\", \"localtax1_tx\": \"0.000\", \"localtax2_tx\": \"0.000\", \"fk_product\": \"1\", \"remise_percent\": \"0\", \"date_start\": \"\", \"date_end\": \"\", \"fk_code_ventilation\": 0, \"info_bits\": \"0\", \"fk_remise_except\": null, \"product_type\": \"1\", \"rang\": \"-1\", \"special_code\": \"0\", \"fk_parent_line\": null, \"fk_fournprice\": null, \"pa_ht\": \"0.00000000\", \"label\": \"\", \"array_options\": [], \"situation_percent\": \"100\", \"fk_prev_id\": null, \"fk_unit\": null }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_create_line(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice (required)
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_create_line_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_create_line_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_create_line_with_http_info(self, id, **kwargs):  # noqa: E501
        """Add a line to a given invoice 🔐  # noqa: E501

        Exemple of POST query : { \"desc\": \"Desc\", \"subprice\": \"1.00000000\", \"qty\": \"1\", \"tva_tx\": \"20.000\", \"localtax1_tx\": \"0.000\", \"localtax2_tx\": \"0.000\", \"fk_product\": \"1\", \"remise_percent\": \"0\", \"date_start\": \"\", \"date_end\": \"\", \"fk_code_ventilation\": 0, \"info_bits\": \"0\", \"fk_remise_except\": null, \"product_type\": \"1\", \"rang\": \"-1\", \"special_code\": \"0\", \"fk_parent_line\": null, \"fk_fournprice\": null, \"pa_ht\": \"0.00000000\", \"label\": \"\", \"array_options\": [], \"situation_percent\": \"100\", \"fk_prev_id\": null, \"fk_unit\": null }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_create_line_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice (required)
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_create_line" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_create_line`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}/lines', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_mark_as_credit_available(self, id, **kwargs):  # noqa: E501
        """Create a discount (credit available) for a credit note or a deposit. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_mark_as_credit_available(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Invoice ID (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_mark_as_credit_available_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_mark_as_credit_available_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_mark_as_credit_available_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create a discount (credit available) for a credit note or a deposit. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_mark_as_credit_available_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Invoice ID (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_mark_as_credit_available" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_mark_as_credit_available`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}/markAsCreditAvailable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_remove_contact(self, id, contactid, type, **kwargs):  # noqa: E501
        """Delete a contact type of given invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_remove_contact(id, contactid, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice to update (required)
        :param int contactid: Row key of the contact in the array contact_ids. (required)
        :param str type: Type of the contact (BILLING, SHIPPING, CUSTOMER). (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_remove_contact_with_http_info(id, contactid, type, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_remove_contact_with_http_info(id, contactid, type, **kwargs)  # noqa: E501
            return data

    def invoices_remove_contact_with_http_info(self, id, contactid, type, **kwargs):  # noqa: E501
        """Delete a contact type of given invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_remove_contact_with_http_info(id, contactid, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice to update (required)
        :param int contactid: Row key of the contact in the array contact_ids. (required)
        :param str type: Type of the contact (BILLING, SHIPPING, CUSTOMER). (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'contactid', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_remove_contact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_remove_contact`")  # noqa: E501
        # verify the required parameter 'contactid' is set
        if ('contactid' not in params or
                params['contactid'] is None):
            raise ValueError("Missing the required parameter `contactid` when calling `invoices_remove_contact`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `invoices_remove_contact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'contactid' in params:
            path_params['contactid'] = params['contactid']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}/contact/{contactid}/{type}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_remove_line(self, id, lineid, **kwargs):  # noqa: E501
        """Deletes a line of a given invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_remove_line(id, lineid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice (required)
        :param int lineid: Id of the line to delete (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_remove_line_with_http_info(id, lineid, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_remove_line_with_http_info(id, lineid, **kwargs)  # noqa: E501
            return data

    def invoices_remove_line_with_http_info(self, id, lineid, **kwargs):  # noqa: E501
        """Deletes a line of a given invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_remove_line_with_http_info(id, lineid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice (required)
        :param int lineid: Id of the line to delete (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'lineid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_remove_line" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_remove_line`")  # noqa: E501
        # verify the required parameter 'lineid' is set
        if ('lineid' not in params or
                params['lineid'] is None):
            raise ValueError("Missing the required parameter `lineid` when calling `invoices_remove_line`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'lineid' in params:
            path_params['lineid'] = params['lineid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}/lines/{lineid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_retrieve_by_ref(self, ref, **kwargs):  # noqa: E501
        """Get properties of an invoice object by ref 🔐  # noqa: E501

        Return an array with invoice informations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_retrieve_by_ref(ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ref: Ref of object (required)
        :param int contact_list: 0: Returned array of contacts/addresses contains all properties, 1: Return array contains just id
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_retrieve_by_ref_with_http_info(ref, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_retrieve_by_ref_with_http_info(ref, **kwargs)  # noqa: E501
            return data

    def invoices_retrieve_by_ref_with_http_info(self, ref, **kwargs):  # noqa: E501
        """Get properties of an invoice object by ref 🔐  # noqa: E501

        Return an array with invoice informations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_retrieve_by_ref_with_http_info(ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ref: Ref of object (required)
        :param int contact_list: 0: Returned array of contacts/addresses contains all properties, 1: Return array contains just id
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ref', 'contact_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_retrieve_by_ref" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ref' is set
        if ('ref' not in params or
                params['ref'] is None):
            raise ValueError("Missing the required parameter `ref` when calling `invoices_retrieve_by_ref`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ref' in params:
            path_params['ref'] = params['ref']  # noqa: E501

        query_params = []
        if 'contact_list' in params:
            query_params.append(('contact_list', params['contact_list']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/ref/{ref}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_retrieve_by_ref_ext(self, ref_ext, **kwargs):  # noqa: E501
        """Get properties of an invoice object by ref_ext 🔐  # noqa: E501

        Return an array with invoice informations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_retrieve_by_ref_ext(ref_ext, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ref_ext: External reference of object (required)
        :param int contact_list: 0: Returned array of contacts/addresses contains all properties, 1: Return array contains just id
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_retrieve_by_ref_ext_with_http_info(ref_ext, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_retrieve_by_ref_ext_with_http_info(ref_ext, **kwargs)  # noqa: E501
            return data

    def invoices_retrieve_by_ref_ext_with_http_info(self, ref_ext, **kwargs):  # noqa: E501
        """Get properties of an invoice object by ref_ext 🔐  # noqa: E501

        Return an array with invoice informations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_retrieve_by_ref_ext_with_http_info(ref_ext, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ref_ext: External reference of object (required)
        :param int contact_list: 0: Returned array of contacts/addresses contains all properties, 1: Return array contains just id
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ref_ext', 'contact_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_retrieve_by_ref_ext" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ref_ext' is set
        if ('ref_ext' not in params or
                params['ref_ext'] is None):
            raise ValueError("Missing the required parameter `ref_ext` when calling `invoices_retrieve_by_ref_ext`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ref_ext' in params:
            path_params['ref_ext'] = params['ref_ext']  # noqa: E501

        query_params = []
        if 'contact_list' in params:
            query_params.append(('contact_list', params['contact_list']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/ref_ext/{ref_ext}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_retrieve_discount(self, id, **kwargs):  # noqa: E501
        """Get discount from invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_retrieve_discount(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_retrieve_discount_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_retrieve_discount_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_retrieve_discount_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get discount from invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_retrieve_discount_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_retrieve_discount" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_retrieve_discount`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}/discount', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_retrieve_lines(self, id, **kwargs):  # noqa: E501
        """Get lines of an invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_retrieve_lines(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_retrieve_lines_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_retrieve_lines_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_retrieve_lines_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get lines of an invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_retrieve_lines_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_retrieve_lines" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_retrieve_lines`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}/lines', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_retrieve_payments(self, id, **kwargs):  # noqa: E501
        """Get list of payments of a given invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_retrieve_payments(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_retrieve_payments_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_retrieve_payments_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_retrieve_payments_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get list of payments of a given invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_retrieve_payments_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_retrieve_payments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_retrieve_payments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}/payments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_settodraft(self, id, **kwargs):  # noqa: E501
        """Sets an invoice as draft 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_settodraft(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Order ID (required)
        :param InvoicesSettodraftModel body: idwarehouse  

        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_settodraft_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_settodraft_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_settodraft_with_http_info(self, id, **kwargs):  # noqa: E501
        """Sets an invoice as draft 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_settodraft_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Order ID (required)
        :param InvoicesSettodraftModel body: idwarehouse  

        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_settodraft" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_settodraft`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'idwarehouse' in params:
            form_params.append(('idwarehouse', params['idwarehouse']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}/settodraft', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_settodraft(self, id, **kwargs):  # noqa: E501
        """Sets an invoice as draft 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_settodraft(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Order ID (required)
        :param int idwarehouse:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_settodraft_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_settodraft_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_settodraft_with_http_info(self, id, **kwargs):  # noqa: E501
        """Sets an invoice as draft 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_settodraft_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Order ID (required)
        :param int idwarehouse:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'idwarehouse']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_settodraft" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_settodraft`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'idwarehouse' in params:
            form_params.append(('idwarehouse', params['idwarehouse']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}/settodraft', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_settopaid(self, id, **kwargs):  # noqa: E501
        """Sets an invoice as paid 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_settopaid(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Order ID (required)
        :param InvoicesSettopaidModel body: close_code  
close_note  

        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_settopaid_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_settopaid_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_settopaid_with_http_info(self, id, **kwargs):  # noqa: E501
        """Sets an invoice as paid 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_settopaid_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Order ID (required)
        :param InvoicesSettopaidModel body: close_code  
close_note  

        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_settopaid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_settopaid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'close_code' in params:
            form_params.append(('close_code', params['close_code']))  # noqa: E501
        if 'close_note' in params:
            form_params.append(('close_note', params['close_note']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}/settopaid', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_settopaid(self, id, **kwargs):  # noqa: E501
        """Sets an invoice as paid 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_settopaid(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Order ID (required)
        :param str close_code:
        :param str close_note:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_settopaid_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_settopaid_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_settopaid_with_http_info(self, id, **kwargs):  # noqa: E501
        """Sets an invoice as paid 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_settopaid_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Order ID (required)
        :param str close_code:
        :param str close_note:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'close_code', 'close_note']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_settopaid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_settopaid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'close_code' in params:
            form_params.append(('close_code', params['close_code']))  # noqa: E501
        if 'close_note' in params:
            form_params.append(('close_note', params['close_note']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}/settopaid', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_settounpaid(self, id, **kwargs):  # noqa: E501
        """Sets an invoice as unpaid 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_settounpaid(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Order ID (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_settounpaid_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_settounpaid_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_settounpaid_with_http_info(self, id, **kwargs):  # noqa: E501
        """Sets an invoice as unpaid 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_settounpaid_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Order ID (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_settounpaid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_settounpaid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}/settounpaid', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_update_line(self, id, lineid, **kwargs):  # noqa: E501
        """Update a line to a given invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_update_line(id, lineid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice to update (required)
        :param int lineid: Id of line to update (required)
        :param InvoicesUpdateLineModel body: request_data  

        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_update_line_with_http_info(id, lineid, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_update_line_with_http_info(id, lineid, **kwargs)  # noqa: E501
            return data

    def invoices_update_line_with_http_info(self, id, lineid, **kwargs):  # noqa: E501
        """Update a line to a given invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_update_line_with_http_info(id, lineid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice to update (required)
        :param int lineid: Id of line to update (required)
        :param InvoicesUpdateLineModel body: request_data  

        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'lineid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_update_line" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_update_line`")  # noqa: E501
        # verify the required parameter 'lineid' is set
        if ('lineid' not in params or
                params['lineid'] is None):
            raise ValueError("Missing the required parameter `lineid` when calling `invoices_update_line`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'lineid' in params:
            path_params['lineid'] = params['lineid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}/lines/{lineid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_update_line(self, id, lineid, **kwargs):  # noqa: E501
        """Update a line to a given invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_update_line(id, lineid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice to update (required)
        :param int lineid: Id of line to update (required)
        :param list[str] request_data:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_update_line_with_http_info(id, lineid, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_update_line_with_http_info(id, lineid, **kwargs)  # noqa: E501
            return data

    def invoices_update_line_with_http_info(self, id, lineid, **kwargs):  # noqa: E501
        """Update a line to a given invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_update_line_with_http_info(id, lineid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice to update (required)
        :param int lineid: Id of line to update (required)
        :param list[str] request_data:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'lineid', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_update_line" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_update_line`")  # noqa: E501
        # verify the required parameter 'lineid' is set
        if ('lineid' not in params or
                params['lineid'] is None):
            raise ValueError("Missing the required parameter `lineid` when calling `invoices_update_line`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'lineid' in params:
            path_params['lineid'] = params['lineid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}/lines/{lineid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_update_payment(self, id, **kwargs):  # noqa: E501
        """Update a payment 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_update_payment(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of payment (required)
        :param InvoicesUpdatePaymentModel body: num_payment  

        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_update_payment_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_update_payment_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_update_payment_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a payment 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_update_payment_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of payment (required)
        :param InvoicesUpdatePaymentModel body: num_payment  

        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_update_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_update_payment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'num_payment' in params:
            form_params.append(('num_payment', params['num_payment']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/payments/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_update_payment(self, id, **kwargs):  # noqa: E501
        """Update a payment 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_update_payment(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of payment (required)
        :param str num_payment:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_update_payment_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_update_payment_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_update_payment_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a payment 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_update_payment_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of payment (required)
        :param str num_payment:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'num_payment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_update_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_update_payment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'num_payment' in params:
            form_params.append(('num_payment', params['num_payment']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/payments/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_use_credit_note(self, id, discountid, **kwargs):  # noqa: E501
        """Add an available credit note discount to payments of an existing invoice. 🔐  # noqa: E501

         Note that this consume the credit note.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_use_credit_note(id, discountid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice (required)
        :param int discountid: Id of a discount coming from a credit note (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_use_credit_note_with_http_info(id, discountid, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_use_credit_note_with_http_info(id, discountid, **kwargs)  # noqa: E501
            return data

    def invoices_use_credit_note_with_http_info(self, id, discountid, **kwargs):  # noqa: E501
        """Add an available credit note discount to payments of an existing invoice. 🔐  # noqa: E501

         Note that this consume the credit note.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_use_credit_note_with_http_info(id, discountid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice (required)
        :param int discountid: Id of a discount coming from a credit note (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'discountid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_use_credit_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_use_credit_note`")  # noqa: E501
        # verify the required parameter 'discountid' is set
        if ('discountid' not in params or
                params['discountid'] is None):
            raise ValueError("Missing the required parameter `discountid` when calling `invoices_use_credit_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'discountid' in params:
            path_params['discountid'] = params['discountid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}/usecreditnote/{discountid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_use_discount(self, id, discountid, **kwargs):  # noqa: E501
        """Add a discount line into an invoice (as an invoice line) using an existing absolute discount 🔐  # noqa: E501

        Note that this consume the discount.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_use_discount(id, discountid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice (required)
        :param int discountid: Id of discount (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_use_discount_with_http_info(id, discountid, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_use_discount_with_http_info(id, discountid, **kwargs)  # noqa: E501
            return data

    def invoices_use_discount_with_http_info(self, id, discountid, **kwargs):  # noqa: E501
        """Add a discount line into an invoice (as an invoice line) using an existing absolute discount 🔐  # noqa: E501

        Note that this consume the discount.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_use_discount_with_http_info(id, discountid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice (required)
        :param int discountid: Id of discount (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'discountid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_use_discount" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_use_discount`")  # noqa: E501
        # verify the required parameter 'discountid' is set
        if ('discountid' not in params or
                params['discountid'] is None):
            raise ValueError("Missing the required parameter `discountid` when calling `invoices_use_discount`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'discountid' in params:
            path_params['discountid'] = params['discountid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}/usediscount/{discountid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_validate(self, id, **kwargs):  # noqa: E501
        """Validate an invoice 🔐  # noqa: E501

        If you get a bad value for param notrigger check that ou provide this in body { \"idwarehouse\": 0, \"notrigger\": 0 }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_validate(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Invoice ID (required)
        :param InvoicesValidateModel body: idwarehouse  
notrigger  

        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_validate_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_validate_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_validate_with_http_info(self, id, **kwargs):  # noqa: E501
        """Validate an invoice 🔐  # noqa: E501

        If you get a bad value for param notrigger check that ou provide this in body { \"idwarehouse\": 0, \"notrigger\": 0 }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_validate_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Invoice ID (required)
        :param InvoicesValidateModel body: idwarehouse  
notrigger  

        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_validate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_validate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'idwarehouse' in params:
            form_params.append(('idwarehouse', params['idwarehouse']))  # noqa: E501
        if 'notrigger' in params:
            form_params.append(('notrigger', params['notrigger']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_validate(self, id, **kwargs):  # noqa: E501
        """Validate an invoice 🔐  # noqa: E501

        If you get a bad value for param notrigger check that ou provide this in body { \"idwarehouse\": 0, \"notrigger\": 0 }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_validate(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Invoice ID (required)
        :param int idwarehouse:
        :param int notrigger:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_validate_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_validate_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_validate_with_http_info(self, id, **kwargs):  # noqa: E501
        """Validate an invoice 🔐  # noqa: E501

        If you get a bad value for param notrigger check that ou provide this in body { \"idwarehouse\": 0, \"notrigger\": 0 }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_validate_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Invoice ID (required)
        :param int idwarehouse:
        :param int notrigger:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'idwarehouse', 'notrigger']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_validate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_validate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'idwarehouse' in params:
            form_params.append(('idwarehouse', params['idwarehouse']))  # noqa: E501
        if 'notrigger' in params:
            form_params.append(('notrigger', params['notrigger']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_invoices(self, **kwargs):  # noqa: E501
        """List invoices 🔐  # noqa: E501

        Get a list of invoices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_invoices(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :param int limit: Limit for list
        :param int page: Page number
        :param str thirdparty_ids: Thirdparty ids to filter orders of (example '1' or '1,2,3')
        :param str status: Filter by invoice status : draft | unpaid | paid | cancelled
        :param str sqlfilters: Other criteria to filter answers separated by a comma. Syntax example \"(t.ref:like:'SO-%') and (t.date_creation:<:'20160101')\"
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_invoices_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_invoices_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_invoices_with_http_info(self, **kwargs):  # noqa: E501
        """List invoices 🔐  # noqa: E501

        Get a list of invoices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_invoices_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :param int limit: Limit for list
        :param int page: Page number
        :param str thirdparty_ids: Thirdparty ids to filter orders of (example '1' or '1,2,3')
        :param str status: Filter by invoice status : draft | unpaid | paid | cancelled
        :param str sqlfilters: Other criteria to filter answers separated by a comma. Syntax example \"(t.ref:like:'SO-%') and (t.date_creation:<:'20160101')\"
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sortfield', 'sortorder', 'limit', 'page', 'thirdparty_ids', 'status', 'sqlfilters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_invoices" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sortfield' in params:
            query_params.append(('sortfield', params['sortfield']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'thirdparty_ids' in params:
            query_params.append(('thirdparty_ids', params['thirdparty_ids']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'sqlfilters' in params:
            query_params.append(('sqlfilters', params['sqlfilters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_invoices(self, id, **kwargs):  # noqa: E501
        """Delete invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_invoices(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Invoice ID (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_invoices_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_invoices_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def remove_invoices_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_invoices_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Invoice ID (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_invoices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_invoices`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_invoices(self, id, **kwargs):  # noqa: E501
        """Get properties of a invoice object 🔐  # noqa: E501

        Return an array with invoice informations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_invoices(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of invoice (required)
        :param int contact_list: 0:Return array contains all properties, 1:Return array contains just id
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_invoices_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_invoices_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def retrieve_invoices_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get properties of a invoice object 🔐  # noqa: E501

        Return an array with invoice informations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_invoices_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of invoice (required)
        :param int contact_list: 0:Return array contains all properties, 1:Return array contains just id
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'contact_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_invoices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `retrieve_invoices`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'contact_list' in params:
            query_params.append(('contact_list', params['contact_list']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_invoices(self, id, **kwargs):  # noqa: E501
        """Update invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_invoices(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice to update (required)
        :param UpdateInvoicesModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_invoices_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_invoices_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_invoices_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_invoices_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice to update (required)
        :param UpdateInvoicesModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_invoices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_invoices`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_invoices(self, id, **kwargs):  # noqa: E501
        """Update invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_invoices(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice to update (required)
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_invoices_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_invoices_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_invoices_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update invoice 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_invoices_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of invoice to update (required)
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_invoices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_invoices`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
