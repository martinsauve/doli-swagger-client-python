# coding: utf-8

"""
    Restler API Explorer

    Live API Documentation  # noqa: E501

    OpenAPI spec version: 1
    Contact: arul@luracast.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BankaccountsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bankaccounts_add_line(self, body, id, **kwargs):  # noqa: E501
        """Add a line to an account 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankaccounts_add_line(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BankaccountsAddLineModel body: **date** (required)  
**type** (required)  
**label** (required)  
**amount** (required)  
category  
cheque_number  
cheque_writer  
cheque_bank  
accountancycode  
datev  
num_releve  
 (required)
        :param int id: ID of account (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bankaccounts_add_line_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bankaccounts_add_line_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def bankaccounts_add_line_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Add a line to an account 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankaccounts_add_line_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BankaccountsAddLineModel body: **date** (required)  
**type** (required)  
**label** (required)  
**amount** (required)  
category  
cheque_number  
cheque_writer  
cheque_bank  
accountancycode  
datev  
num_releve  
 (required)
        :param int id: ID of account (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bankaccounts_add_line" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bankaccounts_add_line`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bankaccounts_add_line`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if '_date' in params:
            form_params.append(('date', params['_date']))  # noqa: E501
        if 'type' in params:
            form_params.append(('type', params['type']))  # noqa: E501
        if 'label' in params:
            form_params.append(('label', params['label']))  # noqa: E501
        if 'amount' in params:
            form_params.append(('amount', params['amount']))  # noqa: E501
        if 'category' in params:
            form_params.append(('category', params['category']))  # noqa: E501
        if 'cheque_number' in params:
            form_params.append(('cheque_number', params['cheque_number']))  # noqa: E501
        if 'cheque_writer' in params:
            form_params.append(('cheque_writer', params['cheque_writer']))  # noqa: E501
        if 'cheque_bank' in params:
            form_params.append(('cheque_bank', params['cheque_bank']))  # noqa: E501
        if 'accountancycode' in params:
            form_params.append(('accountancycode', params['accountancycode']))  # noqa: E501
        if 'datev' in params:
            form_params.append(('datev', params['datev']))  # noqa: E501
        if 'num_releve' in params:
            form_params.append(('num_releve', params['num_releve']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/bankaccounts/{id}/lines', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bankaccounts_add_line(self, _date, type, label, amount, category, cheque_number, cheque_writer, cheque_bank, accountancycode, datev, num_releve, id, **kwargs):  # noqa: E501
        """Add a line to an account 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankaccounts_add_line(_date, type, label, amount, category, cheque_number, cheque_writer, cheque_bank, accountancycode, datev, num_releve, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date: (required)
        :param str type: (required)
        :param str label: (required)
        :param float amount: (required)
        :param int category: (required)
        :param str cheque_number: (required)
        :param str cheque_writer: (required)
        :param str cheque_bank: (required)
        :param str accountancycode: (required)
        :param str datev: (required)
        :param str num_releve: (required)
        :param int id: ID of account (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bankaccounts_add_line_with_http_info(_date, type, label, amount, category, cheque_number, cheque_writer, cheque_bank, accountancycode, datev, num_releve, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bankaccounts_add_line_with_http_info(_date, type, label, amount, category, cheque_number, cheque_writer, cheque_bank, accountancycode, datev, num_releve, id, **kwargs)  # noqa: E501
            return data

    def bankaccounts_add_line_with_http_info(self, _date, type, label, amount, category, cheque_number, cheque_writer, cheque_bank, accountancycode, datev, num_releve, id, **kwargs):  # noqa: E501
        """Add a line to an account 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankaccounts_add_line_with_http_info(_date, type, label, amount, category, cheque_number, cheque_writer, cheque_bank, accountancycode, datev, num_releve, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date: (required)
        :param str type: (required)
        :param str label: (required)
        :param float amount: (required)
        :param int category: (required)
        :param str cheque_number: (required)
        :param str cheque_writer: (required)
        :param str cheque_bank: (required)
        :param str accountancycode: (required)
        :param str datev: (required)
        :param str num_releve: (required)
        :param int id: ID of account (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date', 'type', 'label', 'amount', 'category', 'cheque_number', 'cheque_writer', 'cheque_bank', 'accountancycode', 'datev', 'num_releve', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bankaccounts_add_line" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `bankaccounts_add_line`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `bankaccounts_add_line`")  # noqa: E501
        # verify the required parameter 'label' is set
        if ('label' not in params or
                params['label'] is None):
            raise ValueError("Missing the required parameter `label` when calling `bankaccounts_add_line`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `bankaccounts_add_line`")  # noqa: E501
        # verify the required parameter 'category' is set
        if ('category' not in params or
                params['category'] is None):
            raise ValueError("Missing the required parameter `category` when calling `bankaccounts_add_line`")  # noqa: E501
        # verify the required parameter 'cheque_number' is set
        if ('cheque_number' not in params or
                params['cheque_number'] is None):
            raise ValueError("Missing the required parameter `cheque_number` when calling `bankaccounts_add_line`")  # noqa: E501
        # verify the required parameter 'cheque_writer' is set
        if ('cheque_writer' not in params or
                params['cheque_writer'] is None):
            raise ValueError("Missing the required parameter `cheque_writer` when calling `bankaccounts_add_line`")  # noqa: E501
        # verify the required parameter 'cheque_bank' is set
        if ('cheque_bank' not in params or
                params['cheque_bank'] is None):
            raise ValueError("Missing the required parameter `cheque_bank` when calling `bankaccounts_add_line`")  # noqa: E501
        # verify the required parameter 'accountancycode' is set
        if ('accountancycode' not in params or
                params['accountancycode'] is None):
            raise ValueError("Missing the required parameter `accountancycode` when calling `bankaccounts_add_line`")  # noqa: E501
        # verify the required parameter 'datev' is set
        if ('datev' not in params or
                params['datev'] is None):
            raise ValueError("Missing the required parameter `datev` when calling `bankaccounts_add_line`")  # noqa: E501
        # verify the required parameter 'num_releve' is set
        if ('num_releve' not in params or
                params['num_releve'] is None):
            raise ValueError("Missing the required parameter `num_releve` when calling `bankaccounts_add_line`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bankaccounts_add_line`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if '_date' in params:
            form_params.append(('date', params['_date']))  # noqa: E501
        if 'type' in params:
            form_params.append(('type', params['type']))  # noqa: E501
        if 'label' in params:
            form_params.append(('label', params['label']))  # noqa: E501
        if 'amount' in params:
            form_params.append(('amount', params['amount']))  # noqa: E501
        if 'category' in params:
            form_params.append(('category', params['category']))  # noqa: E501
        if 'cheque_number' in params:
            form_params.append(('cheque_number', params['cheque_number']))  # noqa: E501
        if 'cheque_writer' in params:
            form_params.append(('cheque_writer', params['cheque_writer']))  # noqa: E501
        if 'cheque_bank' in params:
            form_params.append(('cheque_bank', params['cheque_bank']))  # noqa: E501
        if 'accountancycode' in params:
            form_params.append(('accountancycode', params['accountancycode']))  # noqa: E501
        if 'datev' in params:
            form_params.append(('datev', params['datev']))  # noqa: E501
        if 'num_releve' in params:
            form_params.append(('num_releve', params['num_releve']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/bankaccounts/{id}/lines', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bankaccounts_add_link(self, body, id, line_id, **kwargs):  # noqa: E501
        """Add a link to an account line 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankaccounts_add_link(body, id, line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BankaccountsAddLinkModel body: **url_id** (required)  
**url** (required)  
**label** (required)  
**type** (required)  
 (required)
        :param int id: ID of account (required)
        :param int line_id: ID of account line (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bankaccounts_add_link_with_http_info(body, id, line_id, **kwargs)  # noqa: E501
        else:
            (data) = self.bankaccounts_add_link_with_http_info(body, id, line_id, **kwargs)  # noqa: E501
            return data

    def bankaccounts_add_link_with_http_info(self, body, id, line_id, **kwargs):  # noqa: E501
        """Add a link to an account line 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankaccounts_add_link_with_http_info(body, id, line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BankaccountsAddLinkModel body: **url_id** (required)  
**url** (required)  
**label** (required)  
**type** (required)  
 (required)
        :param int id: ID of account (required)
        :param int line_id: ID of account line (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'line_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bankaccounts_add_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bankaccounts_add_link`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bankaccounts_add_link`")  # noqa: E501
        # verify the required parameter 'line_id' is set
        if ('line_id' not in params or
                params['line_id'] is None):
            raise ValueError("Missing the required parameter `line_id` when calling `bankaccounts_add_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'line_id' in params:
            path_params['line_id'] = params['line_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'url_id' in params:
            form_params.append(('url_id', params['url_id']))  # noqa: E501
        if 'url' in params:
            form_params.append(('url', params['url']))  # noqa: E501
        if 'label' in params:
            form_params.append(('label', params['label']))  # noqa: E501
        if 'type' in params:
            form_params.append(('type', params['type']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/bankaccounts/{id}/lines/{line_id}/links', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bankaccounts_add_link(self, url_id, url, label, type, id, line_id, **kwargs):  # noqa: E501
        """Add a link to an account line 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankaccounts_add_link(url_id, url, label, type, id, line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int url_id: (required)
        :param str url: (required)
        :param str label: (required)
        :param str type: (required)
        :param int id: ID of account (required)
        :param int line_id: ID of account line (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bankaccounts_add_link_with_http_info(url_id, url, label, type, id, line_id, **kwargs)  # noqa: E501
        else:
            (data) = self.bankaccounts_add_link_with_http_info(url_id, url, label, type, id, line_id, **kwargs)  # noqa: E501
            return data

    def bankaccounts_add_link_with_http_info(self, url_id, url, label, type, id, line_id, **kwargs):  # noqa: E501
        """Add a link to an account line 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankaccounts_add_link_with_http_info(url_id, url, label, type, id, line_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int url_id: (required)
        :param str url: (required)
        :param str label: (required)
        :param str type: (required)
        :param int id: ID of account (required)
        :param int line_id: ID of account line (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['url_id', 'url', 'label', 'type', 'id', 'line_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bankaccounts_add_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'url_id' is set
        if ('url_id' not in params or
                params['url_id'] is None):
            raise ValueError("Missing the required parameter `url_id` when calling `bankaccounts_add_link`")  # noqa: E501
        # verify the required parameter 'url' is set
        if ('url' not in params or
                params['url'] is None):
            raise ValueError("Missing the required parameter `url` when calling `bankaccounts_add_link`")  # noqa: E501
        # verify the required parameter 'label' is set
        if ('label' not in params or
                params['label'] is None):
            raise ValueError("Missing the required parameter `label` when calling `bankaccounts_add_link`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `bankaccounts_add_link`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bankaccounts_add_link`")  # noqa: E501
        # verify the required parameter 'line_id' is set
        if ('line_id' not in params or
                params['line_id'] is None):
            raise ValueError("Missing the required parameter `line_id` when calling `bankaccounts_add_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'line_id' in params:
            path_params['line_id'] = params['line_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'url_id' in params:
            form_params.append(('url_id', params['url_id']))  # noqa: E501
        if 'url' in params:
            form_params.append(('url', params['url']))  # noqa: E501
        if 'label' in params:
            form_params.append(('label', params['label']))  # noqa: E501
        if 'type' in params:
            form_params.append(('type', params['type']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/bankaccounts/{id}/lines/{line_id}/links', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bankaccounts_retrieve_lines(self, id, **kwargs):  # noqa: E501
        """Get the list of lines of the account. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankaccounts_retrieve_lines(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of account (required)
        :param str sqlfilters: Other criteria to filter answers separated by a comma. Syntax example \"(t.ref:like:'SO-%') and (t.import_key:<:'20160101')\"
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bankaccounts_retrieve_lines_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.bankaccounts_retrieve_lines_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def bankaccounts_retrieve_lines_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get the list of lines of the account. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankaccounts_retrieve_lines_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of account (required)
        :param str sqlfilters: Other criteria to filter answers separated by a comma. Syntax example \"(t.ref:like:'SO-%') and (t.import_key:<:'20160101')\"
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sqlfilters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bankaccounts_retrieve_lines" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bankaccounts_retrieve_lines`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'sqlfilters' in params:
            query_params.append(('sqlfilters', params['sqlfilters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/bankaccounts/{id}/lines', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bankaccounts_transfer(self, body, **kwargs):  # noqa: E501
        """Create an internal wire transfer between two bank accounts 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankaccounts_transfer(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BankaccountsTransferModel body: bankaccount_from_id  
bankaccount_to_id  
date  
description  
amount  
amount_to  
 (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bankaccounts_transfer_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.bankaccounts_transfer_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def bankaccounts_transfer_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create an internal wire transfer between two bank accounts 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankaccounts_transfer_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BankaccountsTransferModel body: bankaccount_from_id  
bankaccount_to_id  
date  
description  
amount  
amount_to  
 (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bankaccounts_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bankaccounts_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'bankaccount_from_id' in params:
            form_params.append(('bankaccount_from_id', params['bankaccount_from_id']))  # noqa: E501
        if 'bankaccount_to_id' in params:
            form_params.append(('bankaccount_to_id', params['bankaccount_to_id']))  # noqa: E501
        if '_date' in params:
            form_params.append(('date', params['_date']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'amount' in params:
            form_params.append(('amount', params['amount']))  # noqa: E501
        if 'amount_to' in params:
            form_params.append(('amount_to', params['amount_to']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/bankaccounts/transfer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bankaccounts_transfer(self, bankaccount_from_id, bankaccount_to_id, _date, description, amount, amount_to, **kwargs):  # noqa: E501
        """Create an internal wire transfer between two bank accounts 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankaccounts_transfer(bankaccount_from_id, bankaccount_to_id, _date, description, amount, amount_to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int bankaccount_from_id: (required)
        :param int bankaccount_to_id: (required)
        :param str _date: (required)
        :param str description: (required)
        :param float amount: (required)
        :param float amount_to: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bankaccounts_transfer_with_http_info(bankaccount_from_id, bankaccount_to_id, _date, description, amount, amount_to, **kwargs)  # noqa: E501
        else:
            (data) = self.bankaccounts_transfer_with_http_info(bankaccount_from_id, bankaccount_to_id, _date, description, amount, amount_to, **kwargs)  # noqa: E501
            return data

    def bankaccounts_transfer_with_http_info(self, bankaccount_from_id, bankaccount_to_id, _date, description, amount, amount_to, **kwargs):  # noqa: E501
        """Create an internal wire transfer between two bank accounts 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankaccounts_transfer_with_http_info(bankaccount_from_id, bankaccount_to_id, _date, description, amount, amount_to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int bankaccount_from_id: (required)
        :param int bankaccount_to_id: (required)
        :param str _date: (required)
        :param str description: (required)
        :param float amount: (required)
        :param float amount_to: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bankaccount_from_id', 'bankaccount_to_id', '_date', 'description', 'amount', 'amount_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bankaccounts_transfer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bankaccount_from_id' is set
        if ('bankaccount_from_id' not in params or
                params['bankaccount_from_id'] is None):
            raise ValueError("Missing the required parameter `bankaccount_from_id` when calling `bankaccounts_transfer`")  # noqa: E501
        # verify the required parameter 'bankaccount_to_id' is set
        if ('bankaccount_to_id' not in params or
                params['bankaccount_to_id'] is None):
            raise ValueError("Missing the required parameter `bankaccount_to_id` when calling `bankaccounts_transfer`")  # noqa: E501
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `bankaccounts_transfer`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `bankaccounts_transfer`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `bankaccounts_transfer`")  # noqa: E501
        # verify the required parameter 'amount_to' is set
        if ('amount_to' not in params or
                params['amount_to'] is None):
            raise ValueError("Missing the required parameter `amount_to` when calling `bankaccounts_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'bankaccount_from_id' in params:
            form_params.append(('bankaccount_from_id', params['bankaccount_from_id']))  # noqa: E501
        if 'bankaccount_to_id' in params:
            form_params.append(('bankaccount_to_id', params['bankaccount_to_id']))  # noqa: E501
        if '_date' in params:
            form_params.append(('date', params['_date']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'amount' in params:
            form_params.append(('amount', params['amount']))  # noqa: E501
        if 'amount_to' in params:
            form_params.append(('amount_to', params['amount_to']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/bankaccounts/transfer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_bankaccounts(self, **kwargs):  # noqa: E501
        """Create account object 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_bankaccounts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateBankaccountsModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_bankaccounts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_bankaccounts_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_bankaccounts_with_http_info(self, **kwargs):  # noqa: E501
        """Create account object 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_bankaccounts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateBankaccountsModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_bankaccounts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/bankaccounts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_bankaccounts(self, **kwargs):  # noqa: E501
        """Create account object 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_bankaccounts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_bankaccounts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_bankaccounts_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_bankaccounts_with_http_info(self, **kwargs):  # noqa: E501
        """Create account object 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_bankaccounts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_bankaccounts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/bankaccounts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_bankaccounts(self, **kwargs):  # noqa: E501
        """Get the list of accounts. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_bankaccounts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :param int limit: Limit for list
        :param int page: Page number
        :param int category: Use this param to filter list by category
        :param str sqlfilters: Other criteria to filter answers separated by a comma. Syntax example \"(t.ref:like:'SO-%') and (t.import_key:<:'20160101')\"
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_bankaccounts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_bankaccounts_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_bankaccounts_with_http_info(self, **kwargs):  # noqa: E501
        """Get the list of accounts. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_bankaccounts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :param int limit: Limit for list
        :param int page: Page number
        :param int category: Use this param to filter list by category
        :param str sqlfilters: Other criteria to filter answers separated by a comma. Syntax example \"(t.ref:like:'SO-%') and (t.import_key:<:'20160101')\"
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sortfield', 'sortorder', 'limit', 'page', 'category', 'sqlfilters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_bankaccounts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sortfield' in params:
            query_params.append(('sortfield', params['sortfield']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'category' in params:
            query_params.append(('category', params['category']))  # noqa: E501
        if 'sqlfilters' in params:
            query_params.append(('sqlfilters', params['sqlfilters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/bankaccounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_bankaccounts(self, id, **kwargs):  # noqa: E501
        """Delete account 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_bankaccounts(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of account (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_bankaccounts_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_bankaccounts_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def remove_bankaccounts_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete account 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_bankaccounts_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of account (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_bankaccounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_bankaccounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/bankaccounts/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_bankaccounts(self, id, **kwargs):  # noqa: E501
        """Get account by ID. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_bankaccounts(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of account (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_bankaccounts_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_bankaccounts_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def retrieve_bankaccounts_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get account by ID. 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_bankaccounts_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of account (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_bankaccounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `retrieve_bankaccounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/bankaccounts/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_bankaccounts(self, id, **kwargs):  # noqa: E501
        """Update account 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_bankaccounts(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of account (required)
        :param UpdateBankaccountsModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_bankaccounts_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_bankaccounts_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_bankaccounts_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update account 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_bankaccounts_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of account (required)
        :param UpdateBankaccountsModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_bankaccounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_bankaccounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/bankaccounts/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_bankaccounts(self, id, **kwargs):  # noqa: E501
        """Update account 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_bankaccounts(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of account (required)
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_bankaccounts_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_bankaccounts_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_bankaccounts_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update account 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_bankaccounts_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of account (required)
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_bankaccounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_bankaccounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/bankaccounts/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
