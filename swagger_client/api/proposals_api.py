# coding: utf-8

"""
    Restler API Explorer

    Live API Documentation  # noqa: E501

    OpenAPI spec version: 1
    Contact: arul@luracast.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ProposalsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_proposals(self, **kwargs):  # noqa: E501
        """Create commercial proposal object 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_proposals(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateProposalsModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_proposals_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_proposals_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_proposals_with_http_info(self, **kwargs):  # noqa: E501
        """Create commercial proposal object 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_proposals_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateProposalsModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_proposals" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/proposals', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_proposals(self, **kwargs):  # noqa: E501
        """Create commercial proposal object 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_proposals(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_proposals_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_proposals_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_proposals_with_http_info(self, **kwargs):  # noqa: E501
        """Create commercial proposal object 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_proposals_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_proposals" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/proposals', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_proposals(self, **kwargs):  # noqa: E501
        """List commercial proposals 🔐  # noqa: E501

        Get a list of commercial proposals  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_proposals(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :param int limit: Limit for list
        :param int page: Page number
        :param str thirdparty_ids: Thirdparty ids to filter commercial proposals (example '1' or '1,2,3')
        :param str sqlfilters: Other criteria to filter answers separated by a comma. Syntax example \"(t.ref:like:'SO-%') and (t.datec:<:'20160101')\"
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_proposals_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_proposals_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_proposals_with_http_info(self, **kwargs):  # noqa: E501
        """List commercial proposals 🔐  # noqa: E501

        Get a list of commercial proposals  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_proposals_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sortfield: Sort field
        :param str sortorder: Sort order
        :param int limit: Limit for list
        :param int page: Page number
        :param str thirdparty_ids: Thirdparty ids to filter commercial proposals (example '1' or '1,2,3')
        :param str sqlfilters: Other criteria to filter answers separated by a comma. Syntax example \"(t.ref:like:'SO-%') and (t.datec:<:'20160101')\"
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sortfield', 'sortorder', 'limit', 'page', 'thirdparty_ids', 'sqlfilters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_proposals" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sortfield' in params:
            query_params.append(('sortfield', params['sortfield']))  # noqa: E501
        if 'sortorder' in params:
            query_params.append(('sortorder', params['sortorder']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'thirdparty_ids' in params:
            query_params.append(('thirdparty_ids', params['thirdparty_ids']))  # noqa: E501
        if 'sqlfilters' in params:
            query_params.append(('sqlfilters', params['sqlfilters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/proposals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def proposals_close(self, body, id, **kwargs):  # noqa: E501
        """Close (Accept or refuse) a quote / commercial proposal 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_close(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProposalsCloseModel body: **status** (required)  
note_private  
notrigger  
 (required)
        :param int id: Commercial proposal ID (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.proposals_close_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.proposals_close_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def proposals_close_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Close (Accept or refuse) a quote / commercial proposal 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_close_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProposalsCloseModel body: **status** (required)  
note_private  
notrigger  
 (required)
        :param int id: Commercial proposal ID (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method proposals_close" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `proposals_close`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `proposals_close`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'status' in params:
            form_params.append(('status', params['status']))  # noqa: E501
        if 'note_private' in params:
            form_params.append(('note_private', params['note_private']))  # noqa: E501
        if 'notrigger' in params:
            form_params.append(('notrigger', params['notrigger']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/proposals/{id}/close', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def proposals_close(self, status, note_private, notrigger, id, **kwargs):  # noqa: E501
        """Close (Accept or refuse) a quote / commercial proposal 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_close(status, note_private, notrigger, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int status: (required)
        :param str note_private: (required)
        :param int notrigger: (required)
        :param int id: Commercial proposal ID (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.proposals_close_with_http_info(status, note_private, notrigger, id, **kwargs)  # noqa: E501
        else:
            (data) = self.proposals_close_with_http_info(status, note_private, notrigger, id, **kwargs)  # noqa: E501
            return data

    def proposals_close_with_http_info(self, status, note_private, notrigger, id, **kwargs):  # noqa: E501
        """Close (Accept or refuse) a quote / commercial proposal 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_close_with_http_info(status, note_private, notrigger, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int status: (required)
        :param str note_private: (required)
        :param int notrigger: (required)
        :param int id: Commercial proposal ID (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status', 'note_private', 'notrigger', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method proposals_close" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'status' is set
        if ('status' not in params or
                params['status'] is None):
            raise ValueError("Missing the required parameter `status` when calling `proposals_close`")  # noqa: E501
        # verify the required parameter 'note_private' is set
        if ('note_private' not in params or
                params['note_private'] is None):
            raise ValueError("Missing the required parameter `note_private` when calling `proposals_close`")  # noqa: E501
        # verify the required parameter 'notrigger' is set
        if ('notrigger' not in params or
                params['notrigger'] is None):
            raise ValueError("Missing the required parameter `notrigger` when calling `proposals_close`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `proposals_close`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'status' in params:
            form_params.append(('status', params['status']))  # noqa: E501
        if 'note_private' in params:
            form_params.append(('note_private', params['note_private']))  # noqa: E501
        if 'notrigger' in params:
            form_params.append(('notrigger', params['notrigger']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/proposals/{id}/close', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def proposals_create_contact(self, id, contactid, type, **kwargs):  # noqa: E501
        """Add a contact type of given commercial proposal 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_create_contact(id, contactid, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of commercial proposal to update (required)
        :param int contactid: Id of contact to add (required)
        :param str type: Type of the contact (BILLING, SHIPPING, CUSTOMER) (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.proposals_create_contact_with_http_info(id, contactid, type, **kwargs)  # noqa: E501
        else:
            (data) = self.proposals_create_contact_with_http_info(id, contactid, type, **kwargs)  # noqa: E501
            return data

    def proposals_create_contact_with_http_info(self, id, contactid, type, **kwargs):  # noqa: E501
        """Add a contact type of given commercial proposal 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_create_contact_with_http_info(id, contactid, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of commercial proposal to update (required)
        :param int contactid: Id of contact to add (required)
        :param str type: Type of the contact (BILLING, SHIPPING, CUSTOMER) (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'contactid', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method proposals_create_contact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `proposals_create_contact`")  # noqa: E501
        # verify the required parameter 'contactid' is set
        if ('contactid' not in params or
                params['contactid'] is None):
            raise ValueError("Missing the required parameter `contactid` when calling `proposals_create_contact`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `proposals_create_contact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'contactid' in params:
            path_params['contactid'] = params['contactid']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/proposals/{id}/contact/{contactid}/{type}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def proposals_create_line(self, id, **kwargs):  # noqa: E501
        """Add a line to given commercial proposal 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_create_line(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of commercial proposal to update (required)
        :param ProposalsCreateLineModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.proposals_create_line_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.proposals_create_line_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def proposals_create_line_with_http_info(self, id, **kwargs):  # noqa: E501
        """Add a line to given commercial proposal 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_create_line_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of commercial proposal to update (required)
        :param ProposalsCreateLineModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method proposals_create_line" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `proposals_create_line`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/proposals/{id}/lines', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def proposals_create_line(self, id, **kwargs):  # noqa: E501
        """Add a line to given commercial proposal 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_create_line(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of commercial proposal to update (required)
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.proposals_create_line_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.proposals_create_line_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def proposals_create_line_with_http_info(self, id, **kwargs):  # noqa: E501
        """Add a line to given commercial proposal 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_create_line_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of commercial proposal to update (required)
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method proposals_create_line" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `proposals_create_line`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/proposals/{id}/lines', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def proposals_remove_contact(self, id, contactid, type, **kwargs):  # noqa: E501
        """Delete a contact type of given commercial proposal 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_remove_contact(id, contactid, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of commercial proposal to update (required)
        :param int contactid: Row key of the contact in the array contact_ids. (required)
        :param str type: Type of the contact (BILLING, SHIPPING, CUSTOMER). (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.proposals_remove_contact_with_http_info(id, contactid, type, **kwargs)  # noqa: E501
        else:
            (data) = self.proposals_remove_contact_with_http_info(id, contactid, type, **kwargs)  # noqa: E501
            return data

    def proposals_remove_contact_with_http_info(self, id, contactid, type, **kwargs):  # noqa: E501
        """Delete a contact type of given commercial proposal 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_remove_contact_with_http_info(id, contactid, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of commercial proposal to update (required)
        :param int contactid: Row key of the contact in the array contact_ids. (required)
        :param str type: Type of the contact (BILLING, SHIPPING, CUSTOMER). (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'contactid', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method proposals_remove_contact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `proposals_remove_contact`")  # noqa: E501
        # verify the required parameter 'contactid' is set
        if ('contactid' not in params or
                params['contactid'] is None):
            raise ValueError("Missing the required parameter `contactid` when calling `proposals_remove_contact`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `proposals_remove_contact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'contactid' in params:
            path_params['contactid'] = params['contactid']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/proposals/{id}/contact/{contactid}/{type}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def proposals_remove_line(self, id, lineid, **kwargs):  # noqa: E501
        """Delete a line of given commercial proposal 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_remove_line(id, lineid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of commercial proposal to update (required)
        :param int lineid: Id of line to delete (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.proposals_remove_line_with_http_info(id, lineid, **kwargs)  # noqa: E501
        else:
            (data) = self.proposals_remove_line_with_http_info(id, lineid, **kwargs)  # noqa: E501
            return data

    def proposals_remove_line_with_http_info(self, id, lineid, **kwargs):  # noqa: E501
        """Delete a line of given commercial proposal 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_remove_line_with_http_info(id, lineid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of commercial proposal to update (required)
        :param int lineid: Id of line to delete (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'lineid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method proposals_remove_line" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `proposals_remove_line`")  # noqa: E501
        # verify the required parameter 'lineid' is set
        if ('lineid' not in params or
                params['lineid'] is None):
            raise ValueError("Missing the required parameter `lineid` when calling `proposals_remove_line`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'lineid' in params:
            path_params['lineid'] = params['lineid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/proposals/{id}/lines/{lineid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def proposals_retrieve_by_ref(self, ref, **kwargs):  # noqa: E501
        """Get properties of an proposal object by ref 🔐  # noqa: E501

        Return an array with proposal informations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_retrieve_by_ref(ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ref: Ref of object (required)
        :param int contact_list: 0: Returned array of contacts/addresses contains all properties, 1: Return array contains just id
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.proposals_retrieve_by_ref_with_http_info(ref, **kwargs)  # noqa: E501
        else:
            (data) = self.proposals_retrieve_by_ref_with_http_info(ref, **kwargs)  # noqa: E501
            return data

    def proposals_retrieve_by_ref_with_http_info(self, ref, **kwargs):  # noqa: E501
        """Get properties of an proposal object by ref 🔐  # noqa: E501

        Return an array with proposal informations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_retrieve_by_ref_with_http_info(ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ref: Ref of object (required)
        :param int contact_list: 0: Returned array of contacts/addresses contains all properties, 1: Return array contains just id
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ref', 'contact_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method proposals_retrieve_by_ref" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ref' is set
        if ('ref' not in params or
                params['ref'] is None):
            raise ValueError("Missing the required parameter `ref` when calling `proposals_retrieve_by_ref`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ref' in params:
            path_params['ref'] = params['ref']  # noqa: E501

        query_params = []
        if 'contact_list' in params:
            query_params.append(('contact_list', params['contact_list']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/proposals/ref/{ref}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def proposals_retrieve_by_ref_ext(self, ref_ext, **kwargs):  # noqa: E501
        """Get properties of an proposal object by ref_ext 🔐  # noqa: E501

        Return an array with proposal informations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_retrieve_by_ref_ext(ref_ext, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ref_ext: External reference of object (required)
        :param int contact_list: 0: Returned array of contacts/addresses contains all properties, 1: Return array contains just id
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.proposals_retrieve_by_ref_ext_with_http_info(ref_ext, **kwargs)  # noqa: E501
        else:
            (data) = self.proposals_retrieve_by_ref_ext_with_http_info(ref_ext, **kwargs)  # noqa: E501
            return data

    def proposals_retrieve_by_ref_ext_with_http_info(self, ref_ext, **kwargs):  # noqa: E501
        """Get properties of an proposal object by ref_ext 🔐  # noqa: E501

        Return an array with proposal informations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_retrieve_by_ref_ext_with_http_info(ref_ext, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ref_ext: External reference of object (required)
        :param int contact_list: 0: Returned array of contacts/addresses contains all properties, 1: Return array contains just id
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ref_ext', 'contact_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method proposals_retrieve_by_ref_ext" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ref_ext' is set
        if ('ref_ext' not in params or
                params['ref_ext'] is None):
            raise ValueError("Missing the required parameter `ref_ext` when calling `proposals_retrieve_by_ref_ext`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ref_ext' in params:
            path_params['ref_ext'] = params['ref_ext']  # noqa: E501

        query_params = []
        if 'contact_list' in params:
            query_params.append(('contact_list', params['contact_list']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/proposals/ref_ext/{ref_ext}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def proposals_retrieve_lines(self, id, **kwargs):  # noqa: E501
        """Get lines of a commercial proposal 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_retrieve_lines(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of commercial proposal (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.proposals_retrieve_lines_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.proposals_retrieve_lines_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def proposals_retrieve_lines_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get lines of a commercial proposal 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_retrieve_lines_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of commercial proposal (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method proposals_retrieve_lines" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `proposals_retrieve_lines`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/proposals/{id}/lines', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def proposals_setinvoiced(self, id, **kwargs):  # noqa: E501
        """Set a commercial proposal billed. Could be also called setbilled 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_setinvoiced(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Commercial proposal ID (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.proposals_setinvoiced_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.proposals_setinvoiced_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def proposals_setinvoiced_with_http_info(self, id, **kwargs):  # noqa: E501
        """Set a commercial proposal billed. Could be also called setbilled 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_setinvoiced_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Commercial proposal ID (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method proposals_setinvoiced" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `proposals_setinvoiced`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/proposals/{id}/setinvoiced', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def proposals_settodraft(self, id, **kwargs):  # noqa: E501
        """Set a proposal to draft 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_settodraft(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Order ID (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.proposals_settodraft_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.proposals_settodraft_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def proposals_settodraft_with_http_info(self, id, **kwargs):  # noqa: E501
        """Set a proposal to draft 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_settodraft_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Order ID (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method proposals_settodraft" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `proposals_settodraft`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/proposals/{id}/settodraft', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def proposals_update_line(self, id, lineid, **kwargs):  # noqa: E501
        """Update a line of given commercial proposal 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_update_line(id, lineid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of commercial proposal to update (required)
        :param int lineid: Id of line to update (required)
        :param ProposalsUpdateLineModel body: request_data  

        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.proposals_update_line_with_http_info(id, lineid, **kwargs)  # noqa: E501
        else:
            (data) = self.proposals_update_line_with_http_info(id, lineid, **kwargs)  # noqa: E501
            return data

    def proposals_update_line_with_http_info(self, id, lineid, **kwargs):  # noqa: E501
        """Update a line of given commercial proposal 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_update_line_with_http_info(id, lineid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of commercial proposal to update (required)
        :param int lineid: Id of line to update (required)
        :param ProposalsUpdateLineModel body: request_data  

        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'lineid', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method proposals_update_line" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `proposals_update_line`")  # noqa: E501
        # verify the required parameter 'lineid' is set
        if ('lineid' not in params or
                params['lineid'] is None):
            raise ValueError("Missing the required parameter `lineid` when calling `proposals_update_line`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'lineid' in params:
            path_params['lineid'] = params['lineid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/proposals/{id}/lines/{lineid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def proposals_update_line(self, id, lineid, **kwargs):  # noqa: E501
        """Update a line of given commercial proposal 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_update_line(id, lineid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of commercial proposal to update (required)
        :param int lineid: Id of line to update (required)
        :param list[str] request_data:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.proposals_update_line_with_http_info(id, lineid, **kwargs)  # noqa: E501
        else:
            (data) = self.proposals_update_line_with_http_info(id, lineid, **kwargs)  # noqa: E501
            return data

    def proposals_update_line_with_http_info(self, id, lineid, **kwargs):  # noqa: E501
        """Update a line of given commercial proposal 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_update_line_with_http_info(id, lineid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of commercial proposal to update (required)
        :param int lineid: Id of line to update (required)
        :param list[str] request_data:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'lineid', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method proposals_update_line" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `proposals_update_line`")  # noqa: E501
        # verify the required parameter 'lineid' is set
        if ('lineid' not in params or
                params['lineid'] is None):
            raise ValueError("Missing the required parameter `lineid` when calling `proposals_update_line`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'lineid' in params:
            path_params['lineid'] = params['lineid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/proposals/{id}/lines/{lineid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def proposals_validate(self, id, **kwargs):  # noqa: E501
        """Validate a commercial proposal 🔐  # noqa: E501

        If you get a bad value for param notrigger check that ou provide this in body { \"notrigger\": 0 }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_validate(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Commercial proposal ID (required)
        :param ProposalsValidateModel body: notrigger  

        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.proposals_validate_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.proposals_validate_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def proposals_validate_with_http_info(self, id, **kwargs):  # noqa: E501
        """Validate a commercial proposal 🔐  # noqa: E501

        If you get a bad value for param notrigger check that ou provide this in body { \"notrigger\": 0 }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_validate_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Commercial proposal ID (required)
        :param ProposalsValidateModel body: notrigger  

        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method proposals_validate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `proposals_validate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'notrigger' in params:
            form_params.append(('notrigger', params['notrigger']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/proposals/{id}/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def proposals_validate(self, id, **kwargs):  # noqa: E501
        """Validate a commercial proposal 🔐  # noqa: E501

        If you get a bad value for param notrigger check that ou provide this in body { \"notrigger\": 0 }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_validate(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Commercial proposal ID (required)
        :param int notrigger:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.proposals_validate_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.proposals_validate_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def proposals_validate_with_http_info(self, id, **kwargs):  # noqa: E501
        """Validate a commercial proposal 🔐  # noqa: E501

        If you get a bad value for param notrigger check that ou provide this in body { \"notrigger\": 0 }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.proposals_validate_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Commercial proposal ID (required)
        :param int notrigger:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'notrigger']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method proposals_validate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `proposals_validate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'notrigger' in params:
            form_params.append(('notrigger', params['notrigger']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/proposals/{id}/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_proposals(self, id, **kwargs):  # noqa: E501
        """Delete commercial proposal 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_proposals(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Commercial proposal ID (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_proposals_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_proposals_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def remove_proposals_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete commercial proposal 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_proposals_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Commercial proposal ID (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_proposals" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `remove_proposals`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/proposals/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_proposals(self, id, **kwargs):  # noqa: E501
        """Get properties of a commercial proposal object 🔐  # noqa: E501

        Return an array with commercial proposal informations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_proposals(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of commercial proposal (required)
        :param int contact_list: 0: Returned array of contacts/addresses contains all properties, 1: Return array contains just id
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_proposals_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_proposals_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def retrieve_proposals_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get properties of a commercial proposal object 🔐  # noqa: E501

        Return an array with commercial proposal informations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_proposals_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: ID of commercial proposal (required)
        :param int contact_list: 0: Returned array of contacts/addresses contains all properties, 1: Return array contains just id
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'contact_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_proposals" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `retrieve_proposals`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'contact_list' in params:
            query_params.append(('contact_list', params['contact_list']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/proposals/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_proposals(self, id, **kwargs):  # noqa: E501
        """Update commercial proposal general fields (won't touch lines of commercial proposal) 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_proposals(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of commercial proposal to update (required)
        :param UpdateProposalsModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_proposals_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_proposals_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_proposals_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update commercial proposal general fields (won't touch lines of commercial proposal) 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_proposals_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of commercial proposal to update (required)
        :param UpdateProposalsModel body: request_data  

        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_proposals" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_proposals`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/proposals/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_proposals(self, id, **kwargs):  # noqa: E501
        """Update commercial proposal general fields (won't touch lines of commercial proposal) 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_proposals(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of commercial proposal to update (required)
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_proposals_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_proposals_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_proposals_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update commercial proposal general fields (won't touch lines of commercial proposal) 🔐  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_proposals_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Id of commercial proposal to update (required)
        :param list[str] request_data:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'request_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_proposals" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_proposals`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'request_data' in params:
            form_params.append(('request_data', params['request_data']))  # noqa: E501
            collection_formats['request_data'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/proposals/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
