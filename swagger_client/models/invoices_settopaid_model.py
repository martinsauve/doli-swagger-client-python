# coding: utf-8

"""
    Restler API Explorer

    Live API Documentation  # noqa: E501

    OpenAPI spec version: 1
    Contact: arul@luracast.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvoicesSettopaidModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'close_code': 'str',
        'close_note': 'str'
    }

    attribute_map = {
        'close_code': 'close_code',
        'close_note': 'close_note'
    }

    def __init__(self, close_code=None, close_note=None):  # noqa: E501
        """InvoicesSettopaidModel - a model defined in Swagger"""  # noqa: E501
        self._close_code = None
        self._close_note = None
        self.discriminator = None
        if close_code is not None:
            self.close_code = close_code
        if close_note is not None:
            self.close_note = close_note

    @property
    def close_code(self):
        """Gets the close_code of this InvoicesSettopaidModel.  # noqa: E501

        Code filled if we classify to 'Paid completely' when payment is not complete (for escompte for example)  # noqa: E501

        :return: The close_code of this InvoicesSettopaidModel.  # noqa: E501
        :rtype: str
        """
        return self._close_code

    @close_code.setter
    def close_code(self, close_code):
        """Sets the close_code of this InvoicesSettopaidModel.

        Code filled if we classify to 'Paid completely' when payment is not complete (for escompte for example)  # noqa: E501

        :param close_code: The close_code of this InvoicesSettopaidModel.  # noqa: E501
        :type: str
        """

        self._close_code = close_code

    @property
    def close_note(self):
        """Gets the close_note of this InvoicesSettopaidModel.  # noqa: E501

        Comment defined if we classify to 'Paid' when payment is not complete (for escompte for example)  # noqa: E501

        :return: The close_note of this InvoicesSettopaidModel.  # noqa: E501
        :rtype: str
        """
        return self._close_note

    @close_note.setter
    def close_note(self, close_note):
        """Sets the close_note of this InvoicesSettopaidModel.

        Comment defined if we classify to 'Paid' when payment is not complete (for escompte for example)  # noqa: E501

        :param close_note: The close_note of this InvoicesSettopaidModel.  # noqa: E501
        :type: str
        """

        self._close_note = close_note

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoicesSettopaidModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoicesSettopaidModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
