# coding: utf-8

"""
    Restler API Explorer

    Live API Documentation  # noqa: E501

    OpenAPI spec version: 1
    Contact: arul@luracast.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ListLoginModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'login': 'str',
        'password': 'str',
        'entity': 'str',
        'reset': 'int'
    }

    attribute_map = {
        'login': 'login',
        'password': 'password',
        'entity': 'entity',
        'reset': 'reset'
    }

    def __init__(self, login=None, password=None, entity=None, reset=None):  # noqa: E501
        """ListLoginModel - a model defined in Swagger"""  # noqa: E501
        self._login = None
        self._password = None
        self._entity = None
        self._reset = None
        self.discriminator = None
        self.login = login
        self.password = password
        if entity is not None:
            self.entity = entity
        if reset is not None:
            self.reset = reset

    @property
    def login(self):
        """Gets the login of this ListLoginModel.  # noqa: E501

        User login  # noqa: E501

        :return: The login of this ListLoginModel.  # noqa: E501
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this ListLoginModel.

        User login  # noqa: E501

        :param login: The login of this ListLoginModel.  # noqa: E501
        :type: str
        """
        if login is None:
            raise ValueError("Invalid value for `login`, must not be `None`")  # noqa: E501

        self._login = login

    @property
    def password(self):
        """Gets the password of this ListLoginModel.  # noqa: E501

        User password  # noqa: E501

        :return: The password of this ListLoginModel.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ListLoginModel.

        User password  # noqa: E501

        :param password: The password of this ListLoginModel.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def entity(self):
        """Gets the entity of this ListLoginModel.  # noqa: E501

        Entity (when multicompany module is used). '' means 1=first company.  # noqa: E501

        :return: The entity of this ListLoginModel.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this ListLoginModel.

        Entity (when multicompany module is used). '' means 1=first company.  # noqa: E501

        :param entity: The entity of this ListLoginModel.  # noqa: E501
        :type: str
        """

        self._entity = entity

    @property
    def reset(self):
        """Gets the reset of this ListLoginModel.  # noqa: E501

        Reset token (0=get current token, 1=ask a new token and canceled old token. This means access using current existing API token of user will fails: new token will be required for new access)  # noqa: E501

        :return: The reset of this ListLoginModel.  # noqa: E501
        :rtype: int
        """
        return self._reset

    @reset.setter
    def reset(self, reset):
        """Sets the reset of this ListLoginModel.

        Reset token (0=get current token, 1=ask a new token and canceled old token. This means access using current existing API token of user will fails: new token will be required for new access)  # noqa: E501

        :param reset: The reset of this ListLoginModel.  # noqa: E501
        :type: int
        """

        self._reset = reset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListLoginModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListLoginModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
