# coding: utf-8

"""
    Restler API Explorer

    Live API Documentation  # noqa: E501

    OpenAPI spec version: 1
    Contact: arul@luracast.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvoicesAddContactModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fk_socpeople': 'int',
        'type_contact': 'str',
        'source': 'str',
        'notrigger': 'int'
    }

    attribute_map = {
        'fk_socpeople': 'fk_socpeople',
        'type_contact': 'type_contact',
        'source': 'source',
        'notrigger': 'notrigger'
    }

    def __init__(self, fk_socpeople=None, type_contact=None, source=None, notrigger=None):  # noqa: E501
        """InvoicesAddContactModel - a model defined in Swagger"""  # noqa: E501
        self._fk_socpeople = None
        self._type_contact = None
        self._source = None
        self._notrigger = None
        self.discriminator = None
        self.fk_socpeople = fk_socpeople
        self.type_contact = type_contact
        self.source = source
        if notrigger is not None:
            self.notrigger = notrigger

    @property
    def fk_socpeople(self):
        """Gets the fk_socpeople of this InvoicesAddContactModel.  # noqa: E501

        Id of thirdparty contact (if source = 'external') or id of user (if souce = 'internal') to link  # noqa: E501

        :return: The fk_socpeople of this InvoicesAddContactModel.  # noqa: E501
        :rtype: int
        """
        return self._fk_socpeople

    @fk_socpeople.setter
    def fk_socpeople(self, fk_socpeople):
        """Sets the fk_socpeople of this InvoicesAddContactModel.

        Id of thirdparty contact (if source = 'external') or id of user (if souce = 'internal') to link  # noqa: E501

        :param fk_socpeople: The fk_socpeople of this InvoicesAddContactModel.  # noqa: E501
        :type: int
        """
        if fk_socpeople is None:
            raise ValueError("Invalid value for `fk_socpeople`, must not be `None`")  # noqa: E501

        self._fk_socpeople = fk_socpeople

    @property
    def type_contact(self):
        """Gets the type_contact of this InvoicesAddContactModel.  # noqa: E501

        Type of contact (code). Must a code found into table llx_c_type_contact. For example: BILLING  # noqa: E501

        :return: The type_contact of this InvoicesAddContactModel.  # noqa: E501
        :rtype: str
        """
        return self._type_contact

    @type_contact.setter
    def type_contact(self, type_contact):
        """Sets the type_contact of this InvoicesAddContactModel.

        Type of contact (code). Must a code found into table llx_c_type_contact. For example: BILLING  # noqa: E501

        :param type_contact: The type_contact of this InvoicesAddContactModel.  # noqa: E501
        :type: str
        """
        if type_contact is None:
            raise ValueError("Invalid value for `type_contact`, must not be `None`")  # noqa: E501

        self._type_contact = type_contact

    @property
    def source(self):
        """Gets the source of this InvoicesAddContactModel.  # noqa: E501

        external=Contact extern (llx_socpeople), internal=Contact intern (llx_user)  # noqa: E501

        :return: The source of this InvoicesAddContactModel.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this InvoicesAddContactModel.

        external=Contact extern (llx_socpeople), internal=Contact intern (llx_user)  # noqa: E501

        :param source: The source of this InvoicesAddContactModel.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def notrigger(self):
        """Gets the notrigger of this InvoicesAddContactModel.  # noqa: E501

        Disable all triggers  # noqa: E501

        :return: The notrigger of this InvoicesAddContactModel.  # noqa: E501
        :rtype: int
        """
        return self._notrigger

    @notrigger.setter
    def notrigger(self, notrigger):
        """Sets the notrigger of this InvoicesAddContactModel.

        Disable all triggers  # noqa: E501

        :param notrigger: The notrigger of this InvoicesAddContactModel.  # noqa: E501
        :type: int
        """

        self._notrigger = notrigger

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoicesAddContactModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoicesAddContactModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
