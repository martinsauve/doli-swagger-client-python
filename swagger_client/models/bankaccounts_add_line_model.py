# coding: utf-8

"""
    Restler API Explorer

    Live API Documentation  # noqa: E501

    OpenAPI spec version: 1
    Contact: arul@luracast.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BankaccountsAddLineModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        'type': 'str',
        'label': 'str',
        'amount': 'float',
        'category': 'int',
        'cheque_number': 'str',
        'cheque_writer': 'str',
        'cheque_bank': 'str',
        'accountancycode': 'str',
        'datev': 'str',
        'num_releve': 'str'
    }

    attribute_map = {
        '_date': 'date',
        'type': 'type',
        'label': 'label',
        'amount': 'amount',
        'category': 'category',
        'cheque_number': 'cheque_number',
        'cheque_writer': 'cheque_writer',
        'cheque_bank': 'cheque_bank',
        'accountancycode': 'accountancycode',
        'datev': 'datev',
        'num_releve': 'num_releve'
    }

    def __init__(self, _date=None, type=None, label=None, amount=None, category=None, cheque_number=None, cheque_writer=None, cheque_bank=None, accountancycode=None, datev=None, num_releve=None):  # noqa: E501
        """BankaccountsAddLineModel - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._type = None
        self._label = None
        self._amount = None
        self._category = None
        self._cheque_number = None
        self._cheque_writer = None
        self._cheque_bank = None
        self._accountancycode = None
        self._datev = None
        self._num_releve = None
        self.discriminator = None
        self._date = _date
        self.type = type
        self.label = label
        self.amount = amount
        if category is not None:
            self.category = category
        if cheque_number is not None:
            self.cheque_number = cheque_number
        if cheque_writer is not None:
            self.cheque_writer = cheque_writer
        if cheque_bank is not None:
            self.cheque_bank = cheque_bank
        if accountancycode is not None:
            self.accountancycode = accountancycode
        if datev is not None:
            self.datev = datev
        if num_releve is not None:
            self.num_releve = num_releve

    @property
    def _date(self):
        """Gets the _date of this BankaccountsAddLineModel.  # noqa: E501

        Payment date (timestamp)  # noqa: E501

        :return: The _date of this BankaccountsAddLineModel.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this BankaccountsAddLineModel.

        Payment date (timestamp)  # noqa: E501

        :param _date: The _date of this BankaccountsAddLineModel.  # noqa: E501
        :type: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def type(self):
        """Gets the type of this BankaccountsAddLineModel.  # noqa: E501

        Payment mode (TYP,VIR,PRE,LIQ,VAD,CB,CHQ...)  # noqa: E501

        :return: The type of this BankaccountsAddLineModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BankaccountsAddLineModel.

        Payment mode (TYP,VIR,PRE,LIQ,VAD,CB,CHQ...)  # noqa: E501

        :param type: The type of this BankaccountsAddLineModel.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def label(self):
        """Gets the label of this BankaccountsAddLineModel.  # noqa: E501

        Label  # noqa: E501

        :return: The label of this BankaccountsAddLineModel.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this BankaccountsAddLineModel.

        Label  # noqa: E501

        :param label: The label of this BankaccountsAddLineModel.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def amount(self):
        """Gets the amount of this BankaccountsAddLineModel.  # noqa: E501

        Amount (may be 0)  # noqa: E501

        :return: The amount of this BankaccountsAddLineModel.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BankaccountsAddLineModel.

        Amount (may be 0)  # noqa: E501

        :param amount: The amount of this BankaccountsAddLineModel.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def category(self):
        """Gets the category of this BankaccountsAddLineModel.  # noqa: E501

        Category  # noqa: E501

        :return: The category of this BankaccountsAddLineModel.  # noqa: E501
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this BankaccountsAddLineModel.

        Category  # noqa: E501

        :param category: The category of this BankaccountsAddLineModel.  # noqa: E501
        :type: int
        """

        self._category = category

    @property
    def cheque_number(self):
        """Gets the cheque_number of this BankaccountsAddLineModel.  # noqa: E501

        Cheque numero  # noqa: E501

        :return: The cheque_number of this BankaccountsAddLineModel.  # noqa: E501
        :rtype: str
        """
        return self._cheque_number

    @cheque_number.setter
    def cheque_number(self, cheque_number):
        """Sets the cheque_number of this BankaccountsAddLineModel.

        Cheque numero  # noqa: E501

        :param cheque_number: The cheque_number of this BankaccountsAddLineModel.  # noqa: E501
        :type: str
        """

        self._cheque_number = cheque_number

    @property
    def cheque_writer(self):
        """Gets the cheque_writer of this BankaccountsAddLineModel.  # noqa: E501

        Name of cheque writer  # noqa: E501

        :return: The cheque_writer of this BankaccountsAddLineModel.  # noqa: E501
        :rtype: str
        """
        return self._cheque_writer

    @cheque_writer.setter
    def cheque_writer(self, cheque_writer):
        """Sets the cheque_writer of this BankaccountsAddLineModel.

        Name of cheque writer  # noqa: E501

        :param cheque_writer: The cheque_writer of this BankaccountsAddLineModel.  # noqa: E501
        :type: str
        """

        self._cheque_writer = cheque_writer

    @property
    def cheque_bank(self):
        """Gets the cheque_bank of this BankaccountsAddLineModel.  # noqa: E501

        Bank of cheque writer  # noqa: E501

        :return: The cheque_bank of this BankaccountsAddLineModel.  # noqa: E501
        :rtype: str
        """
        return self._cheque_bank

    @cheque_bank.setter
    def cheque_bank(self, cheque_bank):
        """Sets the cheque_bank of this BankaccountsAddLineModel.

        Bank of cheque writer  # noqa: E501

        :param cheque_bank: The cheque_bank of this BankaccountsAddLineModel.  # noqa: E501
        :type: str
        """

        self._cheque_bank = cheque_bank

    @property
    def accountancycode(self):
        """Gets the accountancycode of this BankaccountsAddLineModel.  # noqa: E501

        Accountancy code  # noqa: E501

        :return: The accountancycode of this BankaccountsAddLineModel.  # noqa: E501
        :rtype: str
        """
        return self._accountancycode

    @accountancycode.setter
    def accountancycode(self, accountancycode):
        """Sets the accountancycode of this BankaccountsAddLineModel.

        Accountancy code  # noqa: E501

        :param accountancycode: The accountancycode of this BankaccountsAddLineModel.  # noqa: E501
        :type: str
        """

        self._accountancycode = accountancycode

    @property
    def datev(self):
        """Gets the datev of this BankaccountsAddLineModel.  # noqa: E501

        Payment date value (timestamp)  # noqa: E501

        :return: The datev of this BankaccountsAddLineModel.  # noqa: E501
        :rtype: str
        """
        return self._datev

    @datev.setter
    def datev(self, datev):
        """Sets the datev of this BankaccountsAddLineModel.

        Payment date value (timestamp)  # noqa: E501

        :param datev: The datev of this BankaccountsAddLineModel.  # noqa: E501
        :type: str
        """

        self._datev = datev

    @property
    def num_releve(self):
        """Gets the num_releve of this BankaccountsAddLineModel.  # noqa: E501

        Bank statement numero  # noqa: E501

        :return: The num_releve of this BankaccountsAddLineModel.  # noqa: E501
        :rtype: str
        """
        return self._num_releve

    @num_releve.setter
    def num_releve(self, num_releve):
        """Sets the num_releve of this BankaccountsAddLineModel.

        Bank statement numero  # noqa: E501

        :param num_releve: The num_releve of this BankaccountsAddLineModel.  # noqa: E501
        :type: str
        """

        self._num_releve = num_releve

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankaccountsAddLineModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankaccountsAddLineModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
