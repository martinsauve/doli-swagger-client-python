# coding: utf-8

"""
    Restler API Explorer

    Live API Documentation  # noqa: E501

    OpenAPI spec version: 1
    Contact: arul@luracast.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductsAddVariantModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'weight_impact': 'float',
        'price_impact': 'float',
        'price_impact_is_percent': 'bool',
        'features': 'list[str]',
        'reference': 'str',
        'ref_ext': 'str'
    }

    attribute_map = {
        'weight_impact': 'weight_impact',
        'price_impact': 'price_impact',
        'price_impact_is_percent': 'price_impact_is_percent',
        'features': 'features',
        'reference': 'reference',
        'ref_ext': 'ref_ext'
    }

    def __init__(self, weight_impact=None, price_impact=None, price_impact_is_percent=None, features=None, reference=None, ref_ext=None):  # noqa: E501
        """ProductsAddVariantModel - a model defined in Swagger"""  # noqa: E501
        self._weight_impact = None
        self._price_impact = None
        self._price_impact_is_percent = None
        self._features = None
        self._reference = None
        self._ref_ext = None
        self.discriminator = None
        self.weight_impact = weight_impact
        self.price_impact = price_impact
        self.price_impact_is_percent = price_impact_is_percent
        self.features = features
        if reference is not None:
            self.reference = reference
        if ref_ext is not None:
            self.ref_ext = ref_ext

    @property
    def weight_impact(self):
        """Gets the weight_impact of this ProductsAddVariantModel.  # noqa: E501

        Weight impact of variant  # noqa: E501

        :return: The weight_impact of this ProductsAddVariantModel.  # noqa: E501
        :rtype: float
        """
        return self._weight_impact

    @weight_impact.setter
    def weight_impact(self, weight_impact):
        """Sets the weight_impact of this ProductsAddVariantModel.

        Weight impact of variant  # noqa: E501

        :param weight_impact: The weight_impact of this ProductsAddVariantModel.  # noqa: E501
        :type: float
        """
        if weight_impact is None:
            raise ValueError("Invalid value for `weight_impact`, must not be `None`")  # noqa: E501

        self._weight_impact = weight_impact

    @property
    def price_impact(self):
        """Gets the price_impact of this ProductsAddVariantModel.  # noqa: E501

        Price impact of variant  # noqa: E501

        :return: The price_impact of this ProductsAddVariantModel.  # noqa: E501
        :rtype: float
        """
        return self._price_impact

    @price_impact.setter
    def price_impact(self, price_impact):
        """Sets the price_impact of this ProductsAddVariantModel.

        Price impact of variant  # noqa: E501

        :param price_impact: The price_impact of this ProductsAddVariantModel.  # noqa: E501
        :type: float
        """
        if price_impact is None:
            raise ValueError("Invalid value for `price_impact`, must not be `None`")  # noqa: E501

        self._price_impact = price_impact

    @property
    def price_impact_is_percent(self):
        """Gets the price_impact_is_percent of this ProductsAddVariantModel.  # noqa: E501

        Price impact in percent (true or false)  # noqa: E501

        :return: The price_impact_is_percent of this ProductsAddVariantModel.  # noqa: E501
        :rtype: bool
        """
        return self._price_impact_is_percent

    @price_impact_is_percent.setter
    def price_impact_is_percent(self, price_impact_is_percent):
        """Sets the price_impact_is_percent of this ProductsAddVariantModel.

        Price impact in percent (true or false)  # noqa: E501

        :param price_impact_is_percent: The price_impact_is_percent of this ProductsAddVariantModel.  # noqa: E501
        :type: bool
        """
        if price_impact_is_percent is None:
            raise ValueError("Invalid value for `price_impact_is_percent`, must not be `None`")  # noqa: E501

        self._price_impact_is_percent = price_impact_is_percent

    @property
    def features(self):
        """Gets the features of this ProductsAddVariantModel.  # noqa: E501

        List of attributes pairs id_attribute->id_value. Example: array(id_color=>id_Blue, id_size=>id_small, id_option=>id_val_a, ...)  # noqa: E501

        :return: The features of this ProductsAddVariantModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this ProductsAddVariantModel.

        List of attributes pairs id_attribute->id_value. Example: array(id_color=>id_Blue, id_size=>id_small, id_option=>id_val_a, ...)  # noqa: E501

        :param features: The features of this ProductsAddVariantModel.  # noqa: E501
        :type: list[str]
        """
        if features is None:
            raise ValueError("Invalid value for `features`, must not be `None`")  # noqa: E501

        self._features = features

    @property
    def reference(self):
        """Gets the reference of this ProductsAddVariantModel.  # noqa: E501

        Customized reference of variant  # noqa: E501

        :return: The reference of this ProductsAddVariantModel.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this ProductsAddVariantModel.

        Customized reference of variant  # noqa: E501

        :param reference: The reference of this ProductsAddVariantModel.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def ref_ext(self):
        """Gets the ref_ext of this ProductsAddVariantModel.  # noqa: E501

        External reference of variant  # noqa: E501

        :return: The ref_ext of this ProductsAddVariantModel.  # noqa: E501
        :rtype: str
        """
        return self._ref_ext

    @ref_ext.setter
    def ref_ext(self, ref_ext):
        """Sets the ref_ext of this ProductsAddVariantModel.

        External reference of variant  # noqa: E501

        :param ref_ext: The ref_ext of this ProductsAddVariantModel.  # noqa: E501
        :type: str
        """

        self._ref_ext = ref_ext

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductsAddVariantModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductsAddVariantModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
