# coding: utf-8

"""
    Restler API Explorer

    Live API Documentation  # noqa: E501

    OpenAPI spec version: 1
    Contact: arul@luracast.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvoicesAddPaymentModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'datepaye': 'str',
        'paymentid': 'int',
        'closepaidinvoices': 'str',
        'accountid': 'int',
        'num_payment': 'str',
        'comment': 'str',
        'chqemetteur': 'str',
        'chqbank': 'str'
    }

    attribute_map = {
        'datepaye': 'datepaye',
        'paymentid': 'paymentid',
        'closepaidinvoices': 'closepaidinvoices',
        'accountid': 'accountid',
        'num_payment': 'num_payment',
        'comment': 'comment',
        'chqemetteur': 'chqemetteur',
        'chqbank': 'chqbank'
    }

    def __init__(self, datepaye=None, paymentid=None, closepaidinvoices=None, accountid=None, num_payment=None, comment=None, chqemetteur=None, chqbank=None):  # noqa: E501
        """InvoicesAddPaymentModel - a model defined in Swagger"""  # noqa: E501
        self._datepaye = None
        self._paymentid = None
        self._closepaidinvoices = None
        self._accountid = None
        self._num_payment = None
        self._comment = None
        self._chqemetteur = None
        self._chqbank = None
        self.discriminator = None
        self.datepaye = datepaye
        self.paymentid = paymentid
        self.closepaidinvoices = closepaidinvoices
        self.accountid = accountid
        if num_payment is not None:
            self.num_payment = num_payment
        if comment is not None:
            self.comment = comment
        if chqemetteur is not None:
            self.chqemetteur = chqemetteur
        if chqbank is not None:
            self.chqbank = chqbank

    @property
    def datepaye(self):
        """Gets the datepaye of this InvoicesAddPaymentModel.  # noqa: E501

        Payment date  # noqa: E501

        :return: The datepaye of this InvoicesAddPaymentModel.  # noqa: E501
        :rtype: str
        """
        return self._datepaye

    @datepaye.setter
    def datepaye(self, datepaye):
        """Sets the datepaye of this InvoicesAddPaymentModel.

        Payment date  # noqa: E501

        :param datepaye: The datepaye of this InvoicesAddPaymentModel.  # noqa: E501
        :type: str
        """
        if datepaye is None:
            raise ValueError("Invalid value for `datepaye`, must not be `None`")  # noqa: E501

        self._datepaye = datepaye

    @property
    def paymentid(self):
        """Gets the paymentid of this InvoicesAddPaymentModel.  # noqa: E501

        Payment mode Id  # noqa: E501

        :return: The paymentid of this InvoicesAddPaymentModel.  # noqa: E501
        :rtype: int
        """
        return self._paymentid

    @paymentid.setter
    def paymentid(self, paymentid):
        """Sets the paymentid of this InvoicesAddPaymentModel.

        Payment mode Id  # noqa: E501

        :param paymentid: The paymentid of this InvoicesAddPaymentModel.  # noqa: E501
        :type: int
        """
        if paymentid is None:
            raise ValueError("Invalid value for `paymentid`, must not be `None`")  # noqa: E501

        self._paymentid = paymentid

    @property
    def closepaidinvoices(self):
        """Gets the closepaidinvoices of this InvoicesAddPaymentModel.  # noqa: E501

        Close paid invoices  # noqa: E501

        :return: The closepaidinvoices of this InvoicesAddPaymentModel.  # noqa: E501
        :rtype: str
        """
        return self._closepaidinvoices

    @closepaidinvoices.setter
    def closepaidinvoices(self, closepaidinvoices):
        """Sets the closepaidinvoices of this InvoicesAddPaymentModel.

        Close paid invoices  # noqa: E501

        :param closepaidinvoices: The closepaidinvoices of this InvoicesAddPaymentModel.  # noqa: E501
        :type: str
        """
        if closepaidinvoices is None:
            raise ValueError("Invalid value for `closepaidinvoices`, must not be `None`")  # noqa: E501
        allowed_values = ["yes", "no"]  # noqa: E501
        if closepaidinvoices not in allowed_values:
            raise ValueError(
                "Invalid value for `closepaidinvoices` ({0}), must be one of {1}"  # noqa: E501
                .format(closepaidinvoices, allowed_values)
            )

        self._closepaidinvoices = closepaidinvoices

    @property
    def accountid(self):
        """Gets the accountid of this InvoicesAddPaymentModel.  # noqa: E501

        Account Id  # noqa: E501

        :return: The accountid of this InvoicesAddPaymentModel.  # noqa: E501
        :rtype: int
        """
        return self._accountid

    @accountid.setter
    def accountid(self, accountid):
        """Sets the accountid of this InvoicesAddPaymentModel.

        Account Id  # noqa: E501

        :param accountid: The accountid of this InvoicesAddPaymentModel.  # noqa: E501
        :type: int
        """
        if accountid is None:
            raise ValueError("Invalid value for `accountid`, must not be `None`")  # noqa: E501

        self._accountid = accountid

    @property
    def num_payment(self):
        """Gets the num_payment of this InvoicesAddPaymentModel.  # noqa: E501

        Payment number (optional)  # noqa: E501

        :return: The num_payment of this InvoicesAddPaymentModel.  # noqa: E501
        :rtype: str
        """
        return self._num_payment

    @num_payment.setter
    def num_payment(self, num_payment):
        """Sets the num_payment of this InvoicesAddPaymentModel.

        Payment number (optional)  # noqa: E501

        :param num_payment: The num_payment of this InvoicesAddPaymentModel.  # noqa: E501
        :type: str
        """

        self._num_payment = num_payment

    @property
    def comment(self):
        """Gets the comment of this InvoicesAddPaymentModel.  # noqa: E501

        Note private (optional)  # noqa: E501

        :return: The comment of this InvoicesAddPaymentModel.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this InvoicesAddPaymentModel.

        Note private (optional)  # noqa: E501

        :param comment: The comment of this InvoicesAddPaymentModel.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def chqemetteur(self):
        """Gets the chqemetteur of this InvoicesAddPaymentModel.  # noqa: E501

        Payment issuer (mandatory if paymentcode = 'CHQ')  # noqa: E501

        :return: The chqemetteur of this InvoicesAddPaymentModel.  # noqa: E501
        :rtype: str
        """
        return self._chqemetteur

    @chqemetteur.setter
    def chqemetteur(self, chqemetteur):
        """Sets the chqemetteur of this InvoicesAddPaymentModel.

        Payment issuer (mandatory if paymentcode = 'CHQ')  # noqa: E501

        :param chqemetteur: The chqemetteur of this InvoicesAddPaymentModel.  # noqa: E501
        :type: str
        """

        self._chqemetteur = chqemetteur

    @property
    def chqbank(self):
        """Gets the chqbank of this InvoicesAddPaymentModel.  # noqa: E501

        Issuer bank name (optional)  # noqa: E501

        :return: The chqbank of this InvoicesAddPaymentModel.  # noqa: E501
        :rtype: str
        """
        return self._chqbank

    @chqbank.setter
    def chqbank(self, chqbank):
        """Sets the chqbank of this InvoicesAddPaymentModel.

        Issuer bank name (optional)  # noqa: E501

        :param chqbank: The chqbank of this InvoicesAddPaymentModel.  # noqa: E501
        :type: str
        """

        self._chqbank = chqbank

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoicesAddPaymentModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoicesAddPaymentModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
