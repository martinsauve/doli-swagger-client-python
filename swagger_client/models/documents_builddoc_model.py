# coding: utf-8

"""
    Restler API Explorer

    Live API Documentation  # noqa: E501

    OpenAPI spec version: 1
    Contact: arul@luracast.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DocumentsBuilddocModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'modulepart': 'str',
        'original_file': 'str',
        'doctemplate': 'str',
        'langcode': 'str'
    }

    attribute_map = {
        'modulepart': 'modulepart',
        'original_file': 'original_file',
        'doctemplate': 'doctemplate',
        'langcode': 'langcode'
    }

    def __init__(self, modulepart=None, original_file=None, doctemplate=None, langcode=None):  # noqa: E501
        """DocumentsBuilddocModel - a model defined in Swagger"""  # noqa: E501
        self._modulepart = None
        self._original_file = None
        self._doctemplate = None
        self._langcode = None
        self.discriminator = None
        self.modulepart = modulepart
        if original_file is not None:
            self.original_file = original_file
        if doctemplate is not None:
            self.doctemplate = doctemplate
        if langcode is not None:
            self.langcode = langcode

    @property
    def modulepart(self):
        """Gets the modulepart of this DocumentsBuilddocModel.  # noqa: E501

        Name of module or area concerned by file download ('invoice', 'order', ...).  # noqa: E501

        :return: The modulepart of this DocumentsBuilddocModel.  # noqa: E501
        :rtype: str
        """
        return self._modulepart

    @modulepart.setter
    def modulepart(self, modulepart):
        """Sets the modulepart of this DocumentsBuilddocModel.

        Name of module or area concerned by file download ('invoice', 'order', ...).  # noqa: E501

        :param modulepart: The modulepart of this DocumentsBuilddocModel.  # noqa: E501
        :type: str
        """
        if modulepart is None:
            raise ValueError("Invalid value for `modulepart`, must not be `None`")  # noqa: E501

        self._modulepart = modulepart

    @property
    def original_file(self):
        """Gets the original_file of this DocumentsBuilddocModel.  # noqa: E501

        Relative path with filename, relative to modulepart (for example: IN201701-999/IN201701-999.pdf).  # noqa: E501

        :return: The original_file of this DocumentsBuilddocModel.  # noqa: E501
        :rtype: str
        """
        return self._original_file

    @original_file.setter
    def original_file(self, original_file):
        """Sets the original_file of this DocumentsBuilddocModel.

        Relative path with filename, relative to modulepart (for example: IN201701-999/IN201701-999.pdf).  # noqa: E501

        :param original_file: The original_file of this DocumentsBuilddocModel.  # noqa: E501
        :type: str
        """

        self._original_file = original_file

    @property
    def doctemplate(self):
        """Gets the doctemplate of this DocumentsBuilddocModel.  # noqa: E501

        Set here the doc template to use for document generation (If not set, use the default template).  # noqa: E501

        :return: The doctemplate of this DocumentsBuilddocModel.  # noqa: E501
        :rtype: str
        """
        return self._doctemplate

    @doctemplate.setter
    def doctemplate(self, doctemplate):
        """Sets the doctemplate of this DocumentsBuilddocModel.

        Set here the doc template to use for document generation (If not set, use the default template).  # noqa: E501

        :param doctemplate: The doctemplate of this DocumentsBuilddocModel.  # noqa: E501
        :type: str
        """

        self._doctemplate = doctemplate

    @property
    def langcode(self):
        """Gets the langcode of this DocumentsBuilddocModel.  # noqa: E501

        Language code like 'en_US', 'fr_FR', 'es_ES', ... (If not set, use the default language).  # noqa: E501

        :return: The langcode of this DocumentsBuilddocModel.  # noqa: E501
        :rtype: str
        """
        return self._langcode

    @langcode.setter
    def langcode(self, langcode):
        """Sets the langcode of this DocumentsBuilddocModel.

        Language code like 'en_US', 'fr_FR', 'es_ES', ... (If not set, use the default language).  # noqa: E501

        :param langcode: The langcode of this DocumentsBuilddocModel.  # noqa: E501
        :type: str
        """

        self._langcode = langcode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentsBuilddocModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentsBuilddocModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
