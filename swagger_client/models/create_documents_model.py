# coding: utf-8

"""
    Restler API Explorer

    Live API Documentation  # noqa: E501

    OpenAPI spec version: 1
    Contact: arul@luracast.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateDocumentsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filename': 'str',
        'modulepart': 'str',
        'ref': 'str',
        'subdir': 'str',
        'filecontent': 'str',
        'fileencoding': 'str',
        'overwriteifexists': 'int',
        'createdirifnotexists': 'int'
    }

    attribute_map = {
        'filename': 'filename',
        'modulepart': 'modulepart',
        'ref': 'ref',
        'subdir': 'subdir',
        'filecontent': 'filecontent',
        'fileencoding': 'fileencoding',
        'overwriteifexists': 'overwriteifexists',
        'createdirifnotexists': 'createdirifnotexists'
    }

    def __init__(self, filename=None, modulepart=None, ref=None, subdir=None, filecontent=None, fileencoding=None, overwriteifexists=None, createdirifnotexists=None):  # noqa: E501
        """CreateDocumentsModel - a model defined in Swagger"""  # noqa: E501
        self._filename = None
        self._modulepart = None
        self._ref = None
        self._subdir = None
        self._filecontent = None
        self._fileencoding = None
        self._overwriteifexists = None
        self._createdirifnotexists = None
        self.discriminator = None
        self.filename = filename
        self.modulepart = modulepart
        if ref is not None:
            self.ref = ref
        if subdir is not None:
            self.subdir = subdir
        if filecontent is not None:
            self.filecontent = filecontent
        if fileencoding is not None:
            self.fileencoding = fileencoding
        if overwriteifexists is not None:
            self.overwriteifexists = overwriteifexists
        if createdirifnotexists is not None:
            self.createdirifnotexists = createdirifnotexists

    @property
    def filename(self):
        """Gets the filename of this CreateDocumentsModel.  # noqa: E501

        Name of file to create ('FA1705-0123.txt')  # noqa: E501

        :return: The filename of this CreateDocumentsModel.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this CreateDocumentsModel.

        Name of file to create ('FA1705-0123.txt')  # noqa: E501

        :param filename: The filename of this CreateDocumentsModel.  # noqa: E501
        :type: str
        """
        if filename is None:
            raise ValueError("Invalid value for `filename`, must not be `None`")  # noqa: E501

        self._filename = filename

    @property
    def modulepart(self):
        """Gets the modulepart of this CreateDocumentsModel.  # noqa: E501

        Name of module or area concerned by file upload ('facture', 'project', 'project_task', ...)  # noqa: E501

        :return: The modulepart of this CreateDocumentsModel.  # noqa: E501
        :rtype: str
        """
        return self._modulepart

    @modulepart.setter
    def modulepart(self, modulepart):
        """Sets the modulepart of this CreateDocumentsModel.

        Name of module or area concerned by file upload ('facture', 'project', 'project_task', ...)  # noqa: E501

        :param modulepart: The modulepart of this CreateDocumentsModel.  # noqa: E501
        :type: str
        """
        if modulepart is None:
            raise ValueError("Invalid value for `modulepart`, must not be `None`")  # noqa: E501

        self._modulepart = modulepart

    @property
    def ref(self):
        """Gets the ref of this CreateDocumentsModel.  # noqa: E501

        Reference of object (This will define subdir automatically and store submited file into it)  # noqa: E501

        :return: The ref of this CreateDocumentsModel.  # noqa: E501
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this CreateDocumentsModel.

        Reference of object (This will define subdir automatically and store submited file into it)  # noqa: E501

        :param ref: The ref of this CreateDocumentsModel.  # noqa: E501
        :type: str
        """

        self._ref = ref

    @property
    def subdir(self):
        """Gets the subdir of this CreateDocumentsModel.  # noqa: E501

        Subdirectory (Only if ref not provided)  # noqa: E501

        :return: The subdir of this CreateDocumentsModel.  # noqa: E501
        :rtype: str
        """
        return self._subdir

    @subdir.setter
    def subdir(self, subdir):
        """Sets the subdir of this CreateDocumentsModel.

        Subdirectory (Only if ref not provided)  # noqa: E501

        :param subdir: The subdir of this CreateDocumentsModel.  # noqa: E501
        :type: str
        """

        self._subdir = subdir

    @property
    def filecontent(self):
        """Gets the filecontent of this CreateDocumentsModel.  # noqa: E501

        File content (string with file content. An empty file will be created if this parameter is not provided)  # noqa: E501

        :return: The filecontent of this CreateDocumentsModel.  # noqa: E501
        :rtype: str
        """
        return self._filecontent

    @filecontent.setter
    def filecontent(self, filecontent):
        """Sets the filecontent of this CreateDocumentsModel.

        File content (string with file content. An empty file will be created if this parameter is not provided)  # noqa: E501

        :param filecontent: The filecontent of this CreateDocumentsModel.  # noqa: E501
        :type: str
        """

        self._filecontent = filecontent

    @property
    def fileencoding(self):
        """Gets the fileencoding of this CreateDocumentsModel.  # noqa: E501

        File encoding (''=no encoding, 'base64'=Base 64)  # noqa: E501

        :return: The fileencoding of this CreateDocumentsModel.  # noqa: E501
        :rtype: str
        """
        return self._fileencoding

    @fileencoding.setter
    def fileencoding(self, fileencoding):
        """Sets the fileencoding of this CreateDocumentsModel.

        File encoding (''=no encoding, 'base64'=Base 64)  # noqa: E501

        :param fileencoding: The fileencoding of this CreateDocumentsModel.  # noqa: E501
        :type: str
        """

        self._fileencoding = fileencoding

    @property
    def overwriteifexists(self):
        """Gets the overwriteifexists of this CreateDocumentsModel.  # noqa: E501

        Overwrite file if exists (1 by default)  # noqa: E501

        :return: The overwriteifexists of this CreateDocumentsModel.  # noqa: E501
        :rtype: int
        """
        return self._overwriteifexists

    @overwriteifexists.setter
    def overwriteifexists(self, overwriteifexists):
        """Sets the overwriteifexists of this CreateDocumentsModel.

        Overwrite file if exists (1 by default)  # noqa: E501

        :param overwriteifexists: The overwriteifexists of this CreateDocumentsModel.  # noqa: E501
        :type: int
        """

        self._overwriteifexists = overwriteifexists

    @property
    def createdirifnotexists(self):
        """Gets the createdirifnotexists of this CreateDocumentsModel.  # noqa: E501

        Create subdirectories if the doesn't exists (1 by default)  # noqa: E501

        :return: The createdirifnotexists of this CreateDocumentsModel.  # noqa: E501
        :rtype: int
        """
        return self._createdirifnotexists

    @createdirifnotexists.setter
    def createdirifnotexists(self, createdirifnotexists):
        """Sets the createdirifnotexists of this CreateDocumentsModel.

        Create subdirectories if the doesn't exists (1 by default)  # noqa: E501

        :param createdirifnotexists: The createdirifnotexists of this CreateDocumentsModel.  # noqa: E501
        :type: int
        """

        self._createdirifnotexists = createdirifnotexists

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateDocumentsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateDocumentsModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
