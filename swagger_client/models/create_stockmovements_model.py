# coding: utf-8

"""
    Restler API Explorer

    Live API Documentation  # noqa: E501

    OpenAPI spec version: 1
    Contact: arul@luracast.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateStockmovementsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_id': 'int',
        'warehouse_id': 'int',
        'qty': 'float',
        'lot': 'str',
        'movementcode': 'str',
        'movementlabel': 'str',
        'price': 'str',
        'dlc': 'date',
        'dluo': 'date'
    }

    attribute_map = {
        'product_id': 'product_id',
        'warehouse_id': 'warehouse_id',
        'qty': 'qty',
        'lot': 'lot',
        'movementcode': 'movementcode',
        'movementlabel': 'movementlabel',
        'price': 'price',
        'dlc': 'dlc',
        'dluo': 'dluo'
    }

    def __init__(self, product_id=None, warehouse_id=None, qty=None, lot=None, movementcode=None, movementlabel=None, price=None, dlc=None, dluo=None):  # noqa: E501
        """CreateStockmovementsModel - a model defined in Swagger"""  # noqa: E501
        self._product_id = None
        self._warehouse_id = None
        self._qty = None
        self._lot = None
        self._movementcode = None
        self._movementlabel = None
        self._price = None
        self._dlc = None
        self._dluo = None
        self.discriminator = None
        self.product_id = product_id
        self.warehouse_id = warehouse_id
        self.qty = qty
        if lot is not None:
            self.lot = lot
        if movementcode is not None:
            self.movementcode = movementcode
        if movementlabel is not None:
            self.movementlabel = movementlabel
        if price is not None:
            self.price = price
        if dlc is not None:
            self.dlc = dlc
        if dluo is not None:
            self.dluo = dluo

    @property
    def product_id(self):
        """Gets the product_id of this CreateStockmovementsModel.  # noqa: E501

        Id product id  # noqa: E501

        :return: The product_id of this CreateStockmovementsModel.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this CreateStockmovementsModel.

        Id product id  # noqa: E501

        :param product_id: The product_id of this CreateStockmovementsModel.  # noqa: E501
        :type: int
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this CreateStockmovementsModel.  # noqa: E501

        Id warehouse  # noqa: E501

        :return: The warehouse_id of this CreateStockmovementsModel.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this CreateStockmovementsModel.

        Id warehouse  # noqa: E501

        :param warehouse_id: The warehouse_id of this CreateStockmovementsModel.  # noqa: E501
        :type: int
        """
        if warehouse_id is None:
            raise ValueError("Invalid value for `warehouse_id`, must not be `None`")  # noqa: E501

        self._warehouse_id = warehouse_id

    @property
    def qty(self):
        """Gets the qty of this CreateStockmovementsModel.  # noqa: E501

        Qty to add (Use negative value for a stock decrease)  # noqa: E501

        :return: The qty of this CreateStockmovementsModel.  # noqa: E501
        :rtype: float
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this CreateStockmovementsModel.

        Qty to add (Use negative value for a stock decrease)  # noqa: E501

        :param qty: The qty of this CreateStockmovementsModel.  # noqa: E501
        :type: float
        """
        if qty is None:
            raise ValueError("Invalid value for `qty`, must not be `None`")  # noqa: E501

        self._qty = qty

    @property
    def lot(self):
        """Gets the lot of this CreateStockmovementsModel.  # noqa: E501

        Lot  # noqa: E501

        :return: The lot of this CreateStockmovementsModel.  # noqa: E501
        :rtype: str
        """
        return self._lot

    @lot.setter
    def lot(self, lot):
        """Sets the lot of this CreateStockmovementsModel.

        Lot  # noqa: E501

        :param lot: The lot of this CreateStockmovementsModel.  # noqa: E501
        :type: str
        """

        self._lot = lot

    @property
    def movementcode(self):
        """Gets the movementcode of this CreateStockmovementsModel.  # noqa: E501

        Movement code  # noqa: E501

        :return: The movementcode of this CreateStockmovementsModel.  # noqa: E501
        :rtype: str
        """
        return self._movementcode

    @movementcode.setter
    def movementcode(self, movementcode):
        """Sets the movementcode of this CreateStockmovementsModel.

        Movement code  # noqa: E501

        :param movementcode: The movementcode of this CreateStockmovementsModel.  # noqa: E501
        :type: str
        """

        self._movementcode = movementcode

    @property
    def movementlabel(self):
        """Gets the movementlabel of this CreateStockmovementsModel.  # noqa: E501

        Movement label  # noqa: E501

        :return: The movementlabel of this CreateStockmovementsModel.  # noqa: E501
        :rtype: str
        """
        return self._movementlabel

    @movementlabel.setter
    def movementlabel(self, movementlabel):
        """Sets the movementlabel of this CreateStockmovementsModel.

        Movement label  # noqa: E501

        :param movementlabel: The movementlabel of this CreateStockmovementsModel.  # noqa: E501
        :type: str
        """

        self._movementlabel = movementlabel

    @property
    def price(self):
        """Gets the price of this CreateStockmovementsModel.  # noqa: E501

        To update AWP (Average Weighted Price) when you make a stock increase (qty must be higher then 0).  # noqa: E501

        :return: The price of this CreateStockmovementsModel.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this CreateStockmovementsModel.

        To update AWP (Average Weighted Price) when you make a stock increase (qty must be higher then 0).  # noqa: E501

        :param price: The price of this CreateStockmovementsModel.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def dlc(self):
        """Gets the dlc of this CreateStockmovementsModel.  # noqa: E501

        Eat-by date.  # noqa: E501

        :return: The dlc of this CreateStockmovementsModel.  # noqa: E501
        :rtype: date
        """
        return self._dlc

    @dlc.setter
    def dlc(self, dlc):
        """Sets the dlc of this CreateStockmovementsModel.

        Eat-by date.  # noqa: E501

        :param dlc: The dlc of this CreateStockmovementsModel.  # noqa: E501
        :type: date
        """

        self._dlc = dlc

    @property
    def dluo(self):
        """Gets the dluo of this CreateStockmovementsModel.  # noqa: E501

        Sell-by date.  # noqa: E501

        :return: The dluo of this CreateStockmovementsModel.  # noqa: E501
        :rtype: date
        """
        return self._dluo

    @dluo.setter
    def dluo(self, dluo):
        """Sets the dluo of this CreateStockmovementsModel.

        Sell-by date.  # noqa: E501

        :param dluo: The dluo of this CreateStockmovementsModel.  # noqa: E501
        :type: date
        """

        self._dluo = dluo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateStockmovementsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateStockmovementsModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
