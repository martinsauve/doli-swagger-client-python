# coding: utf-8

"""
    Restler API Explorer

    Live API Documentation  # noqa: E501

    OpenAPI spec version: 1
    Contact: arul@luracast.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductsAddPurchasePriceModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'qty': 'float',
        'buyprice': 'float',
        'price_base_type': 'str',
        'fourn_id': 'int',
        'availability': 'int',
        'ref_fourn': 'str',
        'tva_tx': 'float',
        'charges': 'str',
        'remise_percent': 'float',
        'remise': 'float',
        'newnpr': 'int',
        'delivery_time_days': 'int',
        'supplier_reputation': 'str',
        'localtaxes_array': 'list[str]',
        'newdefaultvatcode': 'str',
        'multicurrency_buyprice': 'float',
        'multicurrency_price_base_type': 'str',
        'multicurrency_tx': 'float',
        'multicurrency_code': 'str',
        'desc_fourn': 'str',
        'barcode': 'str',
        'fk_barcode_type': 'int'
    }

    attribute_map = {
        'qty': 'qty',
        'buyprice': 'buyprice',
        'price_base_type': 'price_base_type',
        'fourn_id': 'fourn_id',
        'availability': 'availability',
        'ref_fourn': 'ref_fourn',
        'tva_tx': 'tva_tx',
        'charges': 'charges',
        'remise_percent': 'remise_percent',
        'remise': 'remise',
        'newnpr': 'newnpr',
        'delivery_time_days': 'delivery_time_days',
        'supplier_reputation': 'supplier_reputation',
        'localtaxes_array': 'localtaxes_array',
        'newdefaultvatcode': 'newdefaultvatcode',
        'multicurrency_buyprice': 'multicurrency_buyprice',
        'multicurrency_price_base_type': 'multicurrency_price_base_type',
        'multicurrency_tx': 'multicurrency_tx',
        'multicurrency_code': 'multicurrency_code',
        'desc_fourn': 'desc_fourn',
        'barcode': 'barcode',
        'fk_barcode_type': 'fk_barcode_type'
    }

    def __init__(self, qty=None, buyprice=None, price_base_type=None, fourn_id=None, availability=None, ref_fourn=None, tva_tx=None, charges=None, remise_percent=None, remise=None, newnpr=None, delivery_time_days=None, supplier_reputation=None, localtaxes_array=None, newdefaultvatcode=None, multicurrency_buyprice=None, multicurrency_price_base_type=None, multicurrency_tx=None, multicurrency_code=None, desc_fourn=None, barcode=None, fk_barcode_type=None):  # noqa: E501
        """ProductsAddPurchasePriceModel - a model defined in Swagger"""  # noqa: E501
        self._qty = None
        self._buyprice = None
        self._price_base_type = None
        self._fourn_id = None
        self._availability = None
        self._ref_fourn = None
        self._tva_tx = None
        self._charges = None
        self._remise_percent = None
        self._remise = None
        self._newnpr = None
        self._delivery_time_days = None
        self._supplier_reputation = None
        self._localtaxes_array = None
        self._newdefaultvatcode = None
        self._multicurrency_buyprice = None
        self._multicurrency_price_base_type = None
        self._multicurrency_tx = None
        self._multicurrency_code = None
        self._desc_fourn = None
        self._barcode = None
        self._fk_barcode_type = None
        self.discriminator = None
        self.qty = qty
        self.buyprice = buyprice
        self.price_base_type = price_base_type
        self.fourn_id = fourn_id
        self.availability = availability
        self.ref_fourn = ref_fourn
        self.tva_tx = tva_tx
        if charges is not None:
            self.charges = charges
        if remise_percent is not None:
            self.remise_percent = remise_percent
        if remise is not None:
            self.remise = remise
        if newnpr is not None:
            self.newnpr = newnpr
        if delivery_time_days is not None:
            self.delivery_time_days = delivery_time_days
        if supplier_reputation is not None:
            self.supplier_reputation = supplier_reputation
        if localtaxes_array is not None:
            self.localtaxes_array = localtaxes_array
        if newdefaultvatcode is not None:
            self.newdefaultvatcode = newdefaultvatcode
        if multicurrency_buyprice is not None:
            self.multicurrency_buyprice = multicurrency_buyprice
        if multicurrency_price_base_type is not None:
            self.multicurrency_price_base_type = multicurrency_price_base_type
        if multicurrency_tx is not None:
            self.multicurrency_tx = multicurrency_tx
        if multicurrency_code is not None:
            self.multicurrency_code = multicurrency_code
        if desc_fourn is not None:
            self.desc_fourn = desc_fourn
        if barcode is not None:
            self.barcode = barcode
        if fk_barcode_type is not None:
            self.fk_barcode_type = fk_barcode_type

    @property
    def qty(self):
        """Gets the qty of this ProductsAddPurchasePriceModel.  # noqa: E501

        Min quantity for which price is valid  # noqa: E501

        :return: The qty of this ProductsAddPurchasePriceModel.  # noqa: E501
        :rtype: float
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this ProductsAddPurchasePriceModel.

        Min quantity for which price is valid  # noqa: E501

        :param qty: The qty of this ProductsAddPurchasePriceModel.  # noqa: E501
        :type: float
        """
        if qty is None:
            raise ValueError("Invalid value for `qty`, must not be `None`")  # noqa: E501

        self._qty = qty

    @property
    def buyprice(self):
        """Gets the buyprice of this ProductsAddPurchasePriceModel.  # noqa: E501

        Purchase price for the quantity min  # noqa: E501

        :return: The buyprice of this ProductsAddPurchasePriceModel.  # noqa: E501
        :rtype: float
        """
        return self._buyprice

    @buyprice.setter
    def buyprice(self, buyprice):
        """Sets the buyprice of this ProductsAddPurchasePriceModel.

        Purchase price for the quantity min  # noqa: E501

        :param buyprice: The buyprice of this ProductsAddPurchasePriceModel.  # noqa: E501
        :type: float
        """
        if buyprice is None:
            raise ValueError("Invalid value for `buyprice`, must not be `None`")  # noqa: E501

        self._buyprice = buyprice

    @property
    def price_base_type(self):
        """Gets the price_base_type of this ProductsAddPurchasePriceModel.  # noqa: E501

        HT or TTC  # noqa: E501

        :return: The price_base_type of this ProductsAddPurchasePriceModel.  # noqa: E501
        :rtype: str
        """
        return self._price_base_type

    @price_base_type.setter
    def price_base_type(self, price_base_type):
        """Sets the price_base_type of this ProductsAddPurchasePriceModel.

        HT or TTC  # noqa: E501

        :param price_base_type: The price_base_type of this ProductsAddPurchasePriceModel.  # noqa: E501
        :type: str
        """
        if price_base_type is None:
            raise ValueError("Invalid value for `price_base_type`, must not be `None`")  # noqa: E501

        self._price_base_type = price_base_type

    @property
    def fourn_id(self):
        """Gets the fourn_id of this ProductsAddPurchasePriceModel.  # noqa: E501

        Supplier ID  # noqa: E501

        :return: The fourn_id of this ProductsAddPurchasePriceModel.  # noqa: E501
        :rtype: int
        """
        return self._fourn_id

    @fourn_id.setter
    def fourn_id(self, fourn_id):
        """Sets the fourn_id of this ProductsAddPurchasePriceModel.

        Supplier ID  # noqa: E501

        :param fourn_id: The fourn_id of this ProductsAddPurchasePriceModel.  # noqa: E501
        :type: int
        """
        if fourn_id is None:
            raise ValueError("Invalid value for `fourn_id`, must not be `None`")  # noqa: E501

        self._fourn_id = fourn_id

    @property
    def availability(self):
        """Gets the availability of this ProductsAddPurchasePriceModel.  # noqa: E501

        Product availability  # noqa: E501

        :return: The availability of this ProductsAddPurchasePriceModel.  # noqa: E501
        :rtype: int
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this ProductsAddPurchasePriceModel.

        Product availability  # noqa: E501

        :param availability: The availability of this ProductsAddPurchasePriceModel.  # noqa: E501
        :type: int
        """
        if availability is None:
            raise ValueError("Invalid value for `availability`, must not be `None`")  # noqa: E501

        self._availability = availability

    @property
    def ref_fourn(self):
        """Gets the ref_fourn of this ProductsAddPurchasePriceModel.  # noqa: E501

        Supplier ref  # noqa: E501

        :return: The ref_fourn of this ProductsAddPurchasePriceModel.  # noqa: E501
        :rtype: str
        """
        return self._ref_fourn

    @ref_fourn.setter
    def ref_fourn(self, ref_fourn):
        """Sets the ref_fourn of this ProductsAddPurchasePriceModel.

        Supplier ref  # noqa: E501

        :param ref_fourn: The ref_fourn of this ProductsAddPurchasePriceModel.  # noqa: E501
        :type: str
        """
        if ref_fourn is None:
            raise ValueError("Invalid value for `ref_fourn`, must not be `None`")  # noqa: E501

        self._ref_fourn = ref_fourn

    @property
    def tva_tx(self):
        """Gets the tva_tx of this ProductsAddPurchasePriceModel.  # noqa: E501

        New VAT Rate (For example 8.5. Should not be a string)  # noqa: E501

        :return: The tva_tx of this ProductsAddPurchasePriceModel.  # noqa: E501
        :rtype: float
        """
        return self._tva_tx

    @tva_tx.setter
    def tva_tx(self, tva_tx):
        """Sets the tva_tx of this ProductsAddPurchasePriceModel.

        New VAT Rate (For example 8.5. Should not be a string)  # noqa: E501

        :param tva_tx: The tva_tx of this ProductsAddPurchasePriceModel.  # noqa: E501
        :type: float
        """
        if tva_tx is None:
            raise ValueError("Invalid value for `tva_tx`, must not be `None`")  # noqa: E501

        self._tva_tx = tva_tx

    @property
    def charges(self):
        """Gets the charges of this ProductsAddPurchasePriceModel.  # noqa: E501

        costs affering to product  # noqa: E501

        :return: The charges of this ProductsAddPurchasePriceModel.  # noqa: E501
        :rtype: str
        """
        return self._charges

    @charges.setter
    def charges(self, charges):
        """Sets the charges of this ProductsAddPurchasePriceModel.

        costs affering to product  # noqa: E501

        :param charges: The charges of this ProductsAddPurchasePriceModel.  # noqa: E501
        :type: str
        """

        self._charges = charges

    @property
    def remise_percent(self):
        """Gets the remise_percent of this ProductsAddPurchasePriceModel.  # noqa: E501

        Discount regarding qty (percent)  # noqa: E501

        :return: The remise_percent of this ProductsAddPurchasePriceModel.  # noqa: E501
        :rtype: float
        """
        return self._remise_percent

    @remise_percent.setter
    def remise_percent(self, remise_percent):
        """Sets the remise_percent of this ProductsAddPurchasePriceModel.

        Discount regarding qty (percent)  # noqa: E501

        :param remise_percent: The remise_percent of this ProductsAddPurchasePriceModel.  # noqa: E501
        :type: float
        """

        self._remise_percent = remise_percent

    @property
    def remise(self):
        """Gets the remise of this ProductsAddPurchasePriceModel.  # noqa: E501

        Discount regarding qty (amount)  # noqa: E501

        :return: The remise of this ProductsAddPurchasePriceModel.  # noqa: E501
        :rtype: float
        """
        return self._remise

    @remise.setter
    def remise(self, remise):
        """Sets the remise of this ProductsAddPurchasePriceModel.

        Discount regarding qty (amount)  # noqa: E501

        :param remise: The remise of this ProductsAddPurchasePriceModel.  # noqa: E501
        :type: float
        """

        self._remise = remise

    @property
    def newnpr(self):
        """Gets the newnpr of this ProductsAddPurchasePriceModel.  # noqa: E501

        Set NPR or not  # noqa: E501

        :return: The newnpr of this ProductsAddPurchasePriceModel.  # noqa: E501
        :rtype: int
        """
        return self._newnpr

    @newnpr.setter
    def newnpr(self, newnpr):
        """Sets the newnpr of this ProductsAddPurchasePriceModel.

        Set NPR or not  # noqa: E501

        :param newnpr: The newnpr of this ProductsAddPurchasePriceModel.  # noqa: E501
        :type: int
        """

        self._newnpr = newnpr

    @property
    def delivery_time_days(self):
        """Gets the delivery_time_days of this ProductsAddPurchasePriceModel.  # noqa: E501

        Delay in days for delivery (max). May be '' if not defined.  # noqa: E501

        :return: The delivery_time_days of this ProductsAddPurchasePriceModel.  # noqa: E501
        :rtype: int
        """
        return self._delivery_time_days

    @delivery_time_days.setter
    def delivery_time_days(self, delivery_time_days):
        """Sets the delivery_time_days of this ProductsAddPurchasePriceModel.

        Delay in days for delivery (max). May be '' if not defined.  # noqa: E501

        :param delivery_time_days: The delivery_time_days of this ProductsAddPurchasePriceModel.  # noqa: E501
        :type: int
        """

        self._delivery_time_days = delivery_time_days

    @property
    def supplier_reputation(self):
        """Gets the supplier_reputation of this ProductsAddPurchasePriceModel.  # noqa: E501

        Reputation with this product to the defined supplier (empty, FAVORITE, DONOTORDER)  # noqa: E501

        :return: The supplier_reputation of this ProductsAddPurchasePriceModel.  # noqa: E501
        :rtype: str
        """
        return self._supplier_reputation

    @supplier_reputation.setter
    def supplier_reputation(self, supplier_reputation):
        """Sets the supplier_reputation of this ProductsAddPurchasePriceModel.

        Reputation with this product to the defined supplier (empty, FAVORITE, DONOTORDER)  # noqa: E501

        :param supplier_reputation: The supplier_reputation of this ProductsAddPurchasePriceModel.  # noqa: E501
        :type: str
        """

        self._supplier_reputation = supplier_reputation

    @property
    def localtaxes_array(self):
        """Gets the localtaxes_array of this ProductsAddPurchasePriceModel.  # noqa: E501

        Array with localtaxes info array('0'=>type1,'1'=>rate1,'2'=>type2,'3'=>rate2) (loaded by getLocalTaxesFromRate(vatrate, 0, ...) function).  # noqa: E501

        :return: The localtaxes_array of this ProductsAddPurchasePriceModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._localtaxes_array

    @localtaxes_array.setter
    def localtaxes_array(self, localtaxes_array):
        """Sets the localtaxes_array of this ProductsAddPurchasePriceModel.

        Array with localtaxes info array('0'=>type1,'1'=>rate1,'2'=>type2,'3'=>rate2) (loaded by getLocalTaxesFromRate(vatrate, 0, ...) function).  # noqa: E501

        :param localtaxes_array: The localtaxes_array of this ProductsAddPurchasePriceModel.  # noqa: E501
        :type: list[str]
        """

        self._localtaxes_array = localtaxes_array

    @property
    def newdefaultvatcode(self):
        """Gets the newdefaultvatcode of this ProductsAddPurchasePriceModel.  # noqa: E501

        Default vat code  # noqa: E501

        :return: The newdefaultvatcode of this ProductsAddPurchasePriceModel.  # noqa: E501
        :rtype: str
        """
        return self._newdefaultvatcode

    @newdefaultvatcode.setter
    def newdefaultvatcode(self, newdefaultvatcode):
        """Sets the newdefaultvatcode of this ProductsAddPurchasePriceModel.

        Default vat code  # noqa: E501

        :param newdefaultvatcode: The newdefaultvatcode of this ProductsAddPurchasePriceModel.  # noqa: E501
        :type: str
        """

        self._newdefaultvatcode = newdefaultvatcode

    @property
    def multicurrency_buyprice(self):
        """Gets the multicurrency_buyprice of this ProductsAddPurchasePriceModel.  # noqa: E501

        Purchase price for the quantity min in currency  # noqa: E501

        :return: The multicurrency_buyprice of this ProductsAddPurchasePriceModel.  # noqa: E501
        :rtype: float
        """
        return self._multicurrency_buyprice

    @multicurrency_buyprice.setter
    def multicurrency_buyprice(self, multicurrency_buyprice):
        """Sets the multicurrency_buyprice of this ProductsAddPurchasePriceModel.

        Purchase price for the quantity min in currency  # noqa: E501

        :param multicurrency_buyprice: The multicurrency_buyprice of this ProductsAddPurchasePriceModel.  # noqa: E501
        :type: float
        """

        self._multicurrency_buyprice = multicurrency_buyprice

    @property
    def multicurrency_price_base_type(self):
        """Gets the multicurrency_price_base_type of this ProductsAddPurchasePriceModel.  # noqa: E501

        HT or TTC in currency  # noqa: E501

        :return: The multicurrency_price_base_type of this ProductsAddPurchasePriceModel.  # noqa: E501
        :rtype: str
        """
        return self._multicurrency_price_base_type

    @multicurrency_price_base_type.setter
    def multicurrency_price_base_type(self, multicurrency_price_base_type):
        """Sets the multicurrency_price_base_type of this ProductsAddPurchasePriceModel.

        HT or TTC in currency  # noqa: E501

        :param multicurrency_price_base_type: The multicurrency_price_base_type of this ProductsAddPurchasePriceModel.  # noqa: E501
        :type: str
        """

        self._multicurrency_price_base_type = multicurrency_price_base_type

    @property
    def multicurrency_tx(self):
        """Gets the multicurrency_tx of this ProductsAddPurchasePriceModel.  # noqa: E501

        Rate currency  # noqa: E501

        :return: The multicurrency_tx of this ProductsAddPurchasePriceModel.  # noqa: E501
        :rtype: float
        """
        return self._multicurrency_tx

    @multicurrency_tx.setter
    def multicurrency_tx(self, multicurrency_tx):
        """Sets the multicurrency_tx of this ProductsAddPurchasePriceModel.

        Rate currency  # noqa: E501

        :param multicurrency_tx: The multicurrency_tx of this ProductsAddPurchasePriceModel.  # noqa: E501
        :type: float
        """

        self._multicurrency_tx = multicurrency_tx

    @property
    def multicurrency_code(self):
        """Gets the multicurrency_code of this ProductsAddPurchasePriceModel.  # noqa: E501

        Currency code  # noqa: E501

        :return: The multicurrency_code of this ProductsAddPurchasePriceModel.  # noqa: E501
        :rtype: str
        """
        return self._multicurrency_code

    @multicurrency_code.setter
    def multicurrency_code(self, multicurrency_code):
        """Sets the multicurrency_code of this ProductsAddPurchasePriceModel.

        Currency code  # noqa: E501

        :param multicurrency_code: The multicurrency_code of this ProductsAddPurchasePriceModel.  # noqa: E501
        :type: str
        """

        self._multicurrency_code = multicurrency_code

    @property
    def desc_fourn(self):
        """Gets the desc_fourn of this ProductsAddPurchasePriceModel.  # noqa: E501

        Custom description for product_fourn_price  # noqa: E501

        :return: The desc_fourn of this ProductsAddPurchasePriceModel.  # noqa: E501
        :rtype: str
        """
        return self._desc_fourn

    @desc_fourn.setter
    def desc_fourn(self, desc_fourn):
        """Sets the desc_fourn of this ProductsAddPurchasePriceModel.

        Custom description for product_fourn_price  # noqa: E501

        :param desc_fourn: The desc_fourn of this ProductsAddPurchasePriceModel.  # noqa: E501
        :type: str
        """

        self._desc_fourn = desc_fourn

    @property
    def barcode(self):
        """Gets the barcode of this ProductsAddPurchasePriceModel.  # noqa: E501

        Barcode  # noqa: E501

        :return: The barcode of this ProductsAddPurchasePriceModel.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this ProductsAddPurchasePriceModel.

        Barcode  # noqa: E501

        :param barcode: The barcode of this ProductsAddPurchasePriceModel.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def fk_barcode_type(self):
        """Gets the fk_barcode_type of this ProductsAddPurchasePriceModel.  # noqa: E501

        Barcode type  # noqa: E501

        :return: The fk_barcode_type of this ProductsAddPurchasePriceModel.  # noqa: E501
        :rtype: int
        """
        return self._fk_barcode_type

    @fk_barcode_type.setter
    def fk_barcode_type(self, fk_barcode_type):
        """Sets the fk_barcode_type of this ProductsAddPurchasePriceModel.

        Barcode type  # noqa: E501

        :param fk_barcode_type: The fk_barcode_type of this ProductsAddPurchasePriceModel.  # noqa: E501
        :type: int
        """

        self._fk_barcode_type = fk_barcode_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductsAddPurchasePriceModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductsAddPurchasePriceModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
