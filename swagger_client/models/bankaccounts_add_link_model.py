# coding: utf-8

"""
    Restler API Explorer

    Live API Documentation  # noqa: E501

    OpenAPI spec version: 1
    Contact: arul@luracast.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BankaccountsAddLinkModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url_id': 'int',
        'url': 'str',
        'label': 'str',
        'type': 'str'
    }

    attribute_map = {
        'url_id': 'url_id',
        'url': 'url',
        'label': 'label',
        'type': 'type'
    }

    def __init__(self, url_id=None, url=None, label=None, type=None):  # noqa: E501
        """BankaccountsAddLinkModel - a model defined in Swagger"""  # noqa: E501
        self._url_id = None
        self._url = None
        self._label = None
        self._type = None
        self.discriminator = None
        self.url_id = url_id
        self.url = url
        self.label = label
        self.type = type

    @property
    def url_id(self):
        """Gets the url_id of this BankaccountsAddLinkModel.  # noqa: E501

        ID to set in the URL  # noqa: E501

        :return: The url_id of this BankaccountsAddLinkModel.  # noqa: E501
        :rtype: int
        """
        return self._url_id

    @url_id.setter
    def url_id(self, url_id):
        """Sets the url_id of this BankaccountsAddLinkModel.

        ID to set in the URL  # noqa: E501

        :param url_id: The url_id of this BankaccountsAddLinkModel.  # noqa: E501
        :type: int
        """
        if url_id is None:
            raise ValueError("Invalid value for `url_id`, must not be `None`")  # noqa: E501

        self._url_id = url_id

    @property
    def url(self):
        """Gets the url of this BankaccountsAddLinkModel.  # noqa: E501

        URL of the link  # noqa: E501

        :return: The url of this BankaccountsAddLinkModel.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this BankaccountsAddLinkModel.

        URL of the link  # noqa: E501

        :param url: The url of this BankaccountsAddLinkModel.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def label(self):
        """Gets the label of this BankaccountsAddLinkModel.  # noqa: E501

        Label  # noqa: E501

        :return: The label of this BankaccountsAddLinkModel.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this BankaccountsAddLinkModel.

        Label  # noqa: E501

        :param label: The label of this BankaccountsAddLinkModel.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def type(self):
        """Gets the type of this BankaccountsAddLinkModel.  # noqa: E501

        Type of link ('payment', 'company', 'member', ...)  # noqa: E501

        :return: The type of this BankaccountsAddLinkModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BankaccountsAddLinkModel.

        Type of link ('payment', 'company', 'member', ...)  # noqa: E501

        :param type: The type of this BankaccountsAddLinkModel.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankaccountsAddLinkModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankaccountsAddLinkModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
