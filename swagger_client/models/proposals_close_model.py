# coding: utf-8

"""
    Restler API Explorer

    Live API Documentation  # noqa: E501

    OpenAPI spec version: 1
    Contact: arul@luracast.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProposalsCloseModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'int',
        'note_private': 'str',
        'notrigger': 'int'
    }

    attribute_map = {
        'status': 'status',
        'note_private': 'note_private',
        'notrigger': 'notrigger'
    }

    def __init__(self, status=None, note_private=None, notrigger=None):  # noqa: E501
        """ProposalsCloseModel - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._note_private = None
        self._notrigger = None
        self.discriminator = None
        self.status = status
        if note_private is not None:
            self.note_private = note_private
        if notrigger is not None:
            self.notrigger = notrigger

    @property
    def status(self):
        """Gets the status of this ProposalsCloseModel.  # noqa: E501

        Must be 2 (accepted) or 3 (refused)  # noqa: E501

        :return: The status of this ProposalsCloseModel.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProposalsCloseModel.

        Must be 2 (accepted) or 3 (refused)  # noqa: E501

        :param status: The status of this ProposalsCloseModel.  # noqa: E501
        :type: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def note_private(self):
        """Gets the note_private of this ProposalsCloseModel.  # noqa: E501

        Add this mention at end of private note  # noqa: E501

        :return: The note_private of this ProposalsCloseModel.  # noqa: E501
        :rtype: str
        """
        return self._note_private

    @note_private.setter
    def note_private(self, note_private):
        """Sets the note_private of this ProposalsCloseModel.

        Add this mention at end of private note  # noqa: E501

        :param note_private: The note_private of this ProposalsCloseModel.  # noqa: E501
        :type: str
        """

        self._note_private = note_private

    @property
    def notrigger(self):
        """Gets the notrigger of this ProposalsCloseModel.  # noqa: E501

        Disabled triggers  # noqa: E501

        :return: The notrigger of this ProposalsCloseModel.  # noqa: E501
        :rtype: int
        """
        return self._notrigger

    @notrigger.setter
    def notrigger(self, notrigger):
        """Sets the notrigger of this ProposalsCloseModel.

        Disabled triggers  # noqa: E501

        :param notrigger: The notrigger of this ProposalsCloseModel.  # noqa: E501
        :type: int
        """

        self._notrigger = notrigger

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProposalsCloseModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProposalsCloseModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
