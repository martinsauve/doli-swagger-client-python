# coding: utf-8

"""
    Restler API Explorer

    Live API Documentation  # noqa: E501

    OpenAPI spec version: 1
    Contact: arul@luracast.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductsAddSubproductsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subproduct_id': 'int',
        'qty': 'int',
        'incdec': 'int'
    }

    attribute_map = {
        'subproduct_id': 'subproduct_id',
        'qty': 'qty',
        'incdec': 'incdec'
    }

    def __init__(self, subproduct_id=None, qty=None, incdec=None):  # noqa: E501
        """ProductsAddSubproductsModel - a model defined in Swagger"""  # noqa: E501
        self._subproduct_id = None
        self._qty = None
        self._incdec = None
        self.discriminator = None
        self.subproduct_id = subproduct_id
        self.qty = qty
        if incdec is not None:
            self.incdec = incdec

    @property
    def subproduct_id(self):
        """Gets the subproduct_id of this ProductsAddSubproductsModel.  # noqa: E501

        Id of child product/service  # noqa: E501

        :return: The subproduct_id of this ProductsAddSubproductsModel.  # noqa: E501
        :rtype: int
        """
        return self._subproduct_id

    @subproduct_id.setter
    def subproduct_id(self, subproduct_id):
        """Sets the subproduct_id of this ProductsAddSubproductsModel.

        Id of child product/service  # noqa: E501

        :param subproduct_id: The subproduct_id of this ProductsAddSubproductsModel.  # noqa: E501
        :type: int
        """
        if subproduct_id is None:
            raise ValueError("Invalid value for `subproduct_id`, must not be `None`")  # noqa: E501

        self._subproduct_id = subproduct_id

    @property
    def qty(self):
        """Gets the qty of this ProductsAddSubproductsModel.  # noqa: E501

        Quantity  # noqa: E501

        :return: The qty of this ProductsAddSubproductsModel.  # noqa: E501
        :rtype: int
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this ProductsAddSubproductsModel.

        Quantity  # noqa: E501

        :param qty: The qty of this ProductsAddSubproductsModel.  # noqa: E501
        :type: int
        """
        if qty is None:
            raise ValueError("Invalid value for `qty`, must not be `None`")  # noqa: E501

        self._qty = qty

    @property
    def incdec(self):
        """Gets the incdec of this ProductsAddSubproductsModel.  # noqa: E501

        1=Increase/decrease stock of child when parent stock increase/decrease  # noqa: E501

        :return: The incdec of this ProductsAddSubproductsModel.  # noqa: E501
        :rtype: int
        """
        return self._incdec

    @incdec.setter
    def incdec(self, incdec):
        """Sets the incdec of this ProductsAddSubproductsModel.

        1=Increase/decrease stock of child when parent stock increase/decrease  # noqa: E501

        :param incdec: The incdec of this ProductsAddSubproductsModel.  # noqa: E501
        :type: int
        """

        self._incdec = incdec

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductsAddSubproductsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductsAddSubproductsModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
